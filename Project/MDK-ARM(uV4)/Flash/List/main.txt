; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\main.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\RTX\inc -I..\..\RTX\portable -I..\..\User\CpuFlash -I..\..\User\CRC8_16 -I..\..\User\DS1302 -I..\..\User\DWT -I..\..\User\IIC -I..\..\User\IWDG -I..\..\User\Key -I..\..\User\Led -I..\..\User\Net -I..\..\User\Protocal -I..\..\User\Reader -I..\..\User\SPI -I..\..\User\Timer -I..\..\User\Uart -I..\..\User\Param -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\main.crf ..\..\User\main.c]
                          THUMB

                          AREA ||i.AppObjCreate||, CODE, READONLY, ALIGN=2

                  AppObjCreate PROC
;;;939    */
;;;940    static void AppObjCreate (void)
000000  2130              MOVS     r1,#0x30
;;;941    {
;;;942    	/* 创建消息邮箱 */
;;;943    	os_mbx_init(&mailboxCardRX, sizeof(mailboxCardRX));
000002  480a              LDR      r0,|L1.44|
000004  f8dfc028          LDR      r12,|L1.48|
000008  df00              SVC      #0x0
;;;944        
;;;945        os_mbx_init(&mailboxCardFirst, sizeof(mailboxCardFirst));
00000a  2130              MOVS     r1,#0x30
00000c  4809              LDR      r0,|L1.52|
00000e  f8dfc020          LDR      r12,|L1.48|
000012  df00              SVC      #0x0
;;;946        os_mbx_init(&mailboxCardMulti, sizeof(mailboxCardMulti));
000014  2130              MOVS     r1,#0x30
000016  4808              LDR      r0,|L1.56|
000018  f8dfc014          LDR      r12,|L1.48|
00001c  df00              SVC      #0x0
;;;947        os_mbx_init(&mailboxCardInterLock, sizeof(mailboxCardInterLock));
00001e  2130              MOVS     r1,#0x30
000020  4806              LDR      r0,|L1.60|
000022  f8dfc00c          LDR      r12,|L1.48|
000026  df00              SVC      #0x0
;;;948    }
000028  4770              BX       lr
;;;949    
                          ENDP

00002a  0000              DCW      0x0000
                  |L1.44|
                          DCD      mailboxCardRX
                  |L1.48|
                          DCD      rt_mbx_init
                  |L1.52|
                          DCD      mailboxCardFirst
                  |L1.56|
                          DCD      mailboxCardMulti
                  |L1.60|
                          DCD      mailboxCardInterLock

                          AREA ||i.AppTaskButton||, CODE, READONLY, ALIGN=2

                  AppTaskButton PROC
;;;661    */
;;;662    __task void AppTaskButton(void)
000000  b508              PUSH     {r3,lr}
;;;663    {
;;;664        uint16_t ret_flags;
;;;665        SingleRelation_T t_remoteOpen;
;;;666        while(1)
000002  e05d              B        |L2.192|
                  |L2.4|
;;;667        {
;;;668            //采用或等待方式;退出前bit位被清除
;;;669            if(os_evt_wait_or(BIT_ALL, 0xFFFF) == OS_R_EVT)
000004  2200              MOVS     r2,#0
000006  f64f71ff          MOV      r1,#0xffff
00000a  20ff              MOVS     r0,#0xff
00000c  f8dfc0b4          LDR      r12,|L2.196|
000010  df00              SVC      #0x0
000012  2802              CMP      r0,#2
000014  d154              BNE      |L2.192|
;;;670            {
;;;671                ret_flags = os_evt_get();//返回值为对应的bit
000016  f8dfc0b0          LDR      r12,|L2.200|
00001a  df00              SVC      #0x0
00001c  4604              MOV      r4,r0
;;;672                SysLed();
00001e  f7fffffe          BL       SysLed
;;;673                
;;;674                switch(ret_flags)
000022  2c02              CMP      r4,#2
000024  d01a              BEQ      |L2.92|
000026  2c04              CMP      r4,#4
000028  d02f              BEQ      |L2.138|
00002a  2c08              CMP      r4,#8
00002c  d144              BNE      |L2.184|
;;;675                {
;;;676                    case REMOTE_OPEN_BIT://远程开门,套用按键开门方式                   
;;;677                        t_remoteOpen.button_switcher = g_tRunInfo.remoteOpen;
00002e  4827              LDR      r0,|L2.204|
000030  7840              LDRB     r0,[r0,#1]  ; g_tRunInfo
000032  f88d0001          STRB     r0,[sp,#1]
;;;678                        g_tDoorStatus.openDoor(&t_remoteOpen, e_BUTTON_A);
000036  4826              LDR      r0,|L2.208|
000038  2102              MOVS     r1,#2
00003a  6882              LDR      r2,[r0,#8]  ; g_tDoorStatus
00003c  4668              MOV      r0,sp
00003e  4790              BLX      r2
;;;679                        OneTimerA = os_tmr_create(1000 * g_tParam.systemCfg.openTime, 0);  /* 定时1000*n个系统时钟节拍 ；0是回调函数的参数，可用于区分不同的定时器 */
000040  4924              LDR      r1,|L2.212|
000042  f8911028          LDRB     r1,[r1,#0x28]  ; g_tParam
000046  f44f727a          MOV      r2,#0x3e8
00004a  4351              MULS     r1,r2,r1
00004c  b288              UXTH     r0,r1
00004e  2100              MOVS     r1,#0
000050  f8dfc084          LDR      r12,|L2.216|
000054  df00              SVC      #0x0
000056  4921              LDR      r1,|L2.220|
000058  6008              STR      r0,[r1,#0]  ; OneTimerA
;;;680                        break;
00005a  e02e              B        |L2.186|
                  |L2.92|
;;;681                    
;;;682                    case BUTTON_A_BIT://按键A
;;;683                        if(g_tDoorStatus.doorA.switcherStatus == NC)
00005c  481c              LDR      r0,|L2.208|
00005e  7800              LDRB     r0,[r0,#0]  ; g_tDoorStatus
000060  b990              CBNZ     r0,|L2.136|
;;;684                        {
;;;685                            g_tDoorStatus.openDoor(&g_tParam.relation.relationA, e_BUTTON_A);
000062  481b              LDR      r0,|L2.208|
000064  2102              MOVS     r1,#2
000066  6882              LDR      r2,[r0,#8]  ; g_tDoorStatus
000068  481a              LDR      r0,|L2.212|
00006a  3014              ADDS     r0,r0,#0x14
00006c  4790              BLX      r2
;;;686                            OneTimerA = os_tmr_create(1000 * g_tParam.systemCfg.openTime, 4);  /* 定时1000*n个系统时钟节拍 ；1是回调函数的参数，可用于区分不同的定时器 */
00006e  4919              LDR      r1,|L2.212|
000070  f8911028          LDRB     r1,[r1,#0x28]  ; g_tParam
000074  f44f727a          MOV      r2,#0x3e8
000078  4351              MULS     r1,r2,r1
00007a  b288              UXTH     r0,r1
00007c  2104              MOVS     r1,#4
00007e  f8dfc058          LDR      r12,|L2.216|
000082  df00              SVC      #0x0
000084  4915              LDR      r1,|L2.220|
000086  6008              STR      r0,[r1,#0]  ; OneTimerA
                  |L2.136|
;;;687                        }
;;;688                        break;
000088  e017              B        |L2.186|
                  |L2.138|
;;;689                    
;;;690                    case BUTTON_B_BIT://按键B
;;;691                        if(g_tDoorStatus.doorB.switcherStatus == NC)
00008a  4811              LDR      r0,|L2.208|
00008c  7880              LDRB     r0,[r0,#2]  ; g_tDoorStatus
00008e  b990              CBNZ     r0,|L2.182|
;;;692                        {
;;;693                            g_tDoorStatus.openDoor(&g_tParam.relation.relationB, e_BUTTON_B);
000090  480f              LDR      r0,|L2.208|
000092  2103              MOVS     r1,#3
000094  6882              LDR      r2,[r0,#8]  ; g_tDoorStatus
000096  480f              LDR      r0,|L2.212|
000098  3016              ADDS     r0,r0,#0x16
00009a  4790              BLX      r2
;;;694                            OneTimerB = os_tmr_create(1000 * g_tParam.systemCfg.openTime, 2);  /* 定时1000*n个系统时钟节拍 ；2是回调函数的参数，可用于区分不同的定时器 */
00009c  490d              LDR      r1,|L2.212|
00009e  f8911028          LDRB     r1,[r1,#0x28]  ; g_tParam
0000a2  f44f727a          MOV      r2,#0x3e8
0000a6  4351              MULS     r1,r2,r1
0000a8  b288              UXTH     r0,r1
0000aa  2102              MOVS     r1,#2
0000ac  f8dfc028          LDR      r12,|L2.216|
0000b0  df00              SVC      #0x0
0000b2  490b              LDR      r1,|L2.224|
0000b4  6008              STR      r0,[r1,#0]  ; OneTimerB
                  |L2.182|
;;;695                        }
;;;696                        break; 
0000b6  e000              B        |L2.186|
                  |L2.184|
;;;697                    
;;;698                    default:
;;;699                        break;
0000b8  bf00              NOP      
                  |L2.186|
0000ba  bf00              NOP                            ;680
;;;700                }//end of switch
;;;701                
;;;702                
;;;703            //翻转系统状态灯
;;;704            SysLed();
0000bc  f7fffffe          BL       SysLed
                  |L2.192|
0000c0  e7a0              B        |L2.4|
;;;705                
;;;706            }//end of if
;;;707        }
;;;708    }
;;;709    
                          ENDP

0000c2  0000              DCW      0x0000
                  |L2.196|
                          DCD      rt_evt_wait
                  |L2.200|
                          DCD      rt_evt_get
                  |L2.204|
                          DCD      g_tRunInfo
                  |L2.208|
                          DCD      g_tDoorStatus
                  |L2.212|
                          DCD      g_tParam
                  |L2.216|
                          DCD      rt_tmr_create
                  |L2.220|
                          DCD      OneTimerA
                  |L2.224|
                          DCD      OneTimerB

                          AREA ||i.AppTaskCreate||, CODE, READONLY, ALIGN=2

                  AppTaskCreate PROC
;;;893    */
;;;894    static void AppTaskCreate (void)
000000  2300              MOVS     r3,#0
;;;895    {
;;;896        HandleTaskReader = os_tsk_create_user(AppTaskKey,              /* 任务函数 */ 
000002  4a22              LDR      r2,|L3.140|
000004  4922              LDR      r1,|L3.144|
000006  4823              LDR      r0,|L3.148|
000008  f8dfc08c          LDR      r12,|L3.152|
00000c  df00              SVC      #0x0
00000e  4923              LDR      r1,|L3.156|
000010  6008              STR      r0,[r1,#0]  ; HandleTaskReader
;;;897                                           1,                       /* 任务优先级 */ 
;;;898                                           &AppTaskKeyStk,          /* 任务栈 */
;;;899                                           sizeof(AppTaskKeyStk));  /* 任务栈大小，单位字节数 */
;;;900        
;;;901        HandleTaskReader = os_tsk_create_user(AppTaskReader,              /* 任务函数 */ 
000012  2300              MOVS     r3,#0
000014  4a22              LDR      r2,|L3.160|
000016  491e              LDR      r1,|L3.144|
000018  1d49              ADDS     r1,r1,#5
00001a  4822              LDR      r0,|L3.164|
00001c  f8dfc078          LDR      r12,|L3.152|
000020  df00              SVC      #0x0
000022  491e              LDR      r1,|L3.156|
000024  6008              STR      r0,[r1,#0]  ; HandleTaskReader
;;;902                                           6,                       /* 任务优先级 */ 
;;;903                                           &AppTaskReaderStk,          /* 任务栈 */
;;;904                                           sizeof(AppTaskReaderStk));  /* 任务栈大小，单位字节数 */
;;;905        
;;;906        HandleTaskFirst = os_tsk_create_user(AppTaskFirst,              /* 任务函数 */ 
000026  2300              MOVS     r3,#0
000028  4a1f              LDR      r2,|L3.168|
00002a  f04f1102          MOV      r1,#0x20002
00002e  481f              LDR      r0,|L3.172|
000030  f8dfc064          LDR      r12,|L3.152|
000034  df00              SVC      #0x0
000036  491e              LDR      r1,|L3.176|
000038  6008              STR      r0,[r1,#0]  ; HandleTaskFirst
;;;907                                           2,                       /* 任务优先级 */ 
;;;908                                           &AppTaskFirstStk,          /* 任务栈 */
;;;909                                           sizeof(AppTaskFirstStk));  /* 任务栈大小，单位字节数 */
;;;910        
;;;911        HandleTaskMulti = os_tsk_create_user(AppTaskMulti,              /* 任务函数 */ 
00003a  2300              MOVS     r3,#0
00003c  4a1d              LDR      r2,|L3.180|
00003e  4914              LDR      r1,|L3.144|
000040  1d09              ADDS     r1,r1,#4
000042  481d              LDR      r0,|L3.184|
000044  f8dfc050          LDR      r12,|L3.152|
000048  df00              SVC      #0x0
00004a  491c              LDR      r1,|L3.188|
00004c  6008              STR      r0,[r1,#0]  ; HandleTaskMulti
;;;912    	                                   5,                       /* 任务优先级 */ 
;;;913    	                                   &AppTaskMultiStk,          /* 任务栈 */
;;;914    	                                   sizeof(AppTaskMultiStk));  /* 任务栈大小，单位字节数 */
;;;915        
;;;916    	HandleTaskInterLock = os_tsk_create_user(AppTaskInterLock,              /* 任务函数 */ 
00004e  2300              MOVS     r3,#0
000050  4a1b              LDR      r2,|L3.192|
000052  490f              LDR      r1,|L3.144|
000054  1cc9              ADDS     r1,r1,#3
000056  481b              LDR      r0,|L3.196|
000058  f8dfc03c          LDR      r12,|L3.152|
00005c  df00              SVC      #0x0
00005e  491a              LDR      r1,|L3.200|
000060  6008              STR      r0,[r1,#0]  ; HandleTaskInterLock
;;;917    	                                   4,                       /* 任务优先级 */ 
;;;918    	                                   &AppTaskInterLockStk,          /* 任务栈 */
;;;919    	                                   sizeof(AppTaskInterLockStk));  /* 任务栈大小，单位字节数 */
;;;920        
;;;921        HandleTaskButton = os_tsk_create_user(AppTaskButton,              /* 任务函数 */ 
000062  2300              MOVS     r3,#0
000064  4a19              LDR      r2,|L3.204|
000066  490a              LDR      r1,|L3.144|
000068  1c89              ADDS     r1,r1,#2
00006a  4819              LDR      r0,|L3.208|
00006c  f8dfc028          LDR      r12,|L3.152|
000070  df00              SVC      #0x0
000072  4918              LDR      r1,|L3.212|
000074  6008              STR      r0,[r1,#0]  ; HandleTaskButton
;;;922    	                                   3,                       /* 任务优先级 */ 
;;;923    	                                   &AppTaskButtonStk,          /* 任务栈 */
;;;924    	                                   sizeof(AppTaskButtonStk));  /* 任务栈大小，单位字节数 */
;;;925        
;;;926    	HandleTaskNet = os_tsk_create_user(AppTaskNet,              /* 任务函数 */ 
000076  2300              MOVS     r3,#0
000078  4a17              LDR      r2,|L3.216|
00007a  4905              LDR      r1,|L3.144|
00007c  1d89              ADDS     r1,r1,#6
00007e  4817              LDR      r0,|L3.220|
000080  f8dfc014          LDR      r12,|L3.152|
000084  df00              SVC      #0x0
000086  4916              LDR      r1,|L3.224|
000088  6008              STR      r0,[r1,#0]  ; HandleTaskNet
;;;927    	                                   7,                       /* 任务优先级 */ 
;;;928    	                                   &AppTaskNetStk,          /* 任务栈 */
;;;929    	                                   sizeof(AppTaskNetStk));  /* 任务栈大小，单位字节数 */
;;;930    }
00008a  4770              BX       lr
;;;931    
                          ENDP

                  |L3.140|
                          DCD      AppTaskKeyStk
                  |L3.144|
                          DCD      0x00020001
                  |L3.148|
                          DCD      AppTaskKey
                  |L3.152|
                          DCD      rt_tsk_create
                  |L3.156|
                          DCD      HandleTaskReader
                  |L3.160|
                          DCD      AppTaskReaderStk
                  |L3.164|
                          DCD      AppTaskReader
                  |L3.168|
                          DCD      AppTaskFirstStk
                  |L3.172|
                          DCD      AppTaskFirst
                  |L3.176|
                          DCD      HandleTaskFirst
                  |L3.180|
                          DCD      AppTaskMultiStk
                  |L3.184|
                          DCD      AppTaskMulti
                  |L3.188|
                          DCD      HandleTaskMulti
                  |L3.192|
                          DCD      AppTaskInterLockStk
                  |L3.196|
                          DCD      AppTaskInterLock
                  |L3.200|
                          DCD      HandleTaskInterLock
                  |L3.204|
                          DCD      AppTaskButtonStk
                  |L3.208|
                          DCD      AppTaskButton
                  |L3.212|
                          DCD      HandleTaskButton
                  |L3.216|
                          DCD      AppTaskNetStk
                  |L3.220|
                          DCD      AppTaskNet
                  |L3.224|
                          DCD      HandleTaskNet

                          AREA ||i.AppTaskFirst||, CODE, READONLY, ALIGN=2

                  AppTaskFirst PROC
;;;276    //处理首卡的任务
;;;277    __task void AppTaskFirst(void)
000000  b508              PUSH     {r3,lr}
;;;278    {
;;;279        uint8_t type;
;;;280        SingleReader_T *readerMsg;
;;;281        const uint16_t usMaxBlockTime = 100; /* 延迟周期 */
000002  bf00              NOP      
                  |L4.4|
;;;282        while(1)
000004  e165              B        |L4.722|
                  |L4.6|
;;;283        {
;;;284            if(os_mbx_wait(&mailboxCardFirst, (void *)&readerMsg, usMaxBlockTime) != OS_R_TMO)
000006  2264              MOVS     r2,#0x64
000008  4669              MOV      r1,sp
00000a  48b2              LDR      r0,|L4.724|
00000c  f8dfc2c8          LDR      r12,|L4.728|
000010  df00              SVC      #0x0
000012  2801              CMP      r0,#1
000014  d0f6              BEQ      |L4.4|
;;;285            {
;;;286                switch(readerMsg->readerID)
000016  9800              LDR      r0,[sp,#0]
000018  7800              LDRB     r0,[r0,#0]
00001a  b110              CBZ      r0,|L4.34|
00001c  2801              CMP      r0,#1
00001e  d17d              BNE      |L4.284|
000020  e0a9              B        |L4.374|
                  |L4.34|
;;;287                {
;;;288                    case e_READER_A:
;;;289                        g_tReader.dataCheck(readerMsg);
000022  48ae              LDR      r0,|L4.732|
000024  6c41              LDR      r1,[r0,#0x44]  ; g_tReader
000026  9800              LDR      r0,[sp,#0]
000028  4788              BLX      r1
;;;290                        type = searchID(readerMsg->ID);//searchID函数先读配置，再检测卡号有没有
00002a  9800              LDR      r0,[sp,#0]
00002c  1d00              ADDS     r0,r0,#4
00002e  f7fffffe          BL       searchID
000032  4604              MOV      r4,r0
;;;291                        if(type == e_firstCardID)//首卡
000034  bb24              CBNZ     r4,|L4.128|
;;;292                        {
;;;293                            g_tRunInfo.firstCardStatus = 1;//首卡已刷，其他卡可以继续刷
000036  2001              MOVS     r0,#1
000038  49a9              LDR      r1,|L4.736|
00003a  7088              STRB     r0,[r1,#2]
;;;294                            if(g_tDoorStatus.doorA.switcherStatus == NC)
00003c  48a9              LDR      r0,|L4.740|
00003e  7800              LDRB     r0,[r0,#0]  ; g_tDoorStatus
000040  b9f0              CBNZ     r0,|L4.128|
;;;295                            {
;;;296                                g_tDoorStatus.openDoor(&g_tParam.relation.relationA, e_READER_A);
000042  48a8              LDR      r0,|L4.740|
000044  2100              MOVS     r1,#0
000046  6882              LDR      r2,[r0,#8]  ; g_tDoorStatus
000048  48a7              LDR      r0,|L4.744|
00004a  4790              BLX      r2
;;;297                                OneTimerA = os_tmr_create(1000 * g_tParam.systemCfg.openTime, 1);
00004c  49a6              LDR      r1,|L4.744|
00004e  3914              SUBS     r1,r1,#0x14
000050  f8911028          LDRB     r1,[r1,#0x28]  ; g_tParam
000054  f44f727a          MOV      r2,#0x3e8
000058  4351              MULS     r1,r2,r1
00005a  b288              UXTH     r0,r1
00005c  2101              MOVS     r1,#1
00005e  f8dfc28c          LDR      r12,|L4.748|
000062  df00              SVC      #0x0
000064  49a2              LDR      r1,|L4.752|
000066  6008              STR      r0,[r1,#0]  ; OneTimerA
;;;298                                
;;;299                                //存储记录到spi
;;;300                                storeRecord(readerMsg->ID, e_READER_A);
000068  2100              MOVS     r1,#0
00006a  9800              LDR      r0,[sp,#0]
00006c  1d00              ADDS     r0,r0,#4
00006e  f7fffffe          BL       storeRecord
;;;301                                //把卡号上传到服务器
;;;302                                SendDataToServer(0x06, 0, g_tReader.readerA.ID, 3);
000072  2303              MOVS     r3,#3
000074  4a99              LDR      r2,|L4.732|
000076  1d12              ADDS     r2,r2,#4
000078  2100              MOVS     r1,#0
00007a  2006              MOVS     r0,#6
00007c  f7fffffe          BL       SendDataToServer
                  |L4.128|
;;;303                            }
;;;304                        }
;;;305                        //权限高的卡号处理
;;;306                        if(type == e_superCardID || type == e_superPasswordID)//超级卡或超级密码随便开
000080  2c01              CMP      r4,#1
000082  d001              BEQ      |L4.136|
000084  2c02              CMP      r4,#2
000086  d121              BNE      |L4.204|
                  |L4.136|
;;;307                        {
;;;308                            if(g_tDoorStatus.doorA.switcherStatus == NC)
000088  4896              LDR      r0,|L4.740|
00008a  7800              LDRB     r0,[r0,#0]  ; g_tDoorStatus
00008c  b9f0              CBNZ     r0,|L4.204|
;;;309                            {
;;;310                                g_tDoorStatus.openDoor(&g_tParam.relation.relationA, e_READER_A);
00008e  4895              LDR      r0,|L4.740|
000090  2100              MOVS     r1,#0
000092  6882              LDR      r2,[r0,#8]  ; g_tDoorStatus
000094  4894              LDR      r0,|L4.744|
000096  4790              BLX      r2
;;;311                                OneTimerA = os_tmr_create(1000 * g_tParam.systemCfg.openTime, 1);
000098  4993              LDR      r1,|L4.744|
00009a  3914              SUBS     r1,r1,#0x14
00009c  f8911028          LDRB     r1,[r1,#0x28]  ; g_tParam
0000a0  f44f727a          MOV      r2,#0x3e8
0000a4  4351              MULS     r1,r2,r1
0000a6  b288              UXTH     r0,r1
0000a8  2101              MOVS     r1,#1
0000aa  f8dfc240          LDR      r12,|L4.748|
0000ae  df00              SVC      #0x0
0000b0  498f              LDR      r1,|L4.752|
0000b2  6008              STR      r0,[r1,#0]  ; OneTimerA
;;;312                                
;;;313                                //存储记录到spi
;;;314                                storeRecord(readerMsg->ID, e_READER_A);
0000b4  2100              MOVS     r1,#0
0000b6  9800              LDR      r0,[sp,#0]
0000b8  1d00              ADDS     r0,r0,#4
0000ba  f7fffffe          BL       storeRecord
;;;315                                //把卡号上传到服务器
;;;316                                SendDataToServer(0x06, e_READER_A, g_tReader.readerA.ID, 3);
0000be  2303              MOVS     r3,#3
0000c0  4a86              LDR      r2,|L4.732|
0000c2  1d12              ADDS     r2,r2,#4
0000c4  2100              MOVS     r1,#0
0000c6  2006              MOVS     r0,#6
0000c8  f7fffffe          BL       SendDataToServer
                  |L4.204|
;;;317                            }
;;;318                        }
;;;319                        if(type == e_threatCardID || type == e_threatPasswordID)//胁迫卡和胁迫码
0000cc  2c03              CMP      r4,#3
0000ce  d001              BEQ      |L4.212|
0000d0  2c04              CMP      r4,#4
0000d2  d121              BNE      |L4.280|
                  |L4.212|
;;;320                        {
;;;321                            if(g_tDoorStatus.doorA.switcherStatus == NC)
0000d4  4883              LDR      r0,|L4.740|
0000d6  7800              LDRB     r0,[r0,#0]  ; g_tDoorStatus
0000d8  b9f0              CBNZ     r0,|L4.280|
;;;322                            {
;;;323                                g_tDoorStatus.openDoor(&g_tParam.relation.relationA, e_READER_A);
0000da  4882              LDR      r0,|L4.740|
0000dc  2100              MOVS     r1,#0
0000de  6882              LDR      r2,[r0,#8]  ; g_tDoorStatus
0000e0  4881              LDR      r0,|L4.744|
0000e2  4790              BLX      r2
;;;324                                OneTimerA = os_tmr_create(1000 * g_tParam.systemCfg.openTime, 1);
0000e4  4980              LDR      r1,|L4.744|
0000e6  3914              SUBS     r1,r1,#0x14
0000e8  f8911028          LDRB     r1,[r1,#0x28]  ; g_tParam
0000ec  f44f727a          MOV      r2,#0x3e8
0000f0  4351              MULS     r1,r2,r1
0000f2  b288              UXTH     r0,r1
0000f4  2101              MOVS     r1,#1
0000f6  f8dfc1f4          LDR      r12,|L4.748|
0000fa  df00              SVC      #0x0
0000fc  497c              LDR      r1,|L4.752|
0000fe  6008              STR      r0,[r1,#0]  ; OneTimerA
;;;325                                
;;;326                                //存储记录到spi
;;;327                                storeRecord(readerMsg->ID, e_READER_A);
000100  2100              MOVS     r1,#0
000102  9800              LDR      r0,[sp,#0]
000104  1d00              ADDS     r0,r0,#4
000106  f7fffffe          BL       storeRecord
;;;328                                
;;;329                                SendDataToServer(0x22, e_READER_A, g_tReader.readerA.ID, 3);//上传报警消息
00010a  2303              MOVS     r3,#3
00010c  4a73              LDR      r2,|L4.732|
00010e  1d12              ADDS     r2,r2,#4
000110  2100              MOVS     r1,#0
000112  2022              MOVS     r0,#0x22
000114  f7fffffe          BL       SendDataToServer
                  |L4.280|
;;;330                            }
;;;331                        }
;;;332                        //符合首卡条件
;;;333                        if(g_tRunInfo.firstCardStatus == 1)
000118  4871              LDR      r0,|L4.736|
00011a  e000              B        |L4.286|
                  |L4.284|
00011c  e0d7              B        |L4.718|
                  |L4.286|
00011e  7880              LDRB     r0,[r0,#2]  ; g_tRunInfo
000120  2801              CMP      r0,#1
000122  d127              BNE      |L4.372|
;;;334                        {
;;;335                            if(type==e_keyBoardID || type==e_generalCardID || type==e_fingerID)
000124  2c05              CMP      r4,#5
000126  d003              BEQ      |L4.304|
000128  2c07              CMP      r4,#7
00012a  d001              BEQ      |L4.304|
00012c  2c08              CMP      r4,#8
00012e  d121              BNE      |L4.372|
                  |L4.304|
;;;336                            {
;;;337                                if(g_tDoorStatus.doorA.switcherStatus == NC)
000130  486c              LDR      r0,|L4.740|
000132  7800              LDRB     r0,[r0,#0]  ; g_tDoorStatus
000134  b9f0              CBNZ     r0,|L4.372|
;;;338                                {
;;;339                                    g_tDoorStatus.openDoor(&g_tParam.relation.relationA, e_READER_A);
000136  486b              LDR      r0,|L4.740|
000138  2100              MOVS     r1,#0
00013a  6882              LDR      r2,[r0,#8]  ; g_tDoorStatus
00013c  486a              LDR      r0,|L4.744|
00013e  4790              BLX      r2
;;;340                                    OneTimerA = os_tmr_create(1000 * g_tParam.systemCfg.openTime, 1);
000140  4969              LDR      r1,|L4.744|
000142  3914              SUBS     r1,r1,#0x14
000144  f8911028          LDRB     r1,[r1,#0x28]  ; g_tParam
000148  f44f727a          MOV      r2,#0x3e8
00014c  4351              MULS     r1,r2,r1
00014e  b288              UXTH     r0,r1
000150  2101              MOVS     r1,#1
000152  f8dfc198          LDR      r12,|L4.748|
000156  df00              SVC      #0x0
000158  4965              LDR      r1,|L4.752|
00015a  6008              STR      r0,[r1,#0]  ; OneTimerA
;;;341                                    
;;;342                                    //存储记录到spi
;;;343                                    storeRecord(readerMsg->ID, e_READER_A);
00015c  2100              MOVS     r1,#0
00015e  9800              LDR      r0,[sp,#0]
000160  1d00              ADDS     r0,r0,#4
000162  f7fffffe          BL       storeRecord
;;;344                                    //把卡号上传到服务器
;;;345                                    SendDataToServer(0x06, 0, g_tReader.readerA.ID, 3);
000166  2303              MOVS     r3,#3
000168  4a5c              LDR      r2,|L4.732|
00016a  1d12              ADDS     r2,r2,#4
00016c  2100              MOVS     r1,#0
00016e  2006              MOVS     r0,#6
000170  f7fffffe          BL       SendDataToServer
                  |L4.372|
;;;346                                }
;;;347                            }
;;;348                        }
;;;349                        break;
000174  e0ac              B        |L4.720|
                  |L4.374|
;;;350                    
;;;351                    case e_READER_B:
;;;352                        g_tReader.dataCheck(readerMsg);
000176  4859              LDR      r0,|L4.732|
000178  6c41              LDR      r1,[r0,#0x44]  ; g_tReader
00017a  9800              LDR      r0,[sp,#0]
00017c  4788              BLX      r1
;;;353                        type = searchID(readerMsg->ID);//searchID函数先读配置，再检测卡号有没有
00017e  9800              LDR      r0,[sp,#0]
000180  1d00              ADDS     r0,r0,#4
000182  f7fffffe          BL       searchID
000186  4604              MOV      r4,r0
;;;354                        if(type == e_firstCardID)//首卡
000188  bb2c              CBNZ     r4,|L4.470|
;;;355                        {
;;;356                            g_tRunInfo.firstCardStatus = 1;//首卡已刷，其他卡可以继续刷
00018a  2001              MOVS     r0,#1
00018c  4954              LDR      r1,|L4.736|
00018e  7088              STRB     r0,[r1,#2]
;;;357                            if(g_tDoorStatus.doorB.switcherStatus == NC)
000190  4854              LDR      r0,|L4.740|
000192  7880              LDRB     r0,[r0,#2]  ; g_tDoorStatus
000194  b9f8              CBNZ     r0,|L4.470|
;;;358                            {
;;;359                                g_tDoorStatus.openDoor(&g_tParam.relation.relationB, e_READER_B);
000196  4853              LDR      r0,|L4.740|
000198  2101              MOVS     r1,#1
00019a  6882              LDR      r2,[r0,#8]  ; g_tDoorStatus
00019c  4852              LDR      r0,|L4.744|
00019e  1c80              ADDS     r0,r0,#2
0001a0  4790              BLX      r2
;;;360                                OneTimerB = os_tmr_create(1000 * g_tParam.systemCfg.openTime, 2);
0001a2  4951              LDR      r1,|L4.744|
0001a4  3914              SUBS     r1,r1,#0x14
0001a6  f8911028          LDRB     r1,[r1,#0x28]  ; g_tParam
0001aa  f44f727a          MOV      r2,#0x3e8
0001ae  4351              MULS     r1,r2,r1
0001b0  b288              UXTH     r0,r1
0001b2  2102              MOVS     r1,#2
0001b4  f8dfc134          LDR      r12,|L4.748|
0001b8  df00              SVC      #0x0
0001ba  494e              LDR      r1,|L4.756|
0001bc  6008              STR      r0,[r1,#0]  ; OneTimerB
;;;361                                                                  
;;;362                                //存储记录到spi
;;;363                                storeRecord(readerMsg->ID, e_READER_B);
0001be  2101              MOVS     r1,#1
0001c0  9800              LDR      r0,[sp,#0]
0001c2  1d00              ADDS     r0,r0,#4
0001c4  f7fffffe          BL       storeRecord
;;;364                                //把卡号上传到服务器
;;;365                                SendDataToServer(0x06, 0, g_tReader.readerB.ID, 3);
0001c8  2303              MOVS     r3,#3
0001ca  4a44              LDR      r2,|L4.732|
0001cc  3225              ADDS     r2,r2,#0x25
0001ce  2100              MOVS     r1,#0
0001d0  2006              MOVS     r0,#6
0001d2  f7fffffe          BL       SendDataToServer
                  |L4.470|
;;;366                            }
;;;367                        }
;;;368                        //权限高的卡号处理
;;;369                        if(type == e_superCardID || type == e_superPasswordID)//超级卡或超级密码随便开
0001d6  2c01              CMP      r4,#1
0001d8  d001              BEQ      |L4.478|
0001da  2c02              CMP      r4,#2
0001dc  d122              BNE      |L4.548|
                  |L4.478|
;;;370                        {
;;;371                            if(g_tDoorStatus.doorB.switcherStatus == NC)
0001de  4841              LDR      r0,|L4.740|
0001e0  7880              LDRB     r0,[r0,#2]  ; g_tDoorStatus
0001e2  b9f8              CBNZ     r0,|L4.548|
;;;372                            { 
;;;373                                g_tDoorStatus.openDoor(&g_tParam.relation.relationB, e_READER_B);
0001e4  483f              LDR      r0,|L4.740|
0001e6  2101              MOVS     r1,#1
0001e8  6882              LDR      r2,[r0,#8]  ; g_tDoorStatus
0001ea  483f              LDR      r0,|L4.744|
0001ec  1c80              ADDS     r0,r0,#2
0001ee  4790              BLX      r2
;;;374                                OneTimerB = os_tmr_create(1000 * g_tParam.systemCfg.openTime, 2);
0001f0  493d              LDR      r1,|L4.744|
0001f2  3914              SUBS     r1,r1,#0x14
0001f4  f8911028          LDRB     r1,[r1,#0x28]  ; g_tParam
0001f8  f44f727a          MOV      r2,#0x3e8
0001fc  4351              MULS     r1,r2,r1
0001fe  b288              UXTH     r0,r1
000200  2102              MOVS     r1,#2
000202  f8dfc0e8          LDR      r12,|L4.748|
000206  df00              SVC      #0x0
000208  493a              LDR      r1,|L4.756|
00020a  6008              STR      r0,[r1,#0]  ; OneTimerB
;;;375                                //存储记录到spi
;;;376                                storeRecord(readerMsg->ID, e_READER_B);
00020c  2101              MOVS     r1,#1
00020e  9800              LDR      r0,[sp,#0]
000210  1d00              ADDS     r0,r0,#4
000212  f7fffffe          BL       storeRecord
;;;377                                //把卡号上传到服务器
;;;378                                SendDataToServer(0x06, e_READER_B, g_tReader.readerB.ID, 3);
000216  2303              MOVS     r3,#3
000218  4a30              LDR      r2,|L4.732|
00021a  3225              ADDS     r2,r2,#0x25
00021c  2101              MOVS     r1,#1
00021e  2006              MOVS     r0,#6
000220  f7fffffe          BL       SendDataToServer
                  |L4.548|
;;;379                            }
;;;380                        }
;;;381                        if(type == e_threatCardID || type == e_threatPasswordID)//胁迫卡和胁迫码
000224  2c03              CMP      r4,#3
000226  d001              BEQ      |L4.556|
000228  2c04              CMP      r4,#4
00022a  d122              BNE      |L4.626|
                  |L4.556|
;;;382                        {
;;;383                            if(g_tDoorStatus.doorB.switcherStatus == NC)
00022c  482d              LDR      r0,|L4.740|
00022e  7880              LDRB     r0,[r0,#2]  ; g_tDoorStatus
000230  b9f8              CBNZ     r0,|L4.626|
;;;384                            {
;;;385                                g_tDoorStatus.openDoor(&g_tParam.relation.relationB, e_READER_B);
000232  482c              LDR      r0,|L4.740|
000234  2101              MOVS     r1,#1
000236  6882              LDR      r2,[r0,#8]  ; g_tDoorStatus
000238  482b              LDR      r0,|L4.744|
00023a  1c80              ADDS     r0,r0,#2
00023c  4790              BLX      r2
;;;386                                OneTimerA = os_tmr_create(1000 * g_tParam.systemCfg.openTime, 2);
00023e  492a              LDR      r1,|L4.744|
000240  3914              SUBS     r1,r1,#0x14
000242  f8911028          LDRB     r1,[r1,#0x28]  ; g_tParam
000246  f44f727a          MOV      r2,#0x3e8
00024a  4351              MULS     r1,r2,r1
00024c  b288              UXTH     r0,r1
00024e  2102              MOVS     r1,#2
000250  f8dfc098          LDR      r12,|L4.748|
000254  df00              SVC      #0x0
000256  4926              LDR      r1,|L4.752|
000258  6008              STR      r0,[r1,#0]  ; OneTimerA
;;;387                                
;;;388                                //存储记录到spi
;;;389                                storeRecord(readerMsg->ID, e_READER_B);
00025a  2101              MOVS     r1,#1
00025c  9800              LDR      r0,[sp,#0]
00025e  1d00              ADDS     r0,r0,#4
000260  f7fffffe          BL       storeRecord
;;;390                                
;;;391                                SendDataToServer(0x22, e_READER_B, g_tReader.readerB.ID, 3);//上传报警消息
000264  2303              MOVS     r3,#3
000266  4a1d              LDR      r2,|L4.732|
000268  3225              ADDS     r2,r2,#0x25
00026a  2101              MOVS     r1,#1
00026c  2022              MOVS     r0,#0x22
00026e  f7fffffe          BL       SendDataToServer
                  |L4.626|
;;;392                            }
;;;393                        }
;;;394                        //符合首卡条件
;;;395                        if(g_tRunInfo.firstCardStatus == 1)
000272  481b              LDR      r0,|L4.736|
000274  7880              LDRB     r0,[r0,#2]  ; g_tRunInfo
000276  2801              CMP      r0,#1
000278  d128              BNE      |L4.716|
;;;396                        {
;;;397                            if(type==e_keyBoardID || type==e_generalCardID || type==e_fingerID)
00027a  2c05              CMP      r4,#5
00027c  d003              BEQ      |L4.646|
00027e  2c07              CMP      r4,#7
000280  d001              BEQ      |L4.646|
000282  2c08              CMP      r4,#8
000284  d122              BNE      |L4.716|
                  |L4.646|
;;;398                            {
;;;399                                if(g_tDoorStatus.doorB.switcherStatus == NC)
000286  4817              LDR      r0,|L4.740|
000288  7880              LDRB     r0,[r0,#2]  ; g_tDoorStatus
00028a  b9f8              CBNZ     r0,|L4.716|
;;;400                                {
;;;401                                    g_tDoorStatus.openDoor(&g_tParam.relation.relationB, e_READER_B);
00028c  4815              LDR      r0,|L4.740|
00028e  2101              MOVS     r1,#1
000290  6882              LDR      r2,[r0,#8]  ; g_tDoorStatus
000292  4815              LDR      r0,|L4.744|
000294  1c80              ADDS     r0,r0,#2
000296  4790              BLX      r2
;;;402                                    OneTimerB = os_tmr_create(1000 * g_tParam.systemCfg.openTime, 2);
000298  4913              LDR      r1,|L4.744|
00029a  3914              SUBS     r1,r1,#0x14
00029c  f8911028          LDRB     r1,[r1,#0x28]  ; g_tParam
0002a0  f44f727a          MOV      r2,#0x3e8
0002a4  4351              MULS     r1,r2,r1
0002a6  b288              UXTH     r0,r1
0002a8  2102              MOVS     r1,#2
0002aa  f8dfc040          LDR      r12,|L4.748|
0002ae  df00              SVC      #0x0
0002b0  4910              LDR      r1,|L4.756|
0002b2  6008              STR      r0,[r1,#0]  ; OneTimerB
;;;403                                                                      
;;;404                                    //存储记录到spi
;;;405                                    storeRecord(readerMsg->ID, e_READER_B);
0002b4  2101              MOVS     r1,#1
0002b6  9800              LDR      r0,[sp,#0]
0002b8  1d00              ADDS     r0,r0,#4
0002ba  f7fffffe          BL       storeRecord
;;;406                                    //把卡号上传到服务器
;;;407                                    SendDataToServer(0x06, 0, g_tReader.readerB.ID, 3);
0002be  2303              MOVS     r3,#3
0002c0  4a06              LDR      r2,|L4.732|
0002c2  3225              ADDS     r2,r2,#0x25
0002c4  2100              MOVS     r1,#0
0002c6  2006              MOVS     r0,#6
0002c8  f7fffffe          BL       SendDataToServer
                  |L4.716|
;;;408                                }
;;;409                            }
;;;410                        }                 
;;;411                        break;
0002cc  e000              B        |L4.720|
                  |L4.718|
;;;412                    
;;;413                    default:
;;;414                        break;
0002ce  bf00              NOP      
                  |L4.720|
0002d0  bf00              NOP                            ;349
                  |L4.722|
0002d2  e698              B        |L4.6|
;;;415                }//end of switch
;;;416            }//if
;;;417        }//end of while
;;;418    }
;;;419    
                          ENDP

                  |L4.724|
                          DCD      mailboxCardFirst
                  |L4.728|
                          DCD      rt_mbx_wait
                  |L4.732|
                          DCD      g_tReader
                  |L4.736|
                          DCD      g_tRunInfo
                  |L4.740|
                          DCD      g_tDoorStatus
                  |L4.744|
                          DCD      g_tParam+0x14
                  |L4.748|
                          DCD      rt_tmr_create
                  |L4.752|
                          DCD      OneTimerA
                  |L4.756|
                          DCD      OneTimerB

                          AREA ||i.AppTaskInterLock||, CODE, READONLY, ALIGN=2

                  AppTaskInterLock PROC
;;;544    //处理互锁的任务
;;;545    __task void AppTaskInterLock(void)
000000  b508              PUSH     {r3,lr}
;;;546    {
;;;547        uint8_t type;
;;;548        SingleReader_T *readerMsg;
;;;549        const uint16_t usMaxBlockTime = 100; /* 延迟周期 */
000002  bf00              NOP      
                  |L5.4|
;;;550        while(1)
000004  e116              B        |L5.564|
                  |L5.6|
;;;551        {
;;;552            if(os_mbx_wait(&mailboxCardInterLock, (void *)&readerMsg, usMaxBlockTime) != OS_R_TMO)
000006  2264              MOVS     r2,#0x64
000008  4669              MOV      r1,sp
00000a  488b              LDR      r0,|L5.568|
00000c  f8dfc22c          LDR      r12,|L5.572|
000010  df00              SVC      #0x0
000012  2801              CMP      r0,#1
000014  d0f6              BEQ      |L5.4|
;;;553            {
;;;554                switch(readerMsg->readerID)
000016  9800              LDR      r0,[sp,#0]
000018  7800              LDRB     r0,[r0,#0]
00001a  b110              CBZ      r0,|L5.34|
00001c  2801              CMP      r0,#1
00001e  d17d              BNE      |L5.284|
000020  e082              B        |L5.296|
                  |L5.34|
;;;555                {
;;;556                    case e_READER_A:
;;;557                        g_tReader.dataCheck(readerMsg);
000022  4887              LDR      r0,|L5.576|
000024  6c41              LDR      r1,[r0,#0x44]  ; g_tReader
000026  9800              LDR      r0,[sp,#0]
000028  4788              BLX      r1
;;;558                        type = searchID(readerMsg->ID);//searchID函数先读配置，再检测卡号有没有
00002a  9800              LDR      r0,[sp,#0]
00002c  1d00              ADDS     r0,r0,#4
00002e  f7fffffe          BL       searchID
000032  4604              MOV      r4,r0
;;;559                        //权限高的卡号处理
;;;560                        if(type == e_superCardID || type == e_superPasswordID)//超级卡或超级密码随便开
000034  2c01              CMP      r4,#1
000036  d001              BEQ      |L5.60|
000038  2c02              CMP      r4,#2
00003a  d121              BNE      |L5.128|
                  |L5.60|
;;;561                        {
;;;562                            if(g_tDoorStatus.doorA.switcherStatus == NC)
00003c  4881              LDR      r0,|L5.580|
00003e  7800              LDRB     r0,[r0,#0]  ; g_tDoorStatus
000040  b9f0              CBNZ     r0,|L5.128|
;;;563                            {
;;;564                                g_tDoorStatus.openDoor(&g_tParam.relation.relationA, e_READER_A);
000042  4880              LDR      r0,|L5.580|
000044  2100              MOVS     r1,#0
000046  6882              LDR      r2,[r0,#8]  ; g_tDoorStatus
000048  487f              LDR      r0,|L5.584|
00004a  4790              BLX      r2
;;;565                                OneTimerA = os_tmr_create(1000 * g_tParam.systemCfg.openTime, 1);
00004c  497e              LDR      r1,|L5.584|
00004e  3914              SUBS     r1,r1,#0x14
000050  f8911028          LDRB     r1,[r1,#0x28]  ; g_tParam
000054  f44f727a          MOV      r2,#0x3e8
000058  4351              MULS     r1,r2,r1
00005a  b288              UXTH     r0,r1
00005c  2101              MOVS     r1,#1
00005e  f8dfc1ec          LDR      r12,|L5.588|
000062  df00              SVC      #0x0
000064  497a              LDR      r1,|L5.592|
000066  6008              STR      r0,[r1,#0]  ; OneTimerA
;;;566                                
;;;567                                //存储记录到spi
;;;568                                storeRecord(readerMsg->ID, e_READER_A);
000068  2100              MOVS     r1,#0
00006a  9800              LDR      r0,[sp,#0]
00006c  1d00              ADDS     r0,r0,#4
00006e  f7fffffe          BL       storeRecord
;;;569                                //把卡号上传到服务器
;;;570                                SendDataToServer(0x06, e_READER_A, g_tReader.readerA.ID, 3);
000072  2303              MOVS     r3,#3
000074  4a72              LDR      r2,|L5.576|
000076  1d12              ADDS     r2,r2,#4
000078  2100              MOVS     r1,#0
00007a  2006              MOVS     r0,#6
00007c  f7fffffe          BL       SendDataToServer
                  |L5.128|
;;;571                            }
;;;572                        }
;;;573                        if(type == e_threatCardID || type == e_threatPasswordID)//胁迫卡和胁迫码
000080  2c03              CMP      r4,#3
000082  d001              BEQ      |L5.136|
000084  2c04              CMP      r4,#4
000086  d121              BNE      |L5.204|
                  |L5.136|
;;;574                        {
;;;575                            if(g_tDoorStatus.doorA.switcherStatus == NC)
000088  486e              LDR      r0,|L5.580|
00008a  7800              LDRB     r0,[r0,#0]  ; g_tDoorStatus
00008c  b9f0              CBNZ     r0,|L5.204|
;;;576                            {
;;;577                                g_tDoorStatus.openDoor(&g_tParam.relation.relationA, e_READER_A);
00008e  486d              LDR      r0,|L5.580|
000090  2100              MOVS     r1,#0
000092  6882              LDR      r2,[r0,#8]  ; g_tDoorStatus
000094  486c              LDR      r0,|L5.584|
000096  4790              BLX      r2
;;;578                                OneTimerA = os_tmr_create(1000 * g_tParam.systemCfg.openTime, 1);
000098  496b              LDR      r1,|L5.584|
00009a  3914              SUBS     r1,r1,#0x14
00009c  f8911028          LDRB     r1,[r1,#0x28]  ; g_tParam
0000a0  f44f727a          MOV      r2,#0x3e8
0000a4  4351              MULS     r1,r2,r1
0000a6  b288              UXTH     r0,r1
0000a8  2101              MOVS     r1,#1
0000aa  f8dfc1a0          LDR      r12,|L5.588|
0000ae  df00              SVC      #0x0
0000b0  4967              LDR      r1,|L5.592|
0000b2  6008              STR      r0,[r1,#0]  ; OneTimerA
;;;579                                
;;;580                                //存储记录到spi
;;;581                                storeRecord(readerMsg->ID, e_READER_A);
0000b4  2100              MOVS     r1,#0
0000b6  9800              LDR      r0,[sp,#0]
0000b8  1d00              ADDS     r0,r0,#4
0000ba  f7fffffe          BL       storeRecord
;;;582                                
;;;583                                SendDataToServer(0x22, e_READER_A, g_tReader.readerA.ID, 3);//上传报警消息
0000be  2303              MOVS     r3,#3
0000c0  4a5f              LDR      r2,|L5.576|
0000c2  1d12              ADDS     r2,r2,#4
0000c4  2100              MOVS     r1,#0
0000c6  2022              MOVS     r0,#0x22
0000c8  f7fffffe          BL       SendDataToServer
                  |L5.204|
;;;584                            }
;;;585                        }
;;;586                        //判断互锁条件
;;;587                        if(type==e_keyBoardID || type==e_generalCardID || type==e_fingerID)
0000cc  2c05              CMP      r4,#5
0000ce  d003              BEQ      |L5.216|
0000d0  2c07              CMP      r4,#7
0000d2  d001              BEQ      |L5.216|
0000d4  2c08              CMP      r4,#8
0000d6  d126              BNE      |L5.294|
                  |L5.216|
;;;588                        {
;;;589                            //开A门时，B门不能是打开的
;;;590                            if(g_tDoorStatus.doorA.switcherStatus == NC && g_tDoorStatus.doorB.switcherStatus == NC)
0000d8  485a              LDR      r0,|L5.580|
0000da  7800              LDRB     r0,[r0,#0]  ; g_tDoorStatus
0000dc  bb18              CBNZ     r0,|L5.294|
0000de  4859              LDR      r0,|L5.580|
0000e0  7880              LDRB     r0,[r0,#2]  ; g_tDoorStatus
0000e2  bb00              CBNZ     r0,|L5.294|
;;;591                            {
;;;592                                g_tDoorStatus.openDoor(&g_tParam.relation.relationA, e_READER_A);
0000e4  4857              LDR      r0,|L5.580|
0000e6  2100              MOVS     r1,#0
0000e8  6882              LDR      r2,[r0,#8]  ; g_tDoorStatus
0000ea  4857              LDR      r0,|L5.584|
0000ec  4790              BLX      r2
;;;593                                OneTimerA = os_tmr_create(1000 * g_tParam.systemCfg.openTime, 1);
0000ee  4956              LDR      r1,|L5.584|
0000f0  3914              SUBS     r1,r1,#0x14
0000f2  f8911028          LDRB     r1,[r1,#0x28]  ; g_tParam
0000f6  f44f727a          MOV      r2,#0x3e8
0000fa  4351              MULS     r1,r2,r1
0000fc  b288              UXTH     r0,r1
0000fe  2101              MOVS     r1,#1
000100  f8dfc148          LDR      r12,|L5.588|
000104  df00              SVC      #0x0
000106  4952              LDR      r1,|L5.592|
000108  6008              STR      r0,[r1,#0]  ; OneTimerA
;;;594                                
;;;595                                //存储记录到spi
;;;596                                storeRecord(readerMsg->ID, e_READER_A);
00010a  2100              MOVS     r1,#0
00010c  9800              LDR      r0,[sp,#0]
00010e  1d00              ADDS     r0,r0,#4
000110  f7fffffe          BL       storeRecord
;;;597                                //把卡号上传到服务器
;;;598                                SendDataToServer(0x06, 0, g_tReader.readerA.ID, 3);
000114  2303              MOVS     r3,#3
000116  4a4a              LDR      r2,|L5.576|
000118  1d12              ADDS     r2,r2,#4
00011a  e000              B        |L5.286|
                  |L5.284|
00011c  e088              B        |L5.560|
                  |L5.286|
00011e  2100              MOVS     r1,#0
000120  2006              MOVS     r0,#6
000122  f7fffffe          BL       SendDataToServer
                  |L5.294|
;;;599                            }
;;;600                        }
;;;601                        break;
000126  e084              B        |L5.562|
                  |L5.296|
;;;602                    
;;;603                    case e_READER_B:
;;;604                        g_tReader.dataCheck(readerMsg);
000128  4845              LDR      r0,|L5.576|
00012a  6c41              LDR      r1,[r0,#0x44]  ; g_tReader
00012c  9800              LDR      r0,[sp,#0]
00012e  4788              BLX      r1
;;;605                        type = searchID(readerMsg->ID);//searchID函数先读配置，再检测卡号有没有
000130  9800              LDR      r0,[sp,#0]
000132  1d00              ADDS     r0,r0,#4
000134  f7fffffe          BL       searchID
000138  4604              MOV      r4,r0
;;;606                        //权限高的卡号处理
;;;607                        if(type == e_superCardID || type == e_superPasswordID)//超级卡或超级密码随便开
00013a  2c01              CMP      r4,#1
00013c  d001              BEQ      |L5.322|
00013e  2c02              CMP      r4,#2
000140  d122              BNE      |L5.392|
                  |L5.322|
;;;608                        {
;;;609                            if(g_tDoorStatus.doorB.switcherStatus == NC)
000142  4840              LDR      r0,|L5.580|
000144  7880              LDRB     r0,[r0,#2]  ; g_tDoorStatus
000146  b9f8              CBNZ     r0,|L5.392|
;;;610                            { 
;;;611                                g_tDoorStatus.openDoor(&g_tParam.relation.relationB, e_READER_B);
000148  483e              LDR      r0,|L5.580|
00014a  2101              MOVS     r1,#1
00014c  6882              LDR      r2,[r0,#8]  ; g_tDoorStatus
00014e  483e              LDR      r0,|L5.584|
000150  1c80              ADDS     r0,r0,#2
000152  4790              BLX      r2
;;;612                                OneTimerB = os_tmr_create(1000 * g_tParam.systemCfg.openTime, 2);
000154  493c              LDR      r1,|L5.584|
000156  3914              SUBS     r1,r1,#0x14
000158  f8911028          LDRB     r1,[r1,#0x28]  ; g_tParam
00015c  f44f727a          MOV      r2,#0x3e8
000160  4351              MULS     r1,r2,r1
000162  b288              UXTH     r0,r1
000164  2102              MOVS     r1,#2
000166  f8dfc0e4          LDR      r12,|L5.588|
00016a  df00              SVC      #0x0
00016c  4939              LDR      r1,|L5.596|
00016e  6008              STR      r0,[r1,#0]  ; OneTimerB
;;;613                                //存储记录到spi
;;;614                                storeRecord(readerMsg->ID, e_READER_B);
000170  2101              MOVS     r1,#1
000172  9800              LDR      r0,[sp,#0]
000174  1d00              ADDS     r0,r0,#4
000176  f7fffffe          BL       storeRecord
;;;615                                //把卡号上传到服务器
;;;616                                SendDataToServer(0x06, e_READER_B, g_tReader.readerB.ID, 3);
00017a  2303              MOVS     r3,#3
00017c  4a30              LDR      r2,|L5.576|
00017e  3225              ADDS     r2,r2,#0x25
000180  2101              MOVS     r1,#1
000182  2006              MOVS     r0,#6
000184  f7fffffe          BL       SendDataToServer
                  |L5.392|
;;;617                            }
;;;618                        }
;;;619                        if(type == e_threatCardID || type == e_threatPasswordID)//胁迫卡和胁迫码
000188  2c03              CMP      r4,#3
00018a  d001              BEQ      |L5.400|
00018c  2c04              CMP      r4,#4
00018e  d122              BNE      |L5.470|
                  |L5.400|
;;;620                        {
;;;621                            if(g_tDoorStatus.doorB.switcherStatus == NC)
000190  482c              LDR      r0,|L5.580|
000192  7880              LDRB     r0,[r0,#2]  ; g_tDoorStatus
000194  b9f8              CBNZ     r0,|L5.470|
;;;622                            {
;;;623                                g_tDoorStatus.openDoor(&g_tParam.relation.relationB, e_READER_B);
000196  482b              LDR      r0,|L5.580|
000198  2101              MOVS     r1,#1
00019a  6882              LDR      r2,[r0,#8]  ; g_tDoorStatus
00019c  482a              LDR      r0,|L5.584|
00019e  1c80              ADDS     r0,r0,#2
0001a0  4790              BLX      r2
;;;624                                OneTimerA = os_tmr_create(1000 * g_tParam.systemCfg.openTime, 2);
0001a2  4929              LDR      r1,|L5.584|
0001a4  3914              SUBS     r1,r1,#0x14
0001a6  f8911028          LDRB     r1,[r1,#0x28]  ; g_tParam
0001aa  f44f727a          MOV      r2,#0x3e8
0001ae  4351              MULS     r1,r2,r1
0001b0  b288              UXTH     r0,r1
0001b2  2102              MOVS     r1,#2
0001b4  f8dfc094          LDR      r12,|L5.588|
0001b8  df00              SVC      #0x0
0001ba  4925              LDR      r1,|L5.592|
0001bc  6008              STR      r0,[r1,#0]  ; OneTimerA
;;;625                                
;;;626                                //存储记录到spi
;;;627                                storeRecord(readerMsg->ID, e_READER_B);
0001be  2101              MOVS     r1,#1
0001c0  9800              LDR      r0,[sp,#0]
0001c2  1d00              ADDS     r0,r0,#4
0001c4  f7fffffe          BL       storeRecord
;;;628                                
;;;629                                SendDataToServer(0x22, e_READER_B, g_tReader.readerB.ID, 3);//上传报警消息
0001c8  2303              MOVS     r3,#3
0001ca  4a1d              LDR      r2,|L5.576|
0001cc  3225              ADDS     r2,r2,#0x25
0001ce  2101              MOVS     r1,#1
0001d0  2022              MOVS     r0,#0x22
0001d2  f7fffffe          BL       SendDataToServer
                  |L5.470|
;;;630                            }
;;;631                        }
;;;632                        //判断互锁条件
;;;633                        if(type==e_keyBoardID || type==e_generalCardID || type==e_fingerID)
0001d6  2c05              CMP      r4,#5
0001d8  d003              BEQ      |L5.482|
0001da  2c07              CMP      r4,#7
0001dc  d001              BEQ      |L5.482|
0001de  2c08              CMP      r4,#8
0001e0  d125              BNE      |L5.558|
                  |L5.482|
;;;634                        {
;;;635                            //开B门时，B门不能是打开的
;;;636                            if(g_tDoorStatus.doorA.switcherStatus == NC && g_tDoorStatus.doorB.switcherStatus == NC)
0001e2  4818              LDR      r0,|L5.580|
0001e4  7800              LDRB     r0,[r0,#0]  ; g_tDoorStatus
0001e6  bb10              CBNZ     r0,|L5.558|
0001e8  4816              LDR      r0,|L5.580|
0001ea  7880              LDRB     r0,[r0,#2]  ; g_tDoorStatus
0001ec  b9f8              CBNZ     r0,|L5.558|
;;;637                            {
;;;638                                g_tDoorStatus.openDoor(&g_tParam.relation.relationB, e_READER_B);
0001ee  4815              LDR      r0,|L5.580|
0001f0  2101              MOVS     r1,#1
0001f2  6882              LDR      r2,[r0,#8]  ; g_tDoorStatus
0001f4  4814              LDR      r0,|L5.584|
0001f6  1c80              ADDS     r0,r0,#2
0001f8  4790              BLX      r2
;;;639                                OneTimerB = os_tmr_create(1000 * g_tParam.systemCfg.openTime, 2);
0001fa  4913              LDR      r1,|L5.584|
0001fc  3914              SUBS     r1,r1,#0x14
0001fe  f8911028          LDRB     r1,[r1,#0x28]  ; g_tParam
000202  f44f727a          MOV      r2,#0x3e8
000206  4351              MULS     r1,r2,r1
000208  b288              UXTH     r0,r1
00020a  2102              MOVS     r1,#2
00020c  f8dfc03c          LDR      r12,|L5.588|
000210  df00              SVC      #0x0
000212  4910              LDR      r1,|L5.596|
000214  6008              STR      r0,[r1,#0]  ; OneTimerB
;;;640                                
;;;641                                //存储记录到spi
;;;642                                storeRecord(readerMsg->ID, e_READER_B);
000216  2101              MOVS     r1,#1
000218  9800              LDR      r0,[sp,#0]
00021a  1d00              ADDS     r0,r0,#4
00021c  f7fffffe          BL       storeRecord
;;;643                                //把卡号上传到服务器
;;;644                                SendDataToServer(0x06, 0, g_tReader.readerB.ID, 3);
000220  2303              MOVS     r3,#3
000222  4a07              LDR      r2,|L5.576|
000224  3225              ADDS     r2,r2,#0x25
000226  2100              MOVS     r1,#0
000228  2006              MOVS     r0,#6
00022a  f7fffffe          BL       SendDataToServer
                  |L5.558|
;;;645                            } 
;;;646                        }                        
;;;647                        break;
00022e  e000              B        |L5.562|
                  |L5.560|
;;;648                    
;;;649                    default:
;;;650                        break;
000230  bf00              NOP      
                  |L5.562|
000232  bf00              NOP                            ;601
                  |L5.564|
000234  e6e7              B        |L5.6|
;;;651                }//end of switch
;;;652            }//if
;;;653        }//end of while
;;;654    }
;;;655    
                          ENDP

000236  0000              DCW      0x0000
                  |L5.568|
                          DCD      mailboxCardInterLock
                  |L5.572|
                          DCD      rt_mbx_wait
                  |L5.576|
                          DCD      g_tReader
                  |L5.580|
                          DCD      g_tDoorStatus
                  |L5.584|
                          DCD      g_tParam+0x14
                  |L5.588|
                          DCD      rt_tmr_create
                  |L5.592|
                          DCD      OneTimerA
                  |L5.596|
                          DCD      OneTimerB

                          AREA ||i.AppTaskKey||, CODE, READONLY, ALIGN=2

                  AppTaskKey PROC
;;;710    //按键和反馈的扫描任务
;;;711    __task void AppTaskKey(void)
000000  e07d              B        |L6.254|
                  |L6.2|
;;;712    {
;;;713        static uint16_t timesA, timesB;
;;;714        while(1)
;;;715        {
;;;716            
;;;717            DetectReader();//检测读头连接状态
000002  f7fffffe          BL       DetectReader
;;;718            g_tDoorStatus.readFeedBack();//读取门吸反馈
000006  493e              LDR      r1,|L6.256|
000008  6848              LDR      r0,[r1,#4]  ; g_tDoorStatus
00000a  4780              BLX      r0
;;;719            //如果门反馈是开的且继电器是关的，那么N秒后调用报警，直到状态对
;;;720            //根据检测到的读头状态来，可能有未连接的，只对已连上的报警
;;;721            if(g_tReader.readerA.status == 1)
00000c  483d              LDR      r0,|L6.260|
00000e  7840              LDRB     r0,[r0,#1]  ; g_tReader
000010  2801              CMP      r0,#1
000012  d135              BNE      |L6.128|
;;;722            {
;;;723                if(g_tDoorStatus.doorA.feedBackStatus == NO && g_tDoorStatus.doorA.switcherStatus == NC)
000014  483a              LDR      r0,|L6.256|
000016  7840              LDRB     r0,[r0,#1]  ; g_tDoorStatus
000018  2801              CMP      r0,#1
00001a  d12e              BNE      |L6.122|
00001c  4838              LDR      r0,|L6.256|
00001e  7800              LDRB     r0,[r0,#0]  ; g_tDoorStatus
000020  bb58              CBNZ     r0,|L6.122|
;;;724                {
;;;725                    timesA++;
000022  4839              LDR      r0,|L6.264|
000024  8800              LDRH     r0,[r0,#0]  ; timesA
000026  1c40              ADDS     r0,r0,#1
000028  4937              LDR      r1,|L6.264|
00002a  8008              STRH     r0,[r1,#0]
;;;726                    //TODO:如果waitTime配成0，则不报警
;;;727                    if((g_tParam.systemCfg.waitTime!=0) && (timesA >= g_tParam.systemCfg.waitTime*10))
00002c  4837              LDR      r0,|L6.268|
00002e  f8900029          LDRB     r0,[r0,#0x29]
000032  b308              CBZ      r0,|L6.120|
000034  4835              LDR      r0,|L6.268|
000036  f8900029          LDRB     r0,[r0,#0x29]
00003a  eb000080          ADD      r0,r0,r0,LSL #2
00003e  8809              LDRH     r1,[r1,#0]  ; timesA
000040  ebb10f40          CMP      r1,r0,LSL #1
000044  db1c              BLT      |L6.128|
;;;728                    {
;;;729                        if(timesA == g_tParam.systemCfg.waitTime*10*25)
000046  4831              LDR      r0,|L6.268|
000048  f8900029          LDRB     r0,[r0,#0x29]
00004c  eb000080          ADD      r0,r0,r0,LSL #2
000050  0040              LSLS     r0,r0,#1
000052  eb0001c0          ADD      r1,r0,r0,LSL #3
000056  eb011000          ADD      r0,r1,r0,LSL #4
00005a  492b              LDR      r1,|L6.264|
00005c  8809              LDRH     r1,[r1,#0]  ; timesA
00005e  4288              CMP      r0,r1
000060  d107              BNE      |L6.114|
;;;730                        {
;;;731                            timesA = g_tParam.systemCfg.waitTime*10;//避免times溢出
000062  482a              LDR      r0,|L6.268|
000064  f8900029          LDRB     r0,[r0,#0x29]
000068  eb000080          ADD      r0,r0,r0,LSL #2
00006c  0040              LSLS     r0,r0,#1
00006e  4926              LDR      r1,|L6.264|
000070  8008              STRH     r0,[r1,#0]
                  |L6.114|
;;;732                        }
;;;733                        //alram报警，os_dly和翻转
;;;734                        //利用读头上的蜂鸣器和led
;;;735                        ReaderAlarm(e_READER_A);
000072  2000              MOVS     r0,#0
000074  f7fffffe          BL       ReaderAlarm
                  |L6.120|
000078  e002              B        |L6.128|
                  |L6.122|
;;;736                    }
;;;737                }
;;;738                else 
;;;739                {
;;;740                    timesA = 0;
00007a  2000              MOVS     r0,#0
00007c  4922              LDR      r1,|L6.264|
00007e  8008              STRH     r0,[r1,#0]
                  |L6.128|
;;;741                }
;;;742            }
;;;743            
;;;744            if(g_tReader.readerB.status == 1)
000080  4820              LDR      r0,|L6.260|
000082  f8900022          LDRB     r0,[r0,#0x22]
000086  2801              CMP      r0,#1
000088  d135              BNE      |L6.246|
;;;745            {
;;;746                if(g_tDoorStatus.doorB.feedBackStatus == NO && g_tDoorStatus.doorB.switcherStatus == NC)
00008a  481d              LDR      r0,|L6.256|
00008c  78c0              LDRB     r0,[r0,#3]
00008e  2801              CMP      r0,#1
000090  d12e              BNE      |L6.240|
000092  481b              LDR      r0,|L6.256|
000094  7880              LDRB     r0,[r0,#2]  ; g_tDoorStatus
000096  bb58              CBNZ     r0,|L6.240|
;;;747                {
;;;748                    timesB++;
000098  481d              LDR      r0,|L6.272|
00009a  8800              LDRH     r0,[r0,#0]  ; timesB
00009c  1c40              ADDS     r0,r0,#1
00009e  491c              LDR      r1,|L6.272|
0000a0  8008              STRH     r0,[r1,#0]
;;;749                    if((g_tParam.systemCfg.waitTime!=0) && (timesB >= g_tParam.systemCfg.waitTime*10))
0000a2  481a              LDR      r0,|L6.268|
0000a4  f8900029          LDRB     r0,[r0,#0x29]
0000a8  b308              CBZ      r0,|L6.238|
0000aa  4818              LDR      r0,|L6.268|
0000ac  f8900029          LDRB     r0,[r0,#0x29]
0000b0  eb000080          ADD      r0,r0,r0,LSL #2
0000b4  8809              LDRH     r1,[r1,#0]  ; timesB
0000b6  ebb10f40          CMP      r1,r0,LSL #1
0000ba  db1c              BLT      |L6.246|
;;;750                    {
;;;751                        if(timesB == g_tParam.systemCfg.waitTime*10*25)
0000bc  4813              LDR      r0,|L6.268|
0000be  f8900029          LDRB     r0,[r0,#0x29]
0000c2  eb000080          ADD      r0,r0,r0,LSL #2
0000c6  0040              LSLS     r0,r0,#1
0000c8  eb0001c0          ADD      r1,r0,r0,LSL #3
0000cc  eb011000          ADD      r0,r1,r0,LSL #4
0000d0  490f              LDR      r1,|L6.272|
0000d2  8809              LDRH     r1,[r1,#0]  ; timesB
0000d4  4288              CMP      r0,r1
0000d6  d107              BNE      |L6.232|
;;;752                        {
;;;753                            timesB = g_tParam.systemCfg.waitTime*10;//避免times溢出
0000d8  480c              LDR      r0,|L6.268|
0000da  f8900029          LDRB     r0,[r0,#0x29]
0000de  eb000080          ADD      r0,r0,r0,LSL #2
0000e2  0040              LSLS     r0,r0,#1
0000e4  490a              LDR      r1,|L6.272|
0000e6  8008              STRH     r0,[r1,#0]
                  |L6.232|
;;;754                        }
;;;755                        //alram报警，os_dly和翻转
;;;756                        //利用读头上的蜂鸣器和led
;;;757                        ReaderAlarm(e_READER_B);
0000e8  2001              MOVS     r0,#1
0000ea  f7fffffe          BL       ReaderAlarm
                  |L6.238|
0000ee  e002              B        |L6.246|
                  |L6.240|
;;;758                    }
;;;759                }
;;;760                else 
;;;761                {
;;;762                    timesB = 0;
0000f0  2000              MOVS     r0,#0
0000f2  4907              LDR      r1,|L6.272|
0000f4  8008              STRH     r0,[r1,#0]
                  |L6.246|
;;;763                }
;;;764            }
;;;765            
;;;766            os_dly_wait(100);
0000f6  2064              MOVS     r0,#0x64
0000f8  f8dfc018          LDR      r12,|L6.276|
0000fc  df00              SVC      #0x0
                  |L6.254|
0000fe  e780              B        |L6.2|
;;;767            
;;;768        }//end of while
;;;769               
;;;770    }
;;;771    
                          ENDP

                  |L6.256|
                          DCD      g_tDoorStatus
                  |L6.260|
                          DCD      g_tReader
                  |L6.264|
                          DCD      timesA
                  |L6.268|
                          DCD      g_tParam
                  |L6.272|
                          DCD      timesB
                  |L6.276|
                          DCD      rt_dly_wait

                          AREA ||i.AppTaskMulti||, CODE, READONLY, ALIGN=2

                  AppTaskMulti PROC
;;;420    //处理多重卡的任务
;;;421    __task void AppTaskMulti(void)
000000  b508              PUSH     {r3,lr}
;;;422    {
;;;423        uint8_t type;
;;;424        SingleReader_T *readerMsg;
;;;425        const uint16_t usMaxBlockTime = 100; /* 延迟周期 */
000002  bf00              NOP      
                  |L7.4|
;;;426        while(1)
000004  e12a              B        |L7.604|
                  |L7.6|
;;;427        {
;;;428            if(os_mbx_wait(&mailboxCardMulti, (void *)&readerMsg, usMaxBlockTime) != OS_R_TMO)
000006  2264              MOVS     r2,#0x64
000008  4669              MOV      r1,sp
00000a  4895              LDR      r0,|L7.608|
00000c  f8dfc254          LDR      r12,|L7.612|
000010  df00              SVC      #0x0
000012  2801              CMP      r0,#1
000014  d0f6              BEQ      |L7.4|
;;;429            {
;;;430                switch(readerMsg->readerID)
000016  9800              LDR      r0,[sp,#0]
000018  7800              LDRB     r0,[r0,#0]
00001a  b110              CBZ      r0,|L7.34|
00001c  2801              CMP      r0,#1
00001e  d17d              BNE      |L7.284|
000020  e08c              B        |L7.316|
                  |L7.34|
;;;431                {
;;;432                    case e_READER_A:
;;;433                        g_tReader.dataCheck(readerMsg);
000022  4891              LDR      r0,|L7.616|
000024  6c41              LDR      r1,[r0,#0x44]  ; g_tReader
000026  9800              LDR      r0,[sp,#0]
000028  4788              BLX      r1
;;;434                        type = searchID(readerMsg->ID);//searchID函数先读配置，再检测卡号有没有
00002a  9800              LDR      r0,[sp,#0]
00002c  1d00              ADDS     r0,r0,#4
00002e  f7fffffe          BL       searchID
000032  4604              MOV      r4,r0
;;;435                        if(type == e_multipleCardID)//首卡
000034  2c06              CMP      r4,#6
000036  d104              BNE      |L7.66|
;;;436                        {
;;;437                            //TODO:不能直接累加计数
;;;438                            g_tRunInfo.multipleCardStatus++;//卡已刷，累加计数
000038  488c              LDR      r0,|L7.620|
00003a  8880              LDRH     r0,[r0,#4]  ; g_tRunInfo
00003c  1c40              ADDS     r0,r0,#1
00003e  498b              LDR      r1,|L7.620|
000040  8088              STRH     r0,[r1,#4]
                  |L7.66|
;;;439                        }
;;;440                        //权限高的卡号处理
;;;441                        if(type == e_superCardID || type == e_superPasswordID)//超级卡或超级密码随便开
000042  2c01              CMP      r4,#1
000044  d001              BEQ      |L7.74|
000046  2c02              CMP      r4,#2
000048  d121              BNE      |L7.142|
                  |L7.74|
;;;442                        {
;;;443                            if(g_tDoorStatus.doorA.switcherStatus == NC)
00004a  4889              LDR      r0,|L7.624|
00004c  7800              LDRB     r0,[r0,#0]  ; g_tDoorStatus
00004e  b9f0              CBNZ     r0,|L7.142|
;;;444                            {
;;;445                                g_tDoorStatus.openDoor(&g_tParam.relation.relationA, e_READER_A);
000050  4887              LDR      r0,|L7.624|
000052  2100              MOVS     r1,#0
000054  6882              LDR      r2,[r0,#8]  ; g_tDoorStatus
000056  4887              LDR      r0,|L7.628|
000058  4790              BLX      r2
;;;446                                OneTimerA = os_tmr_create(1000 * g_tParam.systemCfg.openTime, 1);
00005a  4986              LDR      r1,|L7.628|
00005c  3914              SUBS     r1,r1,#0x14
00005e  f8911028          LDRB     r1,[r1,#0x28]  ; g_tParam
000062  f44f727a          MOV      r2,#0x3e8
000066  4351              MULS     r1,r2,r1
000068  b288              UXTH     r0,r1
00006a  2101              MOVS     r1,#1
00006c  f8dfc208          LDR      r12,|L7.632|
000070  df00              SVC      #0x0
000072  4982              LDR      r1,|L7.636|
000074  6008              STR      r0,[r1,#0]  ; OneTimerA
;;;447                                
;;;448                                //存储记录到spi
;;;449                                storeRecord(readerMsg->ID, e_READER_A);
000076  2100              MOVS     r1,#0
000078  9800              LDR      r0,[sp,#0]
00007a  1d00              ADDS     r0,r0,#4
00007c  f7fffffe          BL       storeRecord
;;;450                                //把卡号上传到服务器
;;;451                                SendDataToServer(0x06, e_READER_A, g_tReader.readerA.ID, 3);
000080  2303              MOVS     r3,#3
000082  4a79              LDR      r2,|L7.616|
000084  1d12              ADDS     r2,r2,#4
000086  2100              MOVS     r1,#0
000088  2006              MOVS     r0,#6
00008a  f7fffffe          BL       SendDataToServer
                  |L7.142|
;;;452                            }
;;;453                        }
;;;454                        if(type == e_threatCardID || type == e_threatPasswordID)//胁迫卡和胁迫码
00008e  2c03              CMP      r4,#3
000090  d001              BEQ      |L7.150|
000092  2c04              CMP      r4,#4
000094  d121              BNE      |L7.218|
                  |L7.150|
;;;455                        {
;;;456                            if(g_tDoorStatus.doorA.switcherStatus == NC)
000096  4876              LDR      r0,|L7.624|
000098  7800              LDRB     r0,[r0,#0]  ; g_tDoorStatus
00009a  b9f0              CBNZ     r0,|L7.218|
;;;457                            {
;;;458                                g_tDoorStatus.openDoor(&g_tParam.relation.relationA, e_READER_A);
00009c  4874              LDR      r0,|L7.624|
00009e  2100              MOVS     r1,#0
0000a0  6882              LDR      r2,[r0,#8]  ; g_tDoorStatus
0000a2  4874              LDR      r0,|L7.628|
0000a4  4790              BLX      r2
;;;459                                OneTimerA = os_tmr_create(1000 * g_tParam.systemCfg.openTime, 1);
0000a6  4973              LDR      r1,|L7.628|
0000a8  3914              SUBS     r1,r1,#0x14
0000aa  f8911028          LDRB     r1,[r1,#0x28]  ; g_tParam
0000ae  f44f727a          MOV      r2,#0x3e8
0000b2  4351              MULS     r1,r2,r1
0000b4  b288              UXTH     r0,r1
0000b6  2101              MOVS     r1,#1
0000b8  f8dfc1bc          LDR      r12,|L7.632|
0000bc  df00              SVC      #0x0
0000be  496f              LDR      r1,|L7.636|
0000c0  6008              STR      r0,[r1,#0]  ; OneTimerA
;;;460                                
;;;461                                //存储记录到spi
;;;462                                storeRecord(readerMsg->ID, e_READER_A);
0000c2  2100              MOVS     r1,#0
0000c4  9800              LDR      r0,[sp,#0]
0000c6  1d00              ADDS     r0,r0,#4
0000c8  f7fffffe          BL       storeRecord
;;;463                                
;;;464                                SendDataToServer(0x22, e_READER_A, g_tReader.readerA.ID, 3);//上传报警消息
0000cc  2303              MOVS     r3,#3
0000ce  4a66              LDR      r2,|L7.616|
0000d0  1d12              ADDS     r2,r2,#4
0000d2  2100              MOVS     r1,#0
0000d4  2022              MOVS     r0,#0x22
0000d6  f7fffffe          BL       SendDataToServer
                  |L7.218|
;;;465                            }
;;;466                        }
;;;467                        //符合多重卡条件
;;;468                        if(g_tRunInfo.multipleCardStatus == (g_tParam.systemCfg.multipleOpenCfg[2]>>4))
0000da  4864              LDR      r0,|L7.620|
0000dc  8881              LDRH     r1,[r0,#4]  ; g_tRunInfo
0000de  4865              LDR      r0,|L7.628|
0000e0  3814              SUBS     r0,r0,#0x14
0000e2  f890002c          LDRB     r0,[r0,#0x2c]
0000e6  ebb11f20          CMP      r1,r0,ASR #4
0000ea  d126              BNE      |L7.314|
;;;469                        {
;;;470                            
;;;471                            if(g_tDoorStatus.doorA.switcherStatus == NC)
0000ec  4860              LDR      r0,|L7.624|
0000ee  7800              LDRB     r0,[r0,#0]  ; g_tDoorStatus
0000f0  bb00              CBNZ     r0,|L7.308|
;;;472                            {
;;;473                                g_tDoorStatus.openDoor(&g_tParam.relation.relationA, e_READER_A);
0000f2  485f              LDR      r0,|L7.624|
0000f4  2100              MOVS     r1,#0
0000f6  6882              LDR      r2,[r0,#8]  ; g_tDoorStatus
0000f8  485e              LDR      r0,|L7.628|
0000fa  4790              BLX      r2
;;;474                                OneTimerA = os_tmr_create(1000 * g_tParam.systemCfg.openTime, 1);
0000fc  495d              LDR      r1,|L7.628|
0000fe  3914              SUBS     r1,r1,#0x14
000100  f8911028          LDRB     r1,[r1,#0x28]  ; g_tParam
000104  f44f727a          MOV      r2,#0x3e8
000108  4351              MULS     r1,r2,r1
00010a  b288              UXTH     r0,r1
00010c  2101              MOVS     r1,#1
00010e  f8dfc168          LDR      r12,|L7.632|
000112  df00              SVC      #0x0
000114  4959              LDR      r1,|L7.636|
000116  6008              STR      r0,[r1,#0]  ; OneTimerA
;;;475                                
;;;476                                //存储记录到spi
;;;477                                storeRecord(readerMsg->ID, e_READER_A);
000118  2100              MOVS     r1,#0
00011a  e000              B        |L7.286|
                  |L7.284|
00011c  e09c              B        |L7.600|
                  |L7.286|
00011e  9800              LDR      r0,[sp,#0]
000120  1d00              ADDS     r0,r0,#4
000122  f7fffffe          BL       storeRecord
;;;478                                //把卡号上传到服务器
;;;479                                SendDataToServer(0x06, 0, g_tReader.readerA.ID, 3);      
000126  2303              MOVS     r3,#3
000128  4a4f              LDR      r2,|L7.616|
00012a  1d12              ADDS     r2,r2,#4
00012c  2100              MOVS     r1,#0
00012e  2006              MOVS     r0,#6
000130  f7fffffe          BL       SendDataToServer
                  |L7.308|
;;;480                            }
;;;481                            g_tRunInfo.multipleCardStatus = 0;//开门后复位状态
000134  2000              MOVS     r0,#0
000136  494d              LDR      r1,|L7.620|
000138  8088              STRH     r0,[r1,#4]
                  |L7.314|
;;;482                        }                 
;;;483                        break;
00013a  e08e              B        |L7.602|
                  |L7.316|
;;;484                    
;;;485                    case e_READER_B:
;;;486                        g_tReader.dataCheck(readerMsg);
00013c  484a              LDR      r0,|L7.616|
00013e  6c41              LDR      r1,[r0,#0x44]  ; g_tReader
000140  9800              LDR      r0,[sp,#0]
000142  4788              BLX      r1
;;;487                        type = searchID(readerMsg->ID);//searchID函数先读配置，再检测卡号有没有
000144  9800              LDR      r0,[sp,#0]
000146  1d00              ADDS     r0,r0,#4
000148  f7fffffe          BL       searchID
00014c  4604              MOV      r4,r0
;;;488                        if(type == e_multipleCardID)//首卡
00014e  2c06              CMP      r4,#6
000150  d104              BNE      |L7.348|
;;;489                        {
;;;490                            g_tRunInfo.multipleCardStatus++;//卡已刷，累加计数
000152  4846              LDR      r0,|L7.620|
000154  8880              LDRH     r0,[r0,#4]  ; g_tRunInfo
000156  1c40              ADDS     r0,r0,#1
000158  4944              LDR      r1,|L7.620|
00015a  8088              STRH     r0,[r1,#4]
                  |L7.348|
;;;491                        }
;;;492                        //权限高的卡号处理
;;;493                        if(type == e_superCardID || type == e_superPasswordID)//超级卡或超级密码随便开
00015c  2c01              CMP      r4,#1
00015e  d001              BEQ      |L7.356|
000160  2c02              CMP      r4,#2
000162  d122              BNE      |L7.426|
                  |L7.356|
;;;494                        {
;;;495                            if(g_tDoorStatus.doorB.switcherStatus == NC)
000164  4842              LDR      r0,|L7.624|
000166  7880              LDRB     r0,[r0,#2]  ; g_tDoorStatus
000168  b9f8              CBNZ     r0,|L7.426|
;;;496                            { 
;;;497                                g_tDoorStatus.openDoor(&g_tParam.relation.relationB, e_READER_B);
00016a  4841              LDR      r0,|L7.624|
00016c  2101              MOVS     r1,#1
00016e  6882              LDR      r2,[r0,#8]  ; g_tDoorStatus
000170  4840              LDR      r0,|L7.628|
000172  1c80              ADDS     r0,r0,#2
000174  4790              BLX      r2
;;;498                                OneTimerB = os_tmr_create(1000 * g_tParam.systemCfg.openTime, 2);
000176  493f              LDR      r1,|L7.628|
000178  3914              SUBS     r1,r1,#0x14
00017a  f8911028          LDRB     r1,[r1,#0x28]  ; g_tParam
00017e  f44f727a          MOV      r2,#0x3e8
000182  4351              MULS     r1,r2,r1
000184  b288              UXTH     r0,r1
000186  2102              MOVS     r1,#2
000188  f8dfc0ec          LDR      r12,|L7.632|
00018c  df00              SVC      #0x0
00018e  493c              LDR      r1,|L7.640|
000190  6008              STR      r0,[r1,#0]  ; OneTimerB
;;;499                                //存储记录到spi
;;;500                                storeRecord(readerMsg->ID, e_READER_B);
000192  2101              MOVS     r1,#1
000194  9800              LDR      r0,[sp,#0]
000196  1d00              ADDS     r0,r0,#4
000198  f7fffffe          BL       storeRecord
;;;501                                //把卡号上传到服务器
;;;502                                SendDataToServer(0x06, e_READER_B, g_tReader.readerB.ID, 3);
00019c  2303              MOVS     r3,#3
00019e  4a32              LDR      r2,|L7.616|
0001a0  3225              ADDS     r2,r2,#0x25
0001a2  2101              MOVS     r1,#1
0001a4  2006              MOVS     r0,#6
0001a6  f7fffffe          BL       SendDataToServer
                  |L7.426|
;;;503                            }
;;;504                        }
;;;505                        if(type == e_threatCardID || type == e_threatPasswordID)//胁迫卡和胁迫码
0001aa  2c03              CMP      r4,#3
0001ac  d001              BEQ      |L7.434|
0001ae  2c04              CMP      r4,#4
0001b0  d122              BNE      |L7.504|
                  |L7.434|
;;;506                        {
;;;507                            if(g_tDoorStatus.doorB.switcherStatus == NC)
0001b2  482f              LDR      r0,|L7.624|
0001b4  7880              LDRB     r0,[r0,#2]  ; g_tDoorStatus
0001b6  b9f8              CBNZ     r0,|L7.504|
;;;508                            {
;;;509                                g_tDoorStatus.openDoor(&g_tParam.relation.relationB, e_READER_B);
0001b8  482d              LDR      r0,|L7.624|
0001ba  2101              MOVS     r1,#1
0001bc  6882              LDR      r2,[r0,#8]  ; g_tDoorStatus
0001be  482d              LDR      r0,|L7.628|
0001c0  1c80              ADDS     r0,r0,#2
0001c2  4790              BLX      r2
;;;510                                OneTimerA = os_tmr_create(1000 * g_tParam.systemCfg.openTime, 2);
0001c4  492b              LDR      r1,|L7.628|
0001c6  3914              SUBS     r1,r1,#0x14
0001c8  f8911028          LDRB     r1,[r1,#0x28]  ; g_tParam
0001cc  f44f727a          MOV      r2,#0x3e8
0001d0  4351              MULS     r1,r2,r1
0001d2  b288              UXTH     r0,r1
0001d4  2102              MOVS     r1,#2
0001d6  f8dfc0a0          LDR      r12,|L7.632|
0001da  df00              SVC      #0x0
0001dc  4927              LDR      r1,|L7.636|
0001de  6008              STR      r0,[r1,#0]  ; OneTimerA
;;;511                                
;;;512                                //存储记录到spi
;;;513                                storeRecord(readerMsg->ID, e_READER_B);
0001e0  2101              MOVS     r1,#1
0001e2  9800              LDR      r0,[sp,#0]
0001e4  1d00              ADDS     r0,r0,#4
0001e6  f7fffffe          BL       storeRecord
;;;514                                
;;;515                                SendDataToServer(0x22, e_READER_B, g_tReader.readerB.ID, 3);//上传报警消息
0001ea  2303              MOVS     r3,#3
0001ec  4a1e              LDR      r2,|L7.616|
0001ee  3225              ADDS     r2,r2,#0x25
0001f0  2101              MOVS     r1,#1
0001f2  2022              MOVS     r0,#0x22
0001f4  f7fffffe          BL       SendDataToServer
                  |L7.504|
;;;516                            }
;;;517                        }
;;;518                        //符合多重卡条件
;;;519                        if(g_tRunInfo.multipleCardStatus == (g_tParam.systemCfg.multipleOpenCfg[2]>>4))
0001f8  481c              LDR      r0,|L7.620|
0001fa  8881              LDRH     r1,[r0,#4]  ; g_tRunInfo
0001fc  481d              LDR      r0,|L7.628|
0001fe  3814              SUBS     r0,r0,#0x14
000200  f890002c          LDRB     r0,[r0,#0x2c]
000204  ebb11f20          CMP      r1,r0,ASR #4
000208  d125              BNE      |L7.598|
;;;520                        {
;;;521                            
;;;522                            if(g_tDoorStatus.doorB.switcherStatus == NC)
00020a  4819              LDR      r0,|L7.624|
00020c  7880              LDRB     r0,[r0,#2]  ; g_tDoorStatus
00020e  b9f8              CBNZ     r0,|L7.592|
;;;523                            {
;;;524                                g_tDoorStatus.openDoor(&g_tParam.relation.relationB, e_READER_B);
000210  4817              LDR      r0,|L7.624|
000212  2101              MOVS     r1,#1
000214  6882              LDR      r2,[r0,#8]  ; g_tDoorStatus
000216  4817              LDR      r0,|L7.628|
000218  1c80              ADDS     r0,r0,#2
00021a  4790              BLX      r2
;;;525                                OneTimerB = os_tmr_create(1000 * g_tParam.systemCfg.openTime, 2);
00021c  4915              LDR      r1,|L7.628|
00021e  3914              SUBS     r1,r1,#0x14
000220  f8911028          LDRB     r1,[r1,#0x28]  ; g_tParam
000224  f44f727a          MOV      r2,#0x3e8
000228  4351              MULS     r1,r2,r1
00022a  b288              UXTH     r0,r1
00022c  2102              MOVS     r1,#2
00022e  f8dfc048          LDR      r12,|L7.632|
000232  df00              SVC      #0x0
000234  4912              LDR      r1,|L7.640|
000236  6008              STR      r0,[r1,#0]  ; OneTimerB
;;;526                                
;;;527                                //存储记录到spi
;;;528                                storeRecord(readerMsg->ID, e_READER_B);
000238  2101              MOVS     r1,#1
00023a  9800              LDR      r0,[sp,#0]
00023c  1d00              ADDS     r0,r0,#4
00023e  f7fffffe          BL       storeRecord
;;;529                                //把卡号上传到服务器
;;;530                                SendDataToServer(0x06, 0, g_tReader.readerB.ID, 3);
000242  2303              MOVS     r3,#3
000244  4a08              LDR      r2,|L7.616|
000246  3225              ADDS     r2,r2,#0x25
000248  2100              MOVS     r1,#0
00024a  2006              MOVS     r0,#6
00024c  f7fffffe          BL       SendDataToServer
                  |L7.592|
;;;531                            }
;;;532                            g_tRunInfo.multipleCardStatus = 0;//开门后复位状态
000250  2000              MOVS     r0,#0
000252  4906              LDR      r1,|L7.620|
000254  8088              STRH     r0,[r1,#4]
                  |L7.598|
;;;533                        }
;;;534                        break;
000256  e000              B        |L7.602|
                  |L7.600|
;;;535                    
;;;536                    default:
;;;537                        break;
000258  bf00              NOP      
                  |L7.602|
00025a  bf00              NOP                            ;483
                  |L7.604|
00025c  e6d3              B        |L7.6|
;;;538                }//end of switch
;;;539            }//if
;;;540        }//end of while
;;;541    }
;;;542    
                          ENDP

00025e  0000              DCW      0x0000
                  |L7.608|
                          DCD      mailboxCardMulti
                  |L7.612|
                          DCD      rt_mbx_wait
                  |L7.616|
                          DCD      g_tReader
                  |L7.620|
                          DCD      g_tRunInfo
                  |L7.624|
                          DCD      g_tDoorStatus
                  |L7.628|
                          DCD      g_tParam+0x14
                  |L7.632|
                          DCD      rt_tmr_create
                  |L7.636|
                          DCD      OneTimerA
                  |L7.640|
                          DCD      OneTimerB

                          AREA ||i.AppTaskNet||, CODE, READONLY, ALIGN=2

                  AppTaskNet PROC
;;;777    */
;;;778    __task void AppTaskNet(void)
000000  b508              PUSH     {r3,lr}
;;;779    {
;;;780        static uint16_t n;
;;;781        static uint8_t data;
;;;782        static const uint8_t netDelayTime = 50;//网络任务每50ms一次
;;;783        
;;;784        static uint16_t heartNum = (HEART_TIME*1000)/netDelayTime;//心跳包延时次数
;;;785        
;;;786        
;;;787        
;;;788        while(1)
000002  e074              B        |L8.238|
                  |L8.4|
;;;789        {
;;;790            
;;;791            KEY_Scan();//按键检测
000004  f7fffffe          BL       KEY_Scan
;;;792            //读取网络状态
;;;793            wiz_read_buf(PHYCFGR, &data, 1);//读取phy，判断网线是否插好
000008  2201              MOVS     r2,#1
00000a  4939              LDR      r1,|L8.240|
00000c  f44f5038          MOV      r0,#0x2e00
000010  f7fffffe          BL       wiz_read_buf
;;;794            if(data & 0x01 == 1)
000014  4836              LDR      r0,|L8.240|
000016  7800              LDRB     r0,[r0,#0]  ; data
000018  f0100f01          TST      r0,#1
00001c  d003              BEQ      |L8.38|
;;;795            {
;;;796                g_tNetData.status = e_Link;//网线插好了
00001e  2004              MOVS     r0,#4
000020  4934              LDR      r1,|L8.244|
000022  7008              STRB     r0,[r1,#0]
000024  e002              B        |L8.44|
                  |L8.38|
;;;797    
;;;798            }
;;;799            else g_tNetData.status = e_NoLink;//网线没插好
000026  2005              MOVS     r0,#5
000028  4932              LDR      r1,|L8.244|
00002a  7008              STRB     r0,[r1,#0]
                  |L8.44|
;;;800            
;;;801            if(g_tNetData.status == e_Link)
00002c  4831              LDR      r0,|L8.244|
00002e  7800              LDRB     r0,[r0,#0]  ; g_tNetData
000030  2804              CMP      r0,#4
000032  d158              BNE      |L8.230|
;;;802            {
;;;803                /*Socket状态机，MCU通过读Sn_SR(0)的值进行判断Socket应该处于何种状态*/
;;;804                switch(getSn_SR(0))	// 获取socket0的状态
000034  2000              MOVS     r0,#0
000036  f7fffffe          BL       getSn_SR
00003a  b378              CBZ      r0,|L8.156|
00003c  2822              CMP      r0,#0x22
00003e  d137              BNE      |L8.176|
;;;805                {
;;;806                case SOCK_UDP:		// Socket处于初始化完成(打开)状态
;;;807                    if(getSn_IR(0) & Sn_IR_RECV)
000040  2000              MOVS     r0,#0
000042  f7fffffe          BL       getSn_IR
000046  f0100f04          TST      r0,#4
00004a  d003              BEQ      |L8.84|
;;;808                    {
;;;809                        setSn_IR(0, Sn_IR_RECV);// Sn_IR的RECV位置1
00004c  2104              MOVS     r1,#4
00004e  2000              MOVS     r0,#0
000050  f7fffffe          BL       setSn_IR
                  |L8.84|
;;;810                    }
;;;811                    //数据接收
;;;812                    g_tNetData.len = getSn_RX_RSR(0);
000054  2000              MOVS     r0,#0
000056  f7fffffe          BL       getSn_RX_RSR
00005a  4926              LDR      r1,|L8.244|
00005c  8048              STRH     r0,[r1,#2]
;;;813                    if((g_tNetData.len>0) && (g_tNetData.len <= (DATA_LEN+13+8)))
00005e  4608              MOV      r0,r1
000060  8840              LDRH     r0,[r0,#2]  ; g_tNetData
000062  2800              CMP      r0,#0
000064  dd19              BLE      |L8.154|
000066  4608              MOV      r0,r1
000068  8840              LDRH     r0,[r0,#2]  ; g_tNetData
00006a  f2404115          MOV      r1,#0x415
00006e  4288              CMP      r0,r1
000070  dc13              BGT      |L8.154|
;;;814                    { 
;;;815                        g_tNetData.len -= 8;//去除8字节长度的ip头信息
000072  4820              LDR      r0,|L8.244|
000074  8840              LDRH     r0,[r0,#2]  ; g_tNetData
000076  3808              SUBS     r0,r0,#8
000078  491e              LDR      r1,|L8.244|
00007a  8048              STRH     r0,[r1,#2]
;;;816                        // W5500接收来自远程上位机的数据，并通过SPI发送给MCU
;;;817                        recvfrom(0, g_tNetData.buf, g_tNetData.len, g_tParam.netCfg.server_ip ,&g_tParam.netCfg.server_port);
00007c  481e              LDR      r0,|L8.248|
00007e  9000              STR      r0,[sp,#0]
000080  4608              MOV      r0,r1
000082  8842              LDRH     r2,[r0,#2]  ; g_tNetData
000084  4b1c              LDR      r3,|L8.248|
000086  1d9b              ADDS     r3,r3,#6
000088  1d01              ADDS     r1,r0,#4
00008a  2000              MOVS     r0,#0
00008c  f7fffffe          BL       recvfrom
;;;818                        DEBUG(COM1, g_tNetData.buf, g_tNetData.len);
;;;819                        processCommand(g_tNetData.buf, g_tNetData.len);
000090  4818              LDR      r0,|L8.244|
000092  8841              LDRH     r1,[r0,#2]  ; g_tNetData
000094  1d00              ADDS     r0,r0,#4
000096  f7fffffe          BL       processCommand
                  |L8.154|
;;;820                    }
;;;821                    break;
00009a  e00a              B        |L8.178|
                  |L8.156|
00009c  e7ff              B        |L8.158|
                  |L8.158|
;;;822                    
;;;823                case SOCK_CLOSED:// Socket处于关闭状态
;;;824                    socket(0, Sn_MR_UDP, g_tParam.netCfg.local_port, 0);	// 打开Socket0，并配置为UDP模式，打开一个本地端口
00009e  4816              LDR      r0,|L8.248|
0000a0  381a              SUBS     r0,r0,#0x1a
0000a2  8b02              LDRH     r2,[r0,#0x18]  ; g_tParam
0000a4  2300              MOVS     r3,#0
0000a6  2102              MOVS     r1,#2
0000a8  4618              MOV      r0,r3
0000aa  f7fffffe          BL       socket
;;;825                    break;
0000ae  e000              B        |L8.178|
                  |L8.176|
;;;826                
;;;827                default:
;;;828                    break;         
0000b0  bf00              NOP      
                  |L8.178|
0000b2  bf00              NOP                            ;821
;;;829                }//end of switch
;;;830                
;;;831                if(n >= heartNum)//等到网络任务达到一定次数后发送心跳包
0000b4  4811              LDR      r0,|L8.252|
0000b6  8800              LDRH     r0,[r0,#0]  ; n
0000b8  4911              LDR      r1,|L8.256|
0000ba  8809              LDRH     r1,[r1,#0]  ; heartNum
0000bc  4288              CMP      r0,r1
0000be  db0d              BLT      |L8.220|
;;;832                {
;;;833                    n = 0;
0000c0  2000              MOVS     r0,#0
0000c2  490e              LDR      r1,|L8.252|
0000c4  8008              STRH     r0,[r1,#0]
;;;834                    //FB_data = g_tDoorStatus.doorA.feedBackStatus;
;;;835                    //FB_data += g_tDoorStatus.doorB.feedBackStatus << 4;
;;;836                    
;;;837                    
;;;838                    SendDataToServer(0, 0, g_tDetector.preciseSingleTime, 3);//发送心跳包
0000c6  2303              MOVS     r3,#3
0000c8  4a0e              LDR      r2,|L8.260|
0000ca  2100              MOVS     r1,#0
0000cc  4608              MOV      r0,r1
0000ce  f7fffffe          BL       SendDataToServer
;;;839                    memset(g_tDetector.preciseSingleTime, 0, sizeof(g_tDetector.preciseSingleTime));//清零
0000d2  480c              LDR      r0,|L8.260|
0000d4  3810              SUBS     r0,r0,#0x10
0000d6  2100              MOVS     r1,#0
0000d8  8201              STRH     r1,[r0,#0x10]
0000da  7481              STRB     r1,[r0,#0x12]
                  |L8.220|
;;;840                }
;;;841                n++;
0000dc  4807              LDR      r0,|L8.252|
0000de  8800              LDRH     r0,[r0,#0]  ; n
0000e0  1c40              ADDS     r0,r0,#1
0000e2  4906              LDR      r1,|L8.252|
0000e4  8008              STRH     r0,[r1,#0]
                  |L8.230|
;;;842            }
;;;843            
;;;844            /* os_itv_wait是周期性延迟，os_dly_wait是相对延迟。*/
;;;845    		os_dly_wait(netDelayTime);
0000e6  2032              MOVS     r0,#0x32
0000e8  f8dfc01c          LDR      r12,|L8.264|
0000ec  df00              SVC      #0x0
                  |L8.238|
0000ee  e789              B        |L8.4|
;;;846        }
;;;847    }
;;;848    
                          ENDP

                  |L8.240|
                          DCD      data
                  |L8.244|
                          DCD      g_tNetData
                  |L8.248|
                          DCD      g_tParam+0x1a
                  |L8.252|
                          DCD      n
                  |L8.256|
                          DCD      heartNum
                  |L8.260|
                          DCD      g_tDetector+0x10
                  |L8.264|
                          DCD      rt_dly_wait

                          AREA ||i.AppTaskReader||, CODE, READONLY, ALIGN=2

                  AppTaskReader PROC
;;;111    */
;;;112    __task void AppTaskReader(void)
000000  b508              PUSH     {r3,lr}
;;;113    {
;;;114        uint8_t type;
;;;115        SingleReader_T *readerMsg;
;;;116        const uint16_t usMaxBlockTime = 100; /* 延迟周期 */
000002  bf00              NOP      
                  |L9.4|
;;;117        while(1)
000004  e15b              B        |L9.702|
                  |L9.6|
;;;118        {
;;;119            //最重要的部分
;;;120    //        1.等待韦根函数发来的邮箱消息，先转发一次，然后自己再处理
;;;121    //        2.判断多种开门功能的开关，把SingleReader_T放到其他邮箱中
;;;122    //        3。首卡或多重卡或互锁收到邮箱消息后，解析ID，做出开门反应（多加几个邮箱和任务） 
;;;123    //        if(A)//首卡
;;;124    //        {转发给A}
;;;125    //        if(B)//多重卡
;;;126    //        {转发给B}
;;;127    //        if(C)//互锁
;;;128    //        {转发给C}
;;;129    //        
;;;130    //        type = searchID(readerMsg->ID);
;;;131    //        if(type 为超级卡/码或胁迫卡/码)
;;;132    //        {判断AB读头和AB继电器后，开门或报警}
;;;133            
;;;134            if(os_mbx_wait(&mailboxCardRX, (void *)&readerMsg, usMaxBlockTime) != OS_R_TMO)
000006  2264              MOVS     r2,#0x64
000008  4669              MOV      r1,sp
00000a  48ad              LDR      r0,|L9.704|
00000c  f8dfc2b4          LDR      r12,|L9.708|
000010  df00              SVC      #0x0
000012  2801              CMP      r0,#1
000014  d0f6              BEQ      |L9.4|
;;;135            {
;;;136                
;;;137                if(g_tParam.systemCfg.multipleOpenCfg[1] == 1)//首卡已启用
000016  48ac              LDR      r0,|L9.712|
000018  f890002b          LDRB     r0,[r0,#0x2b]
00001c  2801              CMP      r0,#1
00001e  d108              BNE      |L9.50|
;;;138                {
;;;139                    g_tRunInfo.isCardUsed = 1;
000020  49aa              LDR      r1,|L9.716|
000022  7008              STRB     r0,[r1,#0]
;;;140                    os_mbx_send(&mailboxCardFirst, readerMsg, 100);//向消息邮箱发数据，如果消息邮箱满了，等待100个时钟节拍
000024  2264              MOVS     r2,#0x64
000026  48aa              LDR      r0,|L9.720|
000028  f8dfc2a8          LDR      r12,|L9.724|
00002c  9900              LDR      r1,[sp,#0]
00002e  df00              SVC      #0x0
000030  e020              B        |L9.116|
                  |L9.50|
;;;141                }
;;;142                else if((g_tParam.systemCfg.multipleOpenCfg[2]&0x0F) == 1)//多重卡已启用//高四位表示卡数
000032  48a5              LDR      r0,|L9.712|
000034  f890002c          LDRB     r0,[r0,#0x2c]
000038  f000000f          AND      r0,r0,#0xf
00003c  2801              CMP      r0,#1
00003e  d108              BNE      |L9.82|
;;;143                {
;;;144                    g_tRunInfo.isCardUsed = 1;
000040  49a2              LDR      r1,|L9.716|
000042  7008              STRB     r0,[r1,#0]
;;;145                    os_mbx_send(&mailboxCardMulti, readerMsg, 100);//向消息邮箱发数据，如果消息邮箱满了，等待100个时钟节拍
000044  2264              MOVS     r2,#0x64
000046  48a4              LDR      r0,|L9.728|
000048  f8dfc288          LDR      r12,|L9.724|
00004c  9900              LDR      r1,[sp,#0]
00004e  df00              SVC      #0x0
000050  e010              B        |L9.116|
                  |L9.82|
;;;146                }
;;;147                else if(g_tParam.systemCfg.multipleOpenCfg[0] == 1)//互锁已启用
000052  489d              LDR      r0,|L9.712|
000054  f890002a          LDRB     r0,[r0,#0x2a]
000058  2801              CMP      r0,#1
00005a  d108              BNE      |L9.110|
;;;148                {
;;;149                    g_tRunInfo.isCardUsed = 1;
00005c  499b              LDR      r1,|L9.716|
00005e  7008              STRB     r0,[r1,#0]
;;;150                    os_mbx_send(&mailboxCardInterLock, readerMsg, 100);//向消息邮箱发数据，如果消息邮箱满了，等待100个时钟节拍
000060  2264              MOVS     r2,#0x64
000062  489e              LDR      r0,|L9.732|
000064  f8dfc26c          LDR      r12,|L9.724|
000068  9900              LDR      r1,[sp,#0]
00006a  df00              SVC      #0x0
00006c  e002              B        |L9.116|
                  |L9.110|
;;;151                }
;;;152                else g_tRunInfo.isCardUsed = 0;
00006e  2000              MOVS     r0,#0
000070  4996              LDR      r1,|L9.716|
000072  7008              STRB     r0,[r1,#0]
                  |L9.116|
;;;153                
;;;154                if(!g_tRunInfo.isCardUsed)
000074  4895              LDR      r0,|L9.716|
000076  7800              LDRB     r0,[r0,#0]  ; g_tRunInfo
000078  2800              CMP      r0,#0
00007a  d17d              BNE      |L9.376|
;;;155                {
;;;156                    //处理超级卡、码和胁迫卡、码
;;;157                    switch(readerMsg->readerID)
00007c  9800              LDR      r0,[sp,#0]
00007e  7800              LDRB     r0,[r0,#0]
000080  b110              CBZ      r0,|L9.136|
000082  2801              CMP      r0,#1
000084  d179              BNE      |L9.378|
000086  e08c              B        |L9.418|
                  |L9.136|
;;;158                    {
;;;159                    case e_READER_A:                    
;;;160                        g_tReader.dataCheck(readerMsg);
000088  4895              LDR      r0,|L9.736|
00008a  6c41              LDR      r1,[r0,#0x44]  ; g_tReader
00008c  9800              LDR      r0,[sp,#0]
00008e  4788              BLX      r1
;;;161                        type = searchID(readerMsg->ID);//searchID函数先读配置，再检测卡号有没有
000090  9800              LDR      r0,[sp,#0]
000092  1d00              ADDS     r0,r0,#4
000094  f7fffffe          BL       searchID
000098  4604              MOV      r4,r0
;;;162    
;;;163                        if(type == e_superCardID || type == e_superPasswordID)//超级卡或超级密码随便开
00009a  2c01              CMP      r4,#1
00009c  d001              BEQ      |L9.162|
00009e  2c02              CMP      r4,#2
0000a0  d121              BNE      |L9.230|
                  |L9.162|
;;;164                        {
;;;165                            if(g_tDoorStatus.doorA.switcherStatus == NC)
0000a2  4890              LDR      r0,|L9.740|
0000a4  7800              LDRB     r0,[r0,#0]  ; g_tDoorStatus
0000a6  b9f0              CBNZ     r0,|L9.230|
;;;166                            {
;;;167                                g_tDoorStatus.openDoor(&g_tParam.relation.relationA, e_READER_A);
0000a8  488e              LDR      r0,|L9.740|
0000aa  2100              MOVS     r1,#0
0000ac  6882              LDR      r2,[r0,#8]  ; g_tDoorStatus
0000ae  4886              LDR      r0,|L9.712|
0000b0  3014              ADDS     r0,r0,#0x14
0000b2  4790              BLX      r2
;;;168                                OneTimerA = os_tmr_create(1000 * g_tParam.systemCfg.openTime, 1);
0000b4  4984              LDR      r1,|L9.712|
0000b6  f8911028          LDRB     r1,[r1,#0x28]  ; g_tParam
0000ba  f44f727a          MOV      r2,#0x3e8
0000be  4351              MULS     r1,r2,r1
0000c0  b288              UXTH     r0,r1
0000c2  2101              MOVS     r1,#1
0000c4  f8dfc220          LDR      r12,|L9.744|
0000c8  df00              SVC      #0x0
0000ca  4988              LDR      r1,|L9.748|
0000cc  6008              STR      r0,[r1,#0]  ; OneTimerA
;;;169                                
;;;170                                //存储记录到spi
;;;171                                storeRecord(readerMsg->ID, e_READER_A);
0000ce  2100              MOVS     r1,#0
0000d0  9800              LDR      r0,[sp,#0]
0000d2  1d00              ADDS     r0,r0,#4
0000d4  f7fffffe          BL       storeRecord
;;;172                                //把卡号上传到服务器
;;;173                                SendDataToServer(0x06, e_READER_A, g_tReader.readerA.ID, 3);
0000d8  2303              MOVS     r3,#3
0000da  4a81              LDR      r2,|L9.736|
0000dc  1d12              ADDS     r2,r2,#4
0000de  2100              MOVS     r1,#0
0000e0  2006              MOVS     r0,#6
0000e2  f7fffffe          BL       SendDataToServer
                  |L9.230|
;;;174                            }
;;;175                        }
;;;176                        if(type == e_threatCardID || type == e_threatPasswordID)//胁迫卡和胁迫码
0000e6  2c03              CMP      r4,#3
0000e8  d001              BEQ      |L9.238|
0000ea  2c04              CMP      r4,#4
0000ec  d121              BNE      |L9.306|
                  |L9.238|
;;;177                        {
;;;178                            if(g_tDoorStatus.doorA.switcherStatus == NC)
0000ee  487d              LDR      r0,|L9.740|
0000f0  7800              LDRB     r0,[r0,#0]  ; g_tDoorStatus
0000f2  b9f0              CBNZ     r0,|L9.306|
;;;179                            {
;;;180                                g_tDoorStatus.openDoor(&g_tParam.relation.relationA, e_READER_A);
0000f4  487b              LDR      r0,|L9.740|
0000f6  2100              MOVS     r1,#0
0000f8  6882              LDR      r2,[r0,#8]  ; g_tDoorStatus
0000fa  4873              LDR      r0,|L9.712|
0000fc  3014              ADDS     r0,r0,#0x14
0000fe  4790              BLX      r2
;;;181                                OneTimerA = os_tmr_create(1000 * g_tParam.systemCfg.openTime, 1);
000100  4971              LDR      r1,|L9.712|
000102  f8911028          LDRB     r1,[r1,#0x28]  ; g_tParam
000106  f44f727a          MOV      r2,#0x3e8
00010a  4351              MULS     r1,r2,r1
00010c  b288              UXTH     r0,r1
00010e  2101              MOVS     r1,#1
000110  f8dfc1d4          LDR      r12,|L9.744|
000114  df00              SVC      #0x0
000116  4975              LDR      r1,|L9.748|
000118  6008              STR      r0,[r1,#0]  ; OneTimerA
;;;182                                
;;;183                                //存储记录到spi
;;;184                                storeRecord(readerMsg->ID, e_READER_A);
00011a  2100              MOVS     r1,#0
00011c  9800              LDR      r0,[sp,#0]
00011e  1d00              ADDS     r0,r0,#4
000120  f7fffffe          BL       storeRecord
;;;185                                
;;;186                                SendDataToServer(0x22, e_READER_A, g_tReader.readerA.ID, 3);//上传报警消息
000124  2303              MOVS     r3,#3
000126  4a6e              LDR      r2,|L9.736|
000128  1d12              ADDS     r2,r2,#4
00012a  2100              MOVS     r1,#0
00012c  2022              MOVS     r0,#0x22
00012e  f7fffffe          BL       SendDataToServer
                  |L9.306|
;;;187                            }
;;;188                        }
;;;189                        if(type==e_keyBoardID || type==e_generalCardID || type==e_fingerID)
000132  2c05              CMP      r4,#5
000134  d003              BEQ      |L9.318|
000136  2c07              CMP      r4,#7
000138  d001              BEQ      |L9.318|
00013a  2c08              CMP      r4,#8
00013c  d127              BNE      |L9.398|
                  |L9.318|
;;;190                        {
;;;191                            if(g_tDoorStatus.doorA.switcherStatus == NC)
00013e  4869              LDR      r0,|L9.740|
000140  7800              LDRB     r0,[r0,#0]  ; g_tDoorStatus
000142  bb20              CBNZ     r0,|L9.398|
;;;192                            {   
;;;193                                g_tDoorStatus.openDoor(&g_tParam.relation.relationA, e_READER_A);
000144  4867              LDR      r0,|L9.740|
000146  2100              MOVS     r1,#0
000148  6882              LDR      r2,[r0,#8]  ; g_tDoorStatus
00014a  485f              LDR      r0,|L9.712|
00014c  3014              ADDS     r0,r0,#0x14
00014e  4790              BLX      r2
;;;194                                
;;;195                                OneTimerA = os_tmr_create(1000 * g_tParam.systemCfg.openTime, 1);
000150  495d              LDR      r1,|L9.712|
000152  f8911028          LDRB     r1,[r1,#0x28]  ; g_tParam
000156  f44f727a          MOV      r2,#0x3e8
00015a  4351              MULS     r1,r2,r1
00015c  b288              UXTH     r0,r1
00015e  2101              MOVS     r1,#1
000160  f8dfc184          LDR      r12,|L9.744|
000164  df00              SVC      #0x0
000166  4961              LDR      r1,|L9.748|
000168  6008              STR      r0,[r1,#0]  ; OneTimerA
;;;196                                OpenTips(e_READER_A);
00016a  2000              MOVS     r0,#0
00016c  f7fffffe          BL       OpenTips
;;;197                                
;;;198                                //存储记录到spi
;;;199                                storeRecord(readerMsg->ID, e_READER_A);
000170  2100              MOVS     r1,#0
000172  9800              LDR      r0,[sp,#0]
000174  1d00              ADDS     r0,r0,#4
000176  e001              B        |L9.380|
                  |L9.376|
000178  e09f              B        |L9.698|
                  |L9.378|
00017a  e09c              B        |L9.694|
                  |L9.380|
00017c  f7fffffe          BL       storeRecord
;;;200                                //把卡号上传到服务器
;;;201                                //add3-8 读写位0表示A，1表示B
;;;202                                SendDataToServer(0x06, e_READER_A, g_tReader.readerA.ID, 3);
000180  2303              MOVS     r3,#3
000182  4a57              LDR      r2,|L9.736|
000184  1d12              ADDS     r2,r2,#4
000186  2100              MOVS     r1,#0
000188  2006              MOVS     r0,#6
00018a  f7fffffe          BL       SendDataToServer
                  |L9.398|
;;;203                            }
;;;204                        }
;;;205                        if(type == 0xFF)
00018e  2cff              CMP      r4,#0xff
000190  d106              BNE      |L9.416|
;;;206                        {
;;;207                            //把卡号上传到服务器
;;;208                            SendDataToServer(0x06, e_READER_A, g_tReader.readerA.ID, 3);
000192  2303              MOVS     r3,#3
000194  4a52              LDR      r2,|L9.736|
000196  1d12              ADDS     r2,r2,#4
000198  2100              MOVS     r1,#0
00019a  2006              MOVS     r0,#6
00019c  f7fffffe          BL       SendDataToServer
                  |L9.416|
;;;209                        }
;;;210                        break;
0001a0  e08a              B        |L9.696|
                  |L9.418|
;;;211                    
;;;212                    case e_READER_B:
;;;213                        g_tReader.dataCheck(readerMsg);
0001a2  484f              LDR      r0,|L9.736|
0001a4  6c41              LDR      r1,[r0,#0x44]  ; g_tReader
0001a6  9800              LDR      r0,[sp,#0]
0001a8  4788              BLX      r1
;;;214                        type = searchID(readerMsg->ID);//searchID函数先读配置，再检测卡号有没有
0001aa  9800              LDR      r0,[sp,#0]
0001ac  1d00              ADDS     r0,r0,#4
0001ae  f7fffffe          BL       searchID
0001b2  4604              MOV      r4,r0
;;;215    
;;;216                        if(type == e_superCardID || type == e_superPasswordID)//超级卡或超级密码随便开
0001b4  2c01              CMP      r4,#1
0001b6  d001              BEQ      |L9.444|
0001b8  2c02              CMP      r4,#2
0001ba  d121              BNE      |L9.512|
                  |L9.444|
;;;217                        {
;;;218                            if(g_tDoorStatus.doorB.switcherStatus == NC)
0001bc  4849              LDR      r0,|L9.740|
0001be  7880              LDRB     r0,[r0,#2]  ; g_tDoorStatus
0001c0  b9f0              CBNZ     r0,|L9.512|
;;;219                            { 
;;;220                                g_tDoorStatus.openDoor(&g_tParam.relation.relationB, e_READER_B);
0001c2  4848              LDR      r0,|L9.740|
0001c4  2101              MOVS     r1,#1
0001c6  6882              LDR      r2,[r0,#8]  ; g_tDoorStatus
0001c8  483f              LDR      r0,|L9.712|
0001ca  3016              ADDS     r0,r0,#0x16
0001cc  4790              BLX      r2
;;;221                                OneTimerB = os_tmr_create(1000 * g_tParam.systemCfg.openTime, 2);
0001ce  493e              LDR      r1,|L9.712|
0001d0  f8911028          LDRB     r1,[r1,#0x28]  ; g_tParam
0001d4  f44f727a          MOV      r2,#0x3e8
0001d8  4351              MULS     r1,r2,r1
0001da  b288              UXTH     r0,r1
0001dc  2102              MOVS     r1,#2
0001de  f8dfc108          LDR      r12,|L9.744|
0001e2  df00              SVC      #0x0
0001e4  4942              LDR      r1,|L9.752|
0001e6  6008              STR      r0,[r1,#0]  ; OneTimerB
;;;222                                //存储记录到spi
;;;223                                storeRecord(readerMsg->ID, e_READER_B);
0001e8  2101              MOVS     r1,#1
0001ea  9800              LDR      r0,[sp,#0]
0001ec  1d00              ADDS     r0,r0,#4
0001ee  f7fffffe          BL       storeRecord
;;;224                                //把卡号上传到服务器
;;;225                                SendDataToServer(0x06, e_READER_B, g_tReader.readerB.ID, 3);
0001f2  2303              MOVS     r3,#3
0001f4  4a3a              LDR      r2,|L9.736|
0001f6  3225              ADDS     r2,r2,#0x25
0001f8  2101              MOVS     r1,#1
0001fa  2006              MOVS     r0,#6
0001fc  f7fffffe          BL       SendDataToServer
                  |L9.512|
;;;226                            }
;;;227                        }
;;;228                        if(type == e_threatCardID || type == e_threatPasswordID)//胁迫卡和胁迫码
000200  2c03              CMP      r4,#3
000202  d001              BEQ      |L9.520|
000204  2c04              CMP      r4,#4
000206  d121              BNE      |L9.588|
                  |L9.520|
;;;229                        {
;;;230                            if(g_tDoorStatus.doorB.switcherStatus == NC)
000208  4836              LDR      r0,|L9.740|
00020a  7880              LDRB     r0,[r0,#2]  ; g_tDoorStatus
00020c  b9f0              CBNZ     r0,|L9.588|
;;;231                            {
;;;232                                g_tDoorStatus.openDoor(&g_tParam.relation.relationB, e_READER_B);
00020e  4835              LDR      r0,|L9.740|
000210  2101              MOVS     r1,#1
000212  6882              LDR      r2,[r0,#8]  ; g_tDoorStatus
000214  482c              LDR      r0,|L9.712|
000216  3016              ADDS     r0,r0,#0x16
000218  4790              BLX      r2
;;;233                                OneTimerA = os_tmr_create(1000 * g_tParam.systemCfg.openTime, 2);
00021a  492b              LDR      r1,|L9.712|
00021c  f8911028          LDRB     r1,[r1,#0x28]  ; g_tParam
000220  f44f727a          MOV      r2,#0x3e8
000224  4351              MULS     r1,r2,r1
000226  b288              UXTH     r0,r1
000228  2102              MOVS     r1,#2
00022a  f8dfc0bc          LDR      r12,|L9.744|
00022e  df00              SVC      #0x0
000230  492e              LDR      r1,|L9.748|
000232  6008              STR      r0,[r1,#0]  ; OneTimerA
;;;234                                
;;;235                                //存储记录到spi
;;;236                                storeRecord(readerMsg->ID, e_READER_B);
000234  2101              MOVS     r1,#1
000236  9800              LDR      r0,[sp,#0]
000238  1d00              ADDS     r0,r0,#4
00023a  f7fffffe          BL       storeRecord
;;;237                                
;;;238                                SendDataToServer(0x22, e_READER_B, g_tReader.readerB.ID, 3);//上传报警消息
00023e  2303              MOVS     r3,#3
000240  4a27              LDR      r2,|L9.736|
000242  3225              ADDS     r2,r2,#0x25
000244  2101              MOVS     r1,#1
000246  2022              MOVS     r0,#0x22
000248  f7fffffe          BL       SendDataToServer
                  |L9.588|
;;;239                            }
;;;240                        }
;;;241                        if(type==e_keyBoardID || type==e_generalCardID || type==e_fingerID)
00024c  2c05              CMP      r4,#5
00024e  d003              BEQ      |L9.600|
000250  2c07              CMP      r4,#7
000252  d001              BEQ      |L9.600|
000254  2c08              CMP      r4,#8
000256  d124              BNE      |L9.674|
                  |L9.600|
;;;242                        {
;;;243                            if(g_tDoorStatus.doorB.switcherStatus == NC)
000258  4822              LDR      r0,|L9.740|
00025a  7880              LDRB     r0,[r0,#2]  ; g_tDoorStatus
00025c  bb08              CBNZ     r0,|L9.674|
;;;244                            {              
;;;245                                g_tDoorStatus.openDoor(&g_tParam.relation.relationB, e_READER_B);
00025e  4821              LDR      r0,|L9.740|
000260  2101              MOVS     r1,#1
000262  6882              LDR      r2,[r0,#8]  ; g_tDoorStatus
000264  4818              LDR      r0,|L9.712|
000266  3016              ADDS     r0,r0,#0x16
000268  4790              BLX      r2
;;;246                                
;;;247                                OneTimerB = os_tmr_create(1000 * g_tParam.systemCfg.openTime, 3);
00026a  4917              LDR      r1,|L9.712|
00026c  f8911028          LDRB     r1,[r1,#0x28]  ; g_tParam
000270  f44f727a          MOV      r2,#0x3e8
000274  4351              MULS     r1,r2,r1
000276  b288              UXTH     r0,r1
000278  2103              MOVS     r1,#3
00027a  f8dfc06c          LDR      r12,|L9.744|
00027e  df00              SVC      #0x0
000280  491b              LDR      r1,|L9.752|
000282  6008              STR      r0,[r1,#0]  ; OneTimerB
;;;248                                OpenTips(e_READER_B);
000284  2001              MOVS     r0,#1
000286  f7fffffe          BL       OpenTips
;;;249                                
;;;250                                //存储记录到spi
;;;251                                storeRecord(readerMsg->ID, e_READER_B);
00028a  2101              MOVS     r1,#1
00028c  9800              LDR      r0,[sp,#0]
00028e  1d00              ADDS     r0,r0,#4
000290  f7fffffe          BL       storeRecord
;;;252                                //把卡号上传到服务器
;;;253                                SendDataToServer(0x06, e_READER_B, g_tReader.readerB.ID, 3);
000294  2303              MOVS     r3,#3
000296  4a12              LDR      r2,|L9.736|
000298  3225              ADDS     r2,r2,#0x25
00029a  2101              MOVS     r1,#1
00029c  2006              MOVS     r0,#6
00029e  f7fffffe          BL       SendDataToServer
                  |L9.674|
;;;254                            }
;;;255                        }
;;;256                        if(type == 0xFF)
0002a2  2cff              CMP      r4,#0xff
0002a4  d106              BNE      |L9.692|
;;;257                        {
;;;258                            //把卡号上传到服务器
;;;259                            SendDataToServer(0x06, e_READER_B, g_tReader.readerB.ID, 3);
0002a6  2303              MOVS     r3,#3
0002a8  4a0d              LDR      r2,|L9.736|
0002aa  3225              ADDS     r2,r2,#0x25
0002ac  2101              MOVS     r1,#1
0002ae  2006              MOVS     r0,#6
0002b0  f7fffffe          BL       SendDataToServer
                  |L9.692|
;;;260                        }
;;;261                        break;
0002b4  e000              B        |L9.696|
                  |L9.694|
;;;262                        
;;;263                    
;;;264                    default:
;;;265                        break;
0002b6  bf00              NOP      
                  |L9.696|
0002b8  bf00              NOP                            ;210
                  |L9.698|
;;;266                }//end of switch
;;;267            }//end of if
;;;268               
;;;269            //翻转系统状态灯
;;;270            SysLed();
0002ba  f7fffffe          BL       SysLed
                  |L9.702|
0002be  e6a2              B        |L9.6|
;;;271                
;;;272            }//end of if
;;;273        }//end of while
;;;274    }
;;;275    
                          ENDP

                  |L9.704|
                          DCD      mailboxCardRX
                  |L9.708|
                          DCD      rt_mbx_wait
                  |L9.712|
                          DCD      g_tParam
                  |L9.716|
                          DCD      g_tRunInfo
                  |L9.720|
                          DCD      mailboxCardFirst
                  |L9.724|
                          DCD      rt_mbx_send
                  |L9.728|
                          DCD      mailboxCardMulti
                  |L9.732|
                          DCD      mailboxCardInterLock
                  |L9.736|
                          DCD      g_tReader
                  |L9.740|
                          DCD      g_tDoorStatus
                  |L9.744|
                          DCD      rt_tmr_create
                  |L9.748|
                          DCD      OneTimerA
                  |L9.752|
                          DCD      OneTimerB

                          AREA ||i.AppTaskStart||, CODE, READONLY, ALIGN=2

                  AppTaskStart PROC
;;;855    
;;;856    __task void AppTaskStart(void)
000000  f8dfc050          LDR      r12,|L10.84|
;;;857    {
;;;858        
;;;859        /* 获取启动任务的句柄 */
;;;860    	HandleTaskStart = os_tsk_self();
000004  df00              SVC      #0x0
000006  4914              LDR      r1,|L10.88|
000008  6008              STR      r0,[r1,#0]  ; HandleTaskStart
;;;861        //通过start任务间接地创建其他任务
;;;862    	AppTaskCreate();
00000a  f7fffffe          BL       AppTaskCreate
;;;863        /* 创建任务通信机制 */
;;;864    	AppObjCreate();
00000e  f7fffffe          BL       AppObjCreate
;;;865    	
;;;866        while(1)
000012  e01d              B        |L10.80|
                  |L10.20|
;;;867        {
;;;868            IWDG_Feed();//喂狗
000014  f7fffffe          BL       IWDG_Feed
;;;869            
;;;870            ds1302_readtime(g_tRunInfo.time, 5);//读取时间
000018  2105              MOVS     r1,#5
00001a  4810              LDR      r0,|L10.92|
00001c  f7fffffe          BL       ds1302_readtime
;;;871    
;;;872            //判断是否到0点，需要复位首卡或者多重卡的状态
;;;873            if(g_tRunInfo.time[3] == 0 && (g_tRunInfo.firstCardStatus != 0 || g_tRunInfo.multipleCardStatus != 0))
000020  480e              LDR      r0,|L10.92|
000022  1f80              SUBS     r0,r0,#6
000024  7a40              LDRB     r0,[r0,#9]
000026  b960              CBNZ     r0,|L10.66|
000028  480c              LDR      r0,|L10.92|
00002a  1f80              SUBS     r0,r0,#6
00002c  7880              LDRB     r0,[r0,#2]  ; g_tRunInfo
00002e  b918              CBNZ     r0,|L10.56|
000030  480a              LDR      r0,|L10.92|
000032  1f80              SUBS     r0,r0,#6
000034  8880              LDRH     r0,[r0,#4]  ; g_tRunInfo
000036  b120              CBZ      r0,|L10.66|
                  |L10.56|
;;;874            {
;;;875                //状态置0
;;;876                g_tRunInfo.firstCardStatus = 0;
000038  2000              MOVS     r0,#0
00003a  4908              LDR      r1,|L10.92|
00003c  1f89              SUBS     r1,r1,#6
00003e  7088              STRB     r0,[r1,#2]
;;;877                g_tRunInfo.multipleCardStatus = 0;
000040  8088              STRH     r0,[r1,#4]
                  |L10.66|
;;;878            }
;;;879     
;;;880            //翻转系统状态灯
;;;881            SysLed();
000042  f7fffffe          BL       SysLed
;;;882            os_dly_wait(15000);
000046  f6432098          MOV      r0,#0x3a98
00004a  f8dfc014          LDR      r12,|L10.96|
00004e  df00              SVC      #0x0
                  |L10.80|
000050  e7e0              B        |L10.20|
;;;883        }
;;;884    }
;;;885    
                          ENDP

000052  0000              DCW      0x0000
                  |L10.84|
                          DCD      rt_tsk_self
                  |L10.88|
                          DCD      HandleTaskStart
                  |L10.92|
                          DCD      g_tRunInfo+0x6
                  |L10.96|
                          DCD      rt_dly_wait

                          AREA ||i.OpenTips||, CODE, READONLY, ALIGN=1

                  OpenTips PROC
;;;966    //开门提示音
;;;967    static void OpenTips(enum ReaderOrButton_Enum type)
000000  4770              BX       lr
;;;968    {
;;;969    //    uint8_t delayTime = 50;
;;;970    //    os_dly_wait(200);
;;;971    //    
;;;972    //    alarmOn(type);
;;;973    //    os_dly_wait(delayTime);
;;;974    //    alarmOff(type);
;;;975    //    
;;;976    //    os_dly_wait(delayTime);
;;;977    //    
;;;978    //    alarmOn(type);
;;;979    //    os_dly_wait(delayTime);
;;;980    //    alarmOff(type);
;;;981    //    
;;;982    //    os_dly_wait(delayTime);
;;;983    //    
;;;984    //    alarmOn(type);
;;;985    //    os_dly_wait(delayTime);
;;;986    //    alarmOff(type);
;;;987    }
;;;988    
                          ENDP


                          AREA ||i.ReaderAlarm||, CODE, READONLY, ALIGN=2

                  ReaderAlarm PROC
;;;950    //报警
;;;951    static void ReaderAlarm(enum ReaderOrButton_Enum type)
000000  b510              PUSH     {r4,lr}
;;;952    {
000002  4604              MOV      r4,r0
;;;953        alarmOn(type);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       alarmOn
;;;954        os_dly_wait(500);
00000a  f44f70fa          MOV      r0,#0x1f4
00000e  f8dfc00c          LDR      r12,|L12.28|
000012  df00              SVC      #0x0
;;;955        alarmOff(type);
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       alarmOff
;;;956    }
00001a  bd10              POP      {r4,pc}
;;;957    
                          ENDP

                  |L12.28|
                          DCD      rt_dly_wait

                          AREA ||i.SysLed||, CODE, READONLY, ALIGN=2

                  SysLed PROC
;;;958    //系统状态灯闪烁
;;;959    static void SysLed(void)
000000  b510              PUSH     {r4,lr}
;;;960    {
;;;961        bsp_LedToggle(3);
000002  2003              MOVS     r0,#3
000004  f7fffffe          BL       bsp_LedToggle
;;;962        os_dly_wait(500);
000008  f44f70fa          MOV      r0,#0x1f4
00000c  f8dfc00c          LDR      r12,|L13.28|
000010  df00              SVC      #0x0
;;;963        bsp_LedToggle(3);
000012  2003              MOVS     r0,#3
000014  f7fffffe          BL       bsp_LedToggle
;;;964    }
000018  bd10              POP      {r4,pc}
;;;965    
                          ENDP

00001a  0000              DCW      0x0000
                  |L13.28|
                          DCD      rt_dly_wait

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;86     */
;;;87     int main(void) 
000000  f7fffffe          BL       bsp_Init
;;;88     {	
;;;89     	/* 初始化外设 */
;;;90     	bsp_Init();
;;;91         
;;;92         #if Test
;;;93     //    bsp_LedOn(1);
;;;94     //    bsp_LedOn(2);
;;;95         #endif
;;;96         
;;;97     	/* 创建启动任务 */
;;;98      	os_sys_init_user(AppTaskStart,             /* 任务函数 */
000004  f7fffffe          BL       os_set_env
000008  4a03              LDR      r2,|L14.24|
00000a  4904              LDR      r1,|L14.28|
00000c  4804              LDR      r0,|L14.32|
00000e  f8dfc014          LDR      r12,|L14.36|
000012  df00              SVC      #0x0
;;;99     	                  8,                        /* 任务优先级 */
;;;100    	                  &AppTaskStartStk,         /* 任务栈 */
;;;101    	                  sizeof(AppTaskStartStk)); /* 任务栈大小，单位字节数 */
;;;102    	while(1);
000014  bf00              NOP      
                  |L14.22|
000016  e7fe              B        |L14.22|
;;;103    }
;;;104    
                          ENDP

                  |L14.24|
                          DCD      AppTaskStartStk
                  |L14.28|
                          DCD      0x00020008
                  |L14.32|
                          DCD      AppTaskStart
                  |L14.36|
                          DCD      rt_sys_init

                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  AppTaskReaderStk
                          %        512
                  AppTaskFirstStk
                          %        512
                  AppTaskMultiStk
                          %        512
                  AppTaskInterLockStk
                          %        512
                  AppTaskKeyStk
                          %        512
                  AppTaskButtonStk
                          %        512
                  AppTaskNetStk
                          %        512
                  AppTaskStartStk
                          %        512
                  mailboxCardRX
                          %        48
                  mailboxCardFirst
                          %        48
                  mailboxCardMulti
                          %        48
                  mailboxCardInterLock
                          %        48

                          AREA ||.data||, DATA, ALIGN=2

                  HandleTaskReader
                          DCD      0x00000000
                  HandleTaskFirst
                          DCD      0x00000000
                  HandleTaskMulti
                          DCD      0x00000000
                  HandleTaskInterLock
                          DCD      0x00000000
                  HandleTaskKey
                          DCD      0x00000000
                  HandleTaskButton
                          DCD      0x00000000
                  HandleTaskNet
                          DCD      0x00000000
                  HandleTaskStart
                          DCD      0x00000000
                  timesA
000020  0000              DCB      0x00,0x00
                  timesB
000022  0000              DCB      0x00,0x00
                  n
000024  0000              DCB      0x00,0x00
                  data
000026  0000              DCB      0x00,0x00
                  heartNum
000028  0064              DCW      0x0064
00002a  0000              DCB      0x00,0x00
                  OneTimerA
                          DCD      0x00000000
                  OneTimerB
                          DCD      0x00000000
                  FB_data
000034  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\main.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_main_c_e51cdd69____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_e51cdd69____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_main_c_e51cdd69____REVSH|
#line 128
|__asm___6_main_c_e51cdd69____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
