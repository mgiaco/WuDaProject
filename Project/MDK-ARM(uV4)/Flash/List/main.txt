; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\main.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\RTX\inc -I..\..\RTX\portable -I..\..\User\CpuFlash -I..\..\User\CRC8_16 -I..\..\User\DS1302 -I..\..\User\DWT -I..\..\User\IIC -I..\..\User\IWDG -I..\..\User\Key -I..\..\User\Led -I..\..\User\Net -I..\..\User\Protocal -I..\..\User\Reader -I..\..\User\SPI -I..\..\User\Timer -I..\..\User\Uart -I..\..\User\Param -I..\..\User\ADC -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\main.crf ..\..\User\main.c]
                          THUMB

                          AREA ||i.AppTaskCreate||, CODE, READONLY, ALIGN=2

                  AppTaskCreate PROC
;;;170    */
;;;171    static void AppTaskCreate (void)
000000  2300              MOVS     r3,#0
;;;172    { 
;;;173    	HandleTaskNet = os_tsk_create_user(AppTaskNet,              /* 任务函数 */ 
000002  4a04              LDR      r2,|L1.20|
000004  4904              LDR      r1,|L1.24|
000006  4805              LDR      r0,|L1.28|
000008  f8dfc014          LDR      r12,|L1.32|
00000c  df00              SVC      #0x0
00000e  4905              LDR      r1,|L1.36|
000010  6008              STR      r0,[r1,#0]  ; HandleTaskNet
;;;174    	                                   3,                       /* 任务优先级 */ 
;;;175    	                                   &AppTaskNetStk,          /* 任务栈 */
;;;176    	                                   sizeof(AppTaskNetStk));  /* 任务栈大小，单位字节数 */
;;;177        
;;;178    //    HandleTaskMonitor = os_tsk_create_user(AppTaskMonitor,              /* 任务函数 */ 
;;;179    //	                                   2,                       /* 任务优先级 */ 
;;;180    //	                                   &AppTaskMonitorStk,          /* 任务栈 */
;;;181    //	                                   sizeof(AppTaskMonitorStk));  /* 任务栈大小，单位字节数 */
;;;182    }
000012  4770              BX       lr
;;;183    
                          ENDP

                  |L1.20|
                          DCD      AppTaskNetStk
                  |L1.24|
                          DCD      0x00020003
                  |L1.28|
                          DCD      AppTaskNet
                  |L1.32|
                          DCD      rt_tsk_create
                  |L1.36|
                          DCD      HandleTaskNet

                          AREA ||i.AppTaskMonitor||, CODE, READONLY, ALIGN=2

                  AppTaskMonitor PROC
;;;139    */
;;;140    __task void AppTaskMonitor(void)
000000  bf00              NOP      
;;;141    {
;;;142        const uint16_t usMaxBlockTime = 3000; /* 延迟周期,3000s */
;;;143        while(1)
000002  e015              B        |L2.48|
                  |L2.4|
;;;144        {
;;;145            //若没有触发，但有能级，此时需要处理
;;;146            if(g_tRunInfo.isTriggered == 0)
000004  480b              LDR      r0,|L2.52|
000006  7800              LDRB     r0,[r0,#0]  ; g_tRunInfo
000008  b968              CBNZ     r0,|L2.38|
;;;147            {
;;;148                if(GetDetectorLevel() != 0)
00000a  f7fffffe          BL       GetDetectorLevel
00000e  b120              CBZ      r0,|L2.26|
;;;149                {
;;;150                    g_tRunInfo.readTimes++;
000010  4808              LDR      r0,|L2.52|
000012  7840              LDRB     r0,[r0,#1]  ; g_tRunInfo
000014  1c40              ADDS     r0,r0,#1
000016  4907              LDR      r1,|L2.52|
000018  7048              STRB     r0,[r1,#1]
                  |L2.26|
;;;151                }
;;;152                
;;;153                if(g_tRunInfo.readTimes == 3)
00001a  4806              LDR      r0,|L2.52|
00001c  7840              LDRB     r0,[r0,#1]  ; g_tRunInfo
00001e  2803              CMP      r0,#3
000020  d101              BNE      |L2.38|
;;;154                {
;;;155                    ResetDetector();
000022  f7fffffe          BL       ResetDetector
                  |L2.38|
;;;156                }
;;;157            }
;;;158            
;;;159            os_dly_wait(usMaxBlockTime);
000026  f64030b8          MOV      r0,#0xbb8
00002a  f8dfc00c          LDR      r12,|L2.56|
00002e  df00              SVC      #0x0
                  |L2.48|
000030  e7e8              B        |L2.4|
;;;160        }  
;;;161    }
;;;162    
                          ENDP

000032  0000              DCW      0x0000
                  |L2.52|
                          DCD      g_tRunInfo
                  |L2.56|
                          DCD      rt_dly_wait

                          AREA ||i.AppTaskNet||, CODE, READONLY, ALIGN=2

                  AppTaskNet PROC
;;;99     */
;;;100    __task void AppTaskNet(void)
000000  bf00              NOP      
;;;101    {
;;;102        uint16_t ret_flags;
;;;103        const uint16_t usMaxBlockTime = 0x0FFF; /* 延迟周期,4095ms */
;;;104        while(1)
000002  e022              B        |L3.74|
                  |L3.4|
;;;105        {
;;;106            //采用或等待方式;退出前bit位被清除
;;;107            if(os_evt_wait_or(BIT_ALL, usMaxBlockTime) == OS_R_EVT)
000004  2200              MOVS     r2,#0
000006  f64071ff          MOV      r1,#0xfff
00000a  20ff              MOVS     r0,#0xff
00000c  f8dfc03c          LDR      r12,|L3.76|
000010  df00              SVC      #0x0
000012  2802              CMP      r0,#2
000014  d113              BNE      |L3.62|
;;;108            {
;;;109                ret_flags = os_evt_get();//返回值为对应的bit
000016  f8dfc038          LDR      r12,|L3.80|
00001a  df00              SVC      #0x0
00001c  4604              MOV      r4,r0
;;;110                
;;;111                switch(ret_flags)
00001e  2c01              CMP      r4,#1
000020  d002              BEQ      |L3.40|
000022  2c04              CMP      r4,#4
000024  d109              BNE      |L3.58|
000026  e005              B        |L3.52|
                  |L3.40|
;;;112                {
;;;113                    case LORA_RECV_BIT://接收到服务端命令                 
;;;114                        processCommand(g_tLora.buf, g_tLora.len);
000028  480a              LDR      r0,|L3.84|
00002a  7801              LDRB     r1,[r0,#0]  ; g_tLora
00002c  1c40              ADDS     r0,r0,#1
00002e  f7fffffe          BL       processCommand
;;;115                        break; 
000032  e003              B        |L3.60|
                  |L3.52|
;;;116                    
;;;117                    case REAET_LEVEL_BIT://复位能级
;;;118                        //复位能级
;;;119                        ResetDetector();
000034  f7fffffe          BL       ResetDetector
;;;120                        break;
000038  e000              B        |L3.60|
                  |L3.58|
;;;121                    
;;;122                    default:
;;;123                        break;
00003a  bf00              NOP      
                  |L3.60|
00003c  bf00              NOP                            ;115
                  |L3.62|
;;;124                }//end of switch
;;;125                
;;;126            }//end of if
;;;127            
;;;128            //判断标志位超时后执行的操作
;;;129            //向看门狗任务发送事件标志位
;;;130            os_evt_set(TASK_NET_BIT, HandleTaskStart);//post
00003e  4806              LDR      r0,|L3.88|
000040  6801              LDR      r1,[r0,#0]  ; HandleTaskStart
000042  2002              MOVS     r0,#2
000044  f8dfc014          LDR      r12,|L3.92|
000048  df00              SVC      #0x0
                  |L3.74|
00004a  e7db              B        |L3.4|
;;;131        }  
;;;132    }
;;;133    
                          ENDP

                  |L3.76|
                          DCD      rt_evt_wait
                  |L3.80|
                          DCD      rt_evt_get
                  |L3.84|
                          DCD      g_tLora
                  |L3.88|
                          DCD      HandleTaskStart
                  |L3.92|
                          DCD      rt_evt_set

                          AREA ||i.AppTaskStart||, CODE, READONLY, ALIGN=2

                  AppTaskStart PROC
;;;63     
;;;64     __task void AppTaskStart(void)
000000  f8dfc034          LDR      r12,|L4.56|
;;;65     {  
;;;66         uint16_t ret_flags;
;;;67         /* 获取启动任务的句柄 */
;;;68     	HandleTaskStart = os_tsk_self();
000004  df00              SVC      #0x0
000006  490d              LDR      r1,|L4.60|
000008  6008              STR      r0,[r1,#0]  ; HandleTaskStart
;;;69         //通过start任务间接地创建其他任务
;;;70     	AppTaskCreate();
00000a  f7fffffe          BL       AppTaskCreate
;;;71     	
;;;72         while(1)
00000e  e011              B        |L4.52|
                  |L4.16|
;;;73         {        
;;;74             //采用或等待方式;退出前bit位被清除
;;;75             if(os_evt_wait_or(BIT_ALL, 0xFFFF) == OS_R_EVT)
000010  2200              MOVS     r2,#0
000012  f64f71ff          MOV      r1,#0xffff
000016  20ff              MOVS     r0,#0xff
000018  f8dfc024          LDR      r12,|L4.64|
00001c  df00              SVC      #0x0
00001e  2802              CMP      r0,#2
000020  d108              BNE      |L4.52|
;;;76             {
;;;77                 ret_flags = os_evt_get();//返回值为对应的bit
000022  f8dfc020          LDR      r12,|L4.68|
000026  df00              SVC      #0x0
000028  4604              MOV      r4,r0
;;;78                 
;;;79                 switch(ret_flags)
00002a  2c02              CMP      r4,#2
00002c  d100              BNE      |L4.48|
;;;80                 {
;;;81                     case TASK_NET_BIT://接收到任务事件标志位                 
;;;82                         //test
;;;83                         //IWDG_Feed();//喂狗
;;;84                         break;                   
00002e  e000              B        |L4.50|
                  |L4.48|
;;;85                     
;;;86                     default:
;;;87                         break;
000030  bf00              NOP      
                  |L4.50|
000032  bf00              NOP                            ;84
                  |L4.52|
000034  e7ec              B        |L4.16|
;;;88                 }//end of switch
;;;89                 
;;;90             }//end of if
;;;91         }
;;;92     }
;;;93     
                          ENDP

000036  0000              DCW      0x0000
                  |L4.56|
                          DCD      rt_tsk_self
                  |L4.60|
                          DCD      HandleTaskStart
                  |L4.64|
                          DCD      rt_evt_wait
                  |L4.68|
                          DCD      rt_evt_get

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;41     */
;;;42     int main(void) 
000000  f7fffffe          BL       bsp_Init
;;;43     {	
;;;44     	/* 初始化外设 */
;;;45     	bsp_Init();
;;;46         
;;;47     	/* 创建启动任务 */
;;;48      	os_sys_init_user(AppTaskStart,             /* 任务函数 */
000004  f7fffffe          BL       os_set_env
000008  4a03              LDR      r2,|L5.24|
00000a  4904              LDR      r1,|L5.28|
00000c  4804              LDR      r0,|L5.32|
00000e  f8dfc014          LDR      r12,|L5.36|
000012  df00              SVC      #0x0
;;;49     	                  4,                        /* 任务优先级 */
;;;50     	                  &AppTaskStartStk,         /* 任务栈 */
;;;51     	                  sizeof(AppTaskStartStk)); /* 任务栈大小，单位字节数 */
;;;52     	while(1);
000014  bf00              NOP      
                  |L5.22|
000016  e7fe              B        |L5.22|
;;;53     }
;;;54     
                          ENDP

                  |L5.24|
                          DCD      AppTaskStartStk
                  |L5.28|
                          DCD      0x00020004
                  |L5.32|
                          DCD      AppTaskStart
                  |L5.36|
                          DCD      rt_sys_init

                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  AppTaskStartStk
                          %        512
                  AppTaskNetStk
                          %        512

                          AREA ||.data||, DATA, ALIGN=2

                  HandleTaskStart
                          DCD      0x00000000
                  HandleTaskNet
                          DCD      0x00000000
                  HandleTaskMonitor
                          DCD      0x00000000
                  OneTimerA
                          DCD      0x00000000
                  g_tRunInfo
000010  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\main.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_main_c_65e498f6____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_65e498f6____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_main_c_65e498f6____REVSH|
#line 128
|__asm___6_main_c_65e498f6____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
