; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\key.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\key.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\RTX\inc -I..\..\RTX\portable -I..\..\User\CpuFlash -I..\..\User\CRC8_16 -I..\..\User\DS1302 -I..\..\User\DWT -I..\..\User\IIC -I..\..\User\IWDG -I..\..\User\Key -I..\..\User\Led -I..\..\User\Net -I..\..\User\Protocal -I..\..\User\Reader -I..\..\User\SPI -I..\..\User\Timer -I..\..\User\Uart -I..\..\User\Param -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\key.crf ..\..\User\Key\key.c]
                          THUMB

                          AREA ||i.KEY_Scan||, CODE, READONLY, ALIGN=2

                  KEY_Scan PROC
;;;23     
;;;24     void KEY_Scan()
000000  b510              PUSH     {r4,lr}
;;;25     {	   
;;;26         static uint8_t num0 = 0;
;;;27         static uint8_t num1 = 0;
;;;28         
;;;29         if(READ_KEY0==0)//KEY0 high default,0表示低电平
000002  f44f6100          MOV      r1,#0x800
000006  4816              LDR      r0,|L1.96|
000008  f7fffffe          BL       GPIO_ReadInputDataBit
00000c  b980              CBNZ     r0,|L1.48|
;;;30         {
;;;31             //先用static，被每100ms扫描一次，第二次再确认按下
;;;32     	    //发送事件标志
;;;33             num0++;
00000e  4815              LDR      r0,|L1.100|
000010  7800              LDRB     r0,[r0,#0]  ; num0
000012  1c40              ADDS     r0,r0,#1
000014  4913              LDR      r1,|L1.100|
000016  7008              STRB     r0,[r1,#0]
;;;34             if(num0 == 2)
000018  4608              MOV      r0,r1
00001a  7800              LDRB     r0,[r0,#0]  ; num0
00001c  2802              CMP      r0,#2
00001e  d107              BNE      |L1.48|
;;;35             {
;;;36                 num0 = 0; 
000020  2000              MOVS     r0,#0
000022  7008              STRB     r0,[r1,#0]
;;;37                 os_evt_set(BUTTON_A_BIT, HandleTaskButton);//post
000024  4810              LDR      r0,|L1.104|
000026  6801              LDR      r1,[r0,#0]  ; HandleTaskButton
000028  2002              MOVS     r0,#2
00002a  f8dfc040          LDR      r12,|L1.108|
00002e  df00              SVC      #0x0
                  |L1.48|
;;;38             }
;;;39         } 
;;;40         
;;;41         if(READ_KEY1==0)
000030  f44f5180          MOV      r1,#0x1000
000034  480a              LDR      r0,|L1.96|
000036  f7fffffe          BL       GPIO_ReadInputDataBit
00003a  b980              CBNZ     r0,|L1.94|
;;;42         {
;;;43             num1++;
00003c  480c              LDR      r0,|L1.112|
00003e  7800              LDRB     r0,[r0,#0]  ; num1
000040  1c40              ADDS     r0,r0,#1
000042  490b              LDR      r1,|L1.112|
000044  7008              STRB     r0,[r1,#0]
;;;44             if(num1 == 2)
000046  4608              MOV      r0,r1
000048  7800              LDRB     r0,[r0,#0]  ; num1
00004a  2802              CMP      r0,#2
00004c  d107              BNE      |L1.94|
;;;45             {
;;;46                 num1 = 0;
00004e  2000              MOVS     r0,#0
000050  7008              STRB     r0,[r1,#0]
;;;47                 os_evt_set(BUTTON_B_BIT, HandleTaskButton);//post
000052  4805              LDR      r0,|L1.104|
000054  6801              LDR      r1,[r0,#0]  ; HandleTaskButton
000056  2004              MOVS     r0,#4
000058  f8dfc010          LDR      r12,|L1.108|
00005c  df00              SVC      #0x0
                  |L1.94|
;;;48             }  
;;;49         }
;;;50     
;;;51     }
00005e  bd10              POP      {r4,pc}
                          ENDP

                  |L1.96|
                          DCD      0x40010800
                  |L1.100|
                          DCD      num0
                  |L1.104|
                          DCD      HandleTaskButton
                  |L1.108|
                          DCD      rt_evt_set
                  |L1.112|
                          DCD      num1

                          AREA ||i.bsp_InitKey||, CODE, READONLY, ALIGN=2

                  bsp_InitKey PROC
;;;11     //按键初始化函数
;;;12     void bsp_InitKey(void) //IO初始化
000000  b508              PUSH     {r3,lr}
;;;13     {   
;;;14      	GPIO_InitTypeDef GPIO_InitStructure;
;;;15      	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);//使能PORTA时钟
000002  2101              MOVS     r1,#1
000004  2004              MOVS     r0,#4
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;16     	
;;;17     	GPIO_InitStructure.GPIO_Pin  = KEY0_PIN | KEY1_PIN;
00000a  f44f50c0          MOV      r0,#0x1800
00000e  f8ad0000          STRH     r0,[sp,#0]
;;;18         GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000012  2003              MOVS     r0,#3
000014  f88d0002          STRB     r0,[sp,#2]
;;;19     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000018  2004              MOVS     r0,#4
00001a  f88d0003          STRB     r0,[sp,#3]
;;;20     	GPIO_Init(KEY_PORT, &GPIO_InitStructure);
00001e  4669              MOV      r1,sp
000020  4801              LDR      r0,|L2.40|
000022  f7fffffe          BL       GPIO_Init
;;;21     
;;;22     }
000026  bd08              POP      {r3,pc}
;;;23     
                          ENDP

                  |L2.40|
                          DCD      0x40010800

                          AREA ||.data||, DATA, ALIGN=0

                  num0
000000  00                DCB      0x00
                  num1
000001  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\Key\\key.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___5_key_c_dc6aca1d____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_key_c_dc6aca1d____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___5_key_c_dc6aca1d____REVSH|
#line 128
|__asm___5_key_c_dc6aca1d____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
