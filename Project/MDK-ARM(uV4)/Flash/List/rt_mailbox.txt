; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\rt_mailbox.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\rt_mailbox.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\RTX\inc -I..\..\RTX\portable -I..\..\User\CpuFlash -I..\..\User\CRC8_16 -I..\..\User\DS1302 -I..\..\User\DWT -I..\..\User\IIC -I..\..\User\IWDG -I..\..\User\Key -I..\..\User\Led -I..\..\User\Net -I..\..\User\Protocal -I..\..\User\Reader -I..\..\User\SPI -I..\..\User\Timer -I..\..\User\Uart -I..\..\User\Param -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\rt_mailbox.crf ..\..\RTX\src\rt_Mailbox.c]
                          THUMB

                          AREA ||i.isr_mbx_receive||, CODE, READONLY, ALIGN=1

                  isr_mbx_receive PROC
;;;166    
;;;167    OS_RESULT isr_mbx_receive (OS_ID mailbox, void **message) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;168      /* Receive a message in the interrupt function. The interrupt function   */
;;;169      /* should not wait for a message since this would block the rtx os.      */
;;;170      P_MCB p_MCB = mailbox;
000006  462c              MOV      r4,r5
;;;171    
;;;172      if (p_MCB->count) {
000008  89a0              LDRH     r0,[r4,#0xc]
00000a  b338              CBZ      r0,|L1.92|
;;;173        /* A message is available in the fifo buffer. */
;;;174        *message = p_MCB->msg[p_MCB->last];
00000c  8961              LDRH     r1,[r4,#0xa]
00000e  f1040010          ADD      r0,r4,#0x10
000012  f8500021          LDR      r0,[r0,r1,LSL #2]
000016  6030              STR      r0,[r6,#0]
;;;175        if (p_MCB->isr_st == 1) {
000018  7860              LDRB     r0,[r4,#1]
00001a  2801              CMP      r0,#1
00001c  d107              BNE      |L1.46|
;;;176          /* A task is locked waiting to send message */
;;;177          p_MCB->isr_st = 2;
00001e  2002              MOVS     r0,#2
000020  7060              STRB     r0,[r4,#1]
;;;178          rt_psq_enq (p_MCB, 0);
000022  2100              MOVS     r1,#0
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       rt_psq_enq
;;;179          rt_psh_req ();
00002a  f7fffffe          BL       rt_psh_req
                  |L1.46|
;;;180        }
;;;181        rt_dec (&p_MCB->count);
00002e  bf00              NOP      
                  |L1.48|
000030  f104000c          ADD      r0,r4,#0xc
000034  e8d00f5f          LDREXH   r0,[r0]
000038  1e40              SUBS     r0,r0,#1
00003a  f104010c          ADD      r1,r4,#0xc
00003e  e8c10f52          STREXH   r2,r0,[r1]
000042  2a00              CMP      r2,#0
000044  d1f4              BNE      |L1.48|
;;;182        if (++p_MCB->last == p_MCB->size) {
000046  8960              LDRH     r0,[r4,#0xa]
000048  1c40              ADDS     r0,r0,#1
00004a  b280              UXTH     r0,r0
00004c  8160              STRH     r0,[r4,#0xa]
00004e  89e1              LDRH     r1,[r4,#0xe]
000050  4288              CMP      r0,r1
000052  d101              BNE      |L1.88|
;;;183          p_MCB->last = 0;
000054  2000              MOVS     r0,#0
000056  8160              STRH     r0,[r4,#0xa]
                  |L1.88|
;;;184        }
;;;185        return (OS_R_MBX);
000058  2004              MOVS     r0,#4
                  |L1.90|
;;;186      }
;;;187      return (OS_R_OK);
;;;188    }
00005a  bd70              POP      {r4-r6,pc}
                  |L1.92|
00005c  2000              MOVS     r0,#0                 ;187
00005e  e7fc              B        |L1.90|
;;;189    
                          ENDP


                          AREA ||i.isr_mbx_send||, CODE, READONLY, ALIGN=1

                  isr_mbx_send PROC
;;;155    
;;;156    void isr_mbx_send (OS_ID mailbox, void *p_msg) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;157      /* Same function as "os_mbx_send", but to be called by ISRs. */
;;;158      P_MCB p_MCB = mailbox;
000006  4626              MOV      r6,r4
;;;159    
;;;160      rt_psq_enq (p_MCB, (U32)p_msg);
000008  4629              MOV      r1,r5
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       rt_psq_enq
;;;161      rt_psh_req ();
000010  f7fffffe          BL       rt_psh_req
;;;162    }
000014  bd70              POP      {r4-r6,pc}
;;;163    
                          ENDP


                          AREA ||i.rt_mbx_check||, CODE, READONLY, ALIGN=1

                  rt_mbx_check PROC
;;;144    
;;;145    OS_RESULT rt_mbx_check (OS_ID mailbox) {
000000  4601              MOV      r1,r0
;;;146      /* Check for free space in a mailbox. Returns the number of messages     */
;;;147      /* that can be stored to a mailbox. It returns 0 when mailbox is full.   */
;;;148      P_MCB p_MCB = mailbox;
000002  460a              MOV      r2,r1
;;;149    
;;;150      return (p_MCB->size - p_MCB->count);
000004  89d0              LDRH     r0,[r2,#0xe]
000006  8993              LDRH     r3,[r2,#0xc]
000008  1ac0              SUBS     r0,r0,r3
;;;151    }
00000a  4770              BX       lr
;;;152    
                          ENDP


                          AREA ||i.rt_mbx_init||, CODE, READONLY, ALIGN=1

                  rt_mbx_init PROC
;;;27     
;;;28     void rt_mbx_init (OS_ID mailbox, U16 mbx_size) {
000000  460a              MOV      r2,r1
;;;29       /* Initialize a mailbox */
;;;30       P_MCB p_MCB = mailbox;
000002  4601              MOV      r1,r0
;;;31     
;;;32       p_MCB->cb_type = MCB;
000004  2301              MOVS     r3,#1
000006  700b              STRB     r3,[r1,#0]
;;;33       p_MCB->isr_st  = 0;
000008  2300              MOVS     r3,#0
00000a  704b              STRB     r3,[r1,#1]
;;;34       p_MCB->p_lnk   = NULL;
00000c  604b              STR      r3,[r1,#4]
;;;35       p_MCB->first   = 0;
00000e  810b              STRH     r3,[r1,#8]
;;;36       p_MCB->last    = 0;
000010  814b              STRH     r3,[r1,#0xa]
;;;37       p_MCB->count   = 0;
000012  818b              STRH     r3,[r1,#0xc]
;;;38       p_MCB->size    = (mbx_size + sizeof(void *) - sizeof(struct OS_MCB)) /
000014  f1a20310          SUB      r3,r2,#0x10
000018  f3c3038f          UBFX     r3,r3,#2,#16
00001c  81cb              STRH     r3,[r1,#0xe]
;;;39                                                          (U32)sizeof (void *);
;;;40     }
00001e  4770              BX       lr
;;;41     
                          ENDP


                          AREA ||i.rt_mbx_psh||, CODE, READONLY, ALIGN=2

                  rt_mbx_psh PROC
;;;192    
;;;193    void rt_mbx_psh (P_MCB p_CB, void *p_msg) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;194      /* Store the message to the mailbox queue or pass it to task directly. */
;;;195      P_TCB p_TCB;
;;;196    
;;;197      /* Check if this was an 'isr_mbx_receive ()' post service request.   */
;;;198      if (p_CB->p_lnk != NULL && p_CB->isr_st == 2) {
000006  6860              LDR      r0,[r4,#4]
000008  b338              CBZ      r0,|L5.90|
00000a  7860              LDRB     r0,[r4,#1]
00000c  2802              CMP      r0,#2
00000e  d124              BNE      |L5.90|
;;;199        /* A task is waiting to send message, remove it from the waiting list. */
;;;200        p_CB->isr_st = 0;
000010  2000              MOVS     r0,#0
000012  7060              STRB     r0,[r4,#1]
;;;201        p_TCB = rt_get_first ((P_XCB)p_CB);
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       rt_get_first
00001a  4605              MOV      r5,r0
;;;202        p_TCB->ret_val = OS_R_OK;
00001c  2000              MOVS     r0,#0
00001e  f8850025          STRB     r0,[r5,#0x25]
;;;203        /* Store the message to the mailbox queue. */
;;;204        p_CB->msg[p_CB->first] = p_TCB->msg;
000022  8922              LDRH     r2,[r4,#8]
000024  f1040010          ADD      r0,r4,#0x10
000028  69e9              LDR      r1,[r5,#0x1c]
00002a  f8401022          STR      r1,[r0,r2,LSL #2]
;;;205        rt_inc (&p_CB->count);
00002e  bf00              NOP      
                  |L5.48|
000030  f104000c          ADD      r0,r4,#0xc
000034  e8d00f5f          LDREXH   r0,[r0]
000038  1c40              ADDS     r0,r0,#1
00003a  f104010c          ADD      r1,r4,#0xc
00003e  e8c10f52          STREXH   r2,r0,[r1]
000042  2a00              CMP      r2,#0
000044  d1f4              BNE      |L5.48|
;;;206        if (++p_CB->first == p_CB->size) {
000046  8920              LDRH     r0,[r4,#8]
000048  1c40              ADDS     r0,r0,#1
00004a  b280              UXTH     r0,r0
00004c  8120              STRH     r0,[r4,#8]
00004e  89e1              LDRH     r1,[r4,#0xe]
000050  4288              CMP      r0,r1
000052  d101              BNE      |L5.88|
;;;207          p_CB->first = 0;
000054  2000              MOVS     r0,#0
000056  8120              STRH     r0,[r4,#8]
                  |L5.88|
;;;208        }
;;;209        goto rdy;
000058  e00d              B        |L5.118|
                  |L5.90|
;;;210      }
;;;211      /* A task is waiting for message, pass the message to task directly. */
;;;212      if (p_CB->p_lnk != NULL && p_CB->count == 0) {
00005a  6860              LDR      r0,[r4,#4]
00005c  b1a8              CBZ      r0,|L5.138|
00005e  89a0              LDRH     r0,[r4,#0xc]
000060  b998              CBNZ     r0,|L5.138|
;;;213        p_TCB = rt_get_first ((P_XCB)p_CB);
000062  4620              MOV      r0,r4
000064  f7fffffe          BL       rt_get_first
000068  4605              MOV      r5,r0
;;;214        *p_TCB->msg = p_msg;
00006a  69e8              LDR      r0,[r5,#0x1c]
00006c  6006              STR      r6,[r0,#0]
;;;215        p_TCB->ret_val = OS_R_MBX;
00006e  2004              MOVS     r0,#4
000070  f8850025          STRB     r0,[r5,#0x25]
;;;216    rdy:p_TCB->state = READY;
000074  bf00              NOP      
                  |L5.118|
000076  2001              MOVS     r0,#1
000078  7068              STRB     r0,[r5,#1]
;;;217        rt_rmv_dly (p_TCB);
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       rt_rmv_dly
;;;218        rt_put_prio (&os_rdy, p_TCB);
000080  4629              MOV      r1,r5
000082  4813              LDR      r0,|L5.208|
000084  f7fffffe          BL       rt_put_prio
000088  e021              B        |L5.206|
                  |L5.138|
;;;219      }
;;;220      else {
;;;221        /* No task is waiting for message, store the message to the mailbox queue.*/
;;;222        if (p_CB->count < p_CB->size) {
00008a  89a0              LDRH     r0,[r4,#0xc]
00008c  89e1              LDRH     r1,[r4,#0xe]
00008e  4288              CMP      r0,r1
000090  da1a              BGE      |L5.200|
;;;223          p_CB->msg[p_CB->first] = p_msg;
000092  8921              LDRH     r1,[r4,#8]
000094  f1040010          ADD      r0,r4,#0x10
000098  f8406021          STR      r6,[r0,r1,LSL #2]
;;;224          rt_inc (&p_CB->count);
00009c  bf00              NOP      
                  |L5.158|
00009e  f104000c          ADD      r0,r4,#0xc
0000a2  e8d00f5f          LDREXH   r0,[r0]
0000a6  1c40              ADDS     r0,r0,#1
0000a8  f104010c          ADD      r1,r4,#0xc
0000ac  e8c10f52          STREXH   r2,r0,[r1]
0000b0  2a00              CMP      r2,#0
0000b2  d1f4              BNE      |L5.158|
;;;225          if (++p_CB->first == p_CB->size) {
0000b4  8920              LDRH     r0,[r4,#8]
0000b6  1c40              ADDS     r0,r0,#1
0000b8  b280              UXTH     r0,r0
0000ba  8120              STRH     r0,[r4,#8]
0000bc  89e1              LDRH     r1,[r4,#0xe]
0000be  4288              CMP      r0,r1
0000c0  d105              BNE      |L5.206|
;;;226            p_CB->first = 0;
0000c2  2000              MOVS     r0,#0
0000c4  8120              STRH     r0,[r4,#8]
0000c6  e002              B        |L5.206|
                  |L5.200|
;;;227          }
;;;228        }
;;;229        else {
;;;230          os_error (OS_ERR_MBX_OVF);
0000c8  2003              MOVS     r0,#3
0000ca  f7fffffe          BL       os_error
                  |L5.206|
;;;231        }
;;;232      }
;;;233    }
0000ce  bd70              POP      {r4-r6,pc}
;;;234    
                          ENDP

                  |L5.208|
                          DCD      os_rdy

                          AREA ||i.rt_mbx_send||, CODE, READONLY, ALIGN=2

                  rt_mbx_send PROC
;;;44     
;;;45     OS_RESULT rt_mbx_send (OS_ID mailbox, void *p_msg, U16 timeout) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4690              MOV      r8,r2
;;;46       /* Send message to a mailbox */
;;;47       P_MCB p_MCB = mailbox;
00000a  463c              MOV      r4,r7
;;;48       P_TCB p_TCB;
;;;49     
;;;50       if (p_MCB->p_lnk != NULL && p_MCB->count == 0) {
00000c  6860              LDR      r0,[r4,#4]
00000e  b1b0              CBZ      r0,|L6.62|
000010  89a0              LDRH     r0,[r4,#0xc]
000012  b9a0              CBNZ     r0,|L6.62|
;;;51         /* A task is waiting for message */
;;;52         p_TCB = rt_get_first ((P_XCB)p_MCB);
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       rt_get_first
00001a  4606              MOV      r6,r0
;;;53         *p_TCB->msg    = p_msg;
00001c  69f0              LDR      r0,[r6,#0x1c]
00001e  6005              STR      r5,[r0,#0]
;;;54         p_TCB->ret_val = OS_R_MBX;
000020  2004              MOVS     r0,#4
000022  f8860025          STRB     r0,[r6,#0x25]
;;;55         rt_rmv_dly (p_TCB);
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       rt_rmv_dly
;;;56         rt_dispatch (p_TCB);
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       rt_dispatch
;;;57         os_tsk.run->ret_val = OS_R_OK;
000032  2000              MOVS     r0,#0
000034  4923              LDR      r1,|L6.196|
000036  6809              LDR      r1,[r1,#0]  ; os_tsk
000038  f8810025          STRB     r0,[r1,#0x25]
00003c  e040              B        |L6.192|
                  |L6.62|
;;;58       }
;;;59       else {
;;;60         /* Store message in mailbox queue */
;;;61         if (p_MCB->count == p_MCB->size) {
00003e  89a0              LDRH     r0,[r4,#0xc]
000040  89e1              LDRH     r1,[r4,#0xe]
000042  4288              CMP      r0,r1
000044  d122              BNE      |L6.140|
;;;62           /* No free message entry, wait for one. If message queue is full, */
;;;63           /* then no task is waiting for message. The 'p_MCB->p_lnk' list   */
;;;64           /* pointer can now be reused for send message waits task list.    */
;;;65           if (timeout == 0) {
000046  f1b80f00          CMP      r8,#0
00004a  d102              BNE      |L6.82|
;;;66             return (OS_R_TMO);
00004c  2001              MOVS     r0,#1
                  |L6.78|
;;;67           }
;;;68           if (p_MCB->p_lnk != NULL) {
;;;69             rt_put_prio ((P_XCB)p_MCB, os_tsk.run);
;;;70           }
;;;71           else {
;;;72             p_MCB->p_lnk = os_tsk.run;
;;;73             os_tsk.run->p_lnk  = NULL;
;;;74             os_tsk.run->p_rlnk = (P_TCB)p_MCB;
;;;75             /* Signal the 'isr_mbx_receive ()' that the task is waiting */
;;;76             /* to send a message */
;;;77             p_MCB->isr_st = 1;
;;;78           }
;;;79           os_tsk.run->msg = p_msg;
;;;80           rt_block (timeout, WAIT_MBX);
;;;81           return (OS_R_TMO);
;;;82         }
;;;83         /* Yes, there is a free entry in a mailbox. */
;;;84         p_MCB->msg[p_MCB->first] = p_msg;
;;;85         rt_inc (&p_MCB->count);
;;;86         if (++p_MCB->first == p_MCB->size) {
;;;87           p_MCB->first = 0;
;;;88         }
;;;89       }
;;;90       return (OS_R_OK);
;;;91     }
00004e  e8bd81f0          POP      {r4-r8,pc}
                  |L6.82|
000052  6860              LDR      r0,[r4,#4]            ;68
000054  b128              CBZ      r0,|L6.98|
000056  481b              LDR      r0,|L6.196|
000058  6801              LDR      r1,[r0,#0]            ;69  ; os_tsk
00005a  4620              MOV      r0,r4                 ;69
00005c  f7fffffe          BL       rt_put_prio
000060  e00b              B        |L6.122|
                  |L6.98|
000062  4818              LDR      r0,|L6.196|
000064  6800              LDR      r0,[r0,#0]            ;72  ; os_tsk
000066  6060              STR      r0,[r4,#4]            ;72
000068  2000              MOVS     r0,#0                 ;73
00006a  4916              LDR      r1,|L6.196|
00006c  6809              LDR      r1,[r1,#0]            ;73  ; os_tsk
00006e  6048              STR      r0,[r1,#4]            ;73
000070  4814              LDR      r0,|L6.196|
000072  6800              LDR      r0,[r0,#0]            ;74  ; os_tsk
000074  6084              STR      r4,[r0,#8]            ;74
000076  2001              MOVS     r0,#1                 ;77
000078  7060              STRB     r0,[r4,#1]            ;77
                  |L6.122|
00007a  4812              LDR      r0,|L6.196|
00007c  6800              LDR      r0,[r0,#0]            ;79  ; os_tsk
00007e  61c5              STR      r5,[r0,#0x1c]         ;79
000080  2108              MOVS     r1,#8                 ;80
000082  4640              MOV      r0,r8                 ;80
000084  f7fffffe          BL       rt_block
000088  2001              MOVS     r0,#1                 ;81
00008a  e7e0              B        |L6.78|
                  |L6.140|
00008c  8921              LDRH     r1,[r4,#8]            ;84
00008e  f1040010          ADD      r0,r4,#0x10           ;84
000092  f8405021          STR      r5,[r0,r1,LSL #2]     ;84
000096  bf00              NOP                            ;85
                  |L6.152|
000098  f104000c          ADD      r0,r4,#0xc            ;85
00009c  e8d00f5f          LDREXH   r0,[r0]               ;85
0000a0  1c40              ADDS     r0,r0,#1              ;85
0000a2  f104010c          ADD      r1,r4,#0xc            ;85
0000a6  e8c10f52          STREXH   r2,r0,[r1]            ;85
0000aa  2a00              CMP      r2,#0                 ;85
0000ac  d1f4              BNE      |L6.152|
0000ae  8920              LDRH     r0,[r4,#8]            ;86
0000b0  1c40              ADDS     r0,r0,#1              ;86
0000b2  b280              UXTH     r0,r0                 ;86
0000b4  8120              STRH     r0,[r4,#8]            ;86
0000b6  89e1              LDRH     r1,[r4,#0xe]          ;86
0000b8  4288              CMP      r0,r1                 ;86
0000ba  d101              BNE      |L6.192|
0000bc  2000              MOVS     r0,#0                 ;87
0000be  8120              STRH     r0,[r4,#8]            ;87
                  |L6.192|
0000c0  2000              MOVS     r0,#0                 ;90
0000c2  e7c4              B        |L6.78|
;;;92     
                          ENDP

                  |L6.196|
                          DCD      os_tsk

                          AREA ||i.rt_mbx_wait||, CODE, READONLY, ALIGN=2

                  rt_mbx_wait PROC
;;;95     
;;;96     OS_RESULT rt_mbx_wait (OS_ID mailbox, void **message, U16 timeout) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
;;;97       /* Receive a message; possibly wait for it */
;;;98       P_MCB p_MCB = mailbox;
00000a  4634              MOV      r4,r6
;;;99       P_TCB p_TCB;
;;;100    
;;;101      /* If a message is available in the fifo buffer */
;;;102      /* remove it from the fifo buffer and return. */
;;;103      if (p_MCB->count) {
00000c  89a0              LDRH     r0,[r4,#0xc]
00000e  2800              CMP      r0,#0
000010  d041              BEQ      |L7.150|
;;;104        *message = p_MCB->msg[p_MCB->last];
000012  8961              LDRH     r1,[r4,#0xa]
000014  f1040010          ADD      r0,r4,#0x10
000018  f8500021          LDR      r0,[r0,r1,LSL #2]
00001c  6038              STR      r0,[r7,#0]
;;;105        if (++p_MCB->last == p_MCB->size) {
00001e  8960              LDRH     r0,[r4,#0xa]
000020  1c40              ADDS     r0,r0,#1
000022  b280              UXTH     r0,r0
000024  8160              STRH     r0,[r4,#0xa]
000026  89e1              LDRH     r1,[r4,#0xe]
000028  4288              CMP      r0,r1
00002a  d101              BNE      |L7.48|
;;;106          p_MCB->last = 0;
00002c  2000              MOVS     r0,#0
00002e  8160              STRH     r0,[r4,#0xa]
                  |L7.48|
;;;107        }
;;;108        if (p_MCB->p_lnk != NULL) {
000030  6860              LDR      r0,[r4,#4]
000032  b308              CBZ      r0,|L7.120|
;;;109          /* A task is waiting to send message */
;;;110          p_TCB = rt_get_first ((P_XCB)p_MCB);
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       rt_get_first
00003a  4605              MOV      r5,r0
;;;111          p_TCB->ret_val = OS_R_OK;
00003c  2000              MOVS     r0,#0
00003e  f8850025          STRB     r0,[r5,#0x25]
;;;112          p_MCB->msg[p_MCB->first] = p_TCB->msg;
000042  8922              LDRH     r2,[r4,#8]
000044  f1040010          ADD      r0,r4,#0x10
000048  69e9              LDR      r1,[r5,#0x1c]
00004a  f8401022          STR      r1,[r0,r2,LSL #2]
;;;113          if (++p_MCB->first == p_MCB->size) {
00004e  8920              LDRH     r0,[r4,#8]
000050  1c40              ADDS     r0,r0,#1
000052  b280              UXTH     r0,r0
000054  8120              STRH     r0,[r4,#8]
000056  89e1              LDRH     r1,[r4,#0xe]
000058  4288              CMP      r0,r1
00005a  d101              BNE      |L7.96|
;;;114            p_MCB->first = 0;
00005c  2000              MOVS     r0,#0
00005e  8120              STRH     r0,[r4,#8]
                  |L7.96|
;;;115          }
;;;116          rt_rmv_dly (p_TCB);
000060  4628              MOV      r0,r5
000062  f7fffffe          BL       rt_rmv_dly
;;;117          rt_dispatch (p_TCB);
000066  4628              MOV      r0,r5
000068  f7fffffe          BL       rt_dispatch
;;;118          os_tsk.run->ret_val = OS_R_OK;
00006c  2000              MOVS     r0,#0
00006e  491a              LDR      r1,|L7.216|
000070  6809              LDR      r1,[r1,#0]  ; os_tsk
000072  f8810025          STRB     r0,[r1,#0x25]
000076  e00b              B        |L7.144|
                  |L7.120|
;;;119        }
;;;120        else {
;;;121          rt_dec (&p_MCB->count);
000078  bf00              NOP      
                  |L7.122|
00007a  f104000c          ADD      r0,r4,#0xc
00007e  e8d00f5f          LDREXH   r0,[r0]
000082  1e40              SUBS     r0,r0,#1
000084  f104010c          ADD      r1,r4,#0xc
000088  e8c10f52          STREXH   r2,r0,[r1]
00008c  2a00              CMP      r2,#0
00008e  d1f4              BNE      |L7.122|
                  |L7.144|
;;;122        }
;;;123        return (OS_R_OK);
000090  2000              MOVS     r0,#0
                  |L7.146|
;;;124      }
;;;125      /* No message available: wait for one */
;;;126      if (timeout == 0) {
;;;127        return (OS_R_TMO);
;;;128      }
;;;129      if (p_MCB->p_lnk != NULL) {
;;;130        rt_put_prio ((P_XCB)p_MCB, os_tsk.run);
;;;131      }
;;;132      else {
;;;133        p_MCB->p_lnk = os_tsk.run;
;;;134        os_tsk.run->p_lnk = NULL;
;;;135        os_tsk.run->p_rlnk = (P_TCB)p_MCB;
;;;136      }
;;;137      rt_block(timeout, WAIT_MBX);
;;;138      os_tsk.run->msg = message;
;;;139      return (OS_R_TMO);
;;;140    }
000092  e8bd81f0          POP      {r4-r8,pc}
                  |L7.150|
000096  f1b80f00          CMP      r8,#0                 ;126
00009a  d101              BNE      |L7.160|
00009c  2001              MOVS     r0,#1                 ;127
00009e  e7f8              B        |L7.146|
                  |L7.160|
0000a0  6860              LDR      r0,[r4,#4]            ;129
0000a2  b128              CBZ      r0,|L7.176|
0000a4  480c              LDR      r0,|L7.216|
0000a6  6801              LDR      r1,[r0,#0]            ;130  ; os_tsk
0000a8  4620              MOV      r0,r4                 ;130
0000aa  f7fffffe          BL       rt_put_prio
0000ae  e009              B        |L7.196|
                  |L7.176|
0000b0  4809              LDR      r0,|L7.216|
0000b2  6800              LDR      r0,[r0,#0]            ;133  ; os_tsk
0000b4  6060              STR      r0,[r4,#4]            ;133
0000b6  2000              MOVS     r0,#0                 ;134
0000b8  4907              LDR      r1,|L7.216|
0000ba  6809              LDR      r1,[r1,#0]            ;134  ; os_tsk
0000bc  6048              STR      r0,[r1,#4]            ;134
0000be  4806              LDR      r0,|L7.216|
0000c0  6800              LDR      r0,[r0,#0]            ;135  ; os_tsk
0000c2  6084              STR      r4,[r0,#8]            ;135
                  |L7.196|
0000c4  2108              MOVS     r1,#8                 ;137
0000c6  4640              MOV      r0,r8                 ;137
0000c8  f7fffffe          BL       rt_block
0000cc  4802              LDR      r0,|L7.216|
0000ce  6800              LDR      r0,[r0,#0]            ;138  ; os_tsk
0000d0  61c7              STR      r7,[r0,#0x1c]         ;138
0000d2  2001              MOVS     r0,#1                 ;139
0000d4  e7dd              B        |L7.146|
;;;141    
                          ENDP

0000d6  0000              DCW      0x0000
                  |L7.216|
                          DCD      os_tsk
