; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_spi_bus.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_spi_bus.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\RTX\inc -I..\..\RTX\portable -I..\..\User\CpuFlash -I..\..\User\CRC8_16 -I..\..\User\DS1302 -I..\..\User\DWT -I..\..\User\IIC -I..\..\User\IWDG -I..\..\User\Key -I..\..\User\Led -I..\..\User\Net -I..\..\User\Protocal -I..\..\User\Reader -I..\..\User\SPI -I..\..\User\Timer -I..\..\User\Uart -I..\..\User\Param -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_spi_bus.crf ..\..\User\SPI\bsp_spi_bus.c]
                          THUMB

                          AREA ||i.bsp_InitSPIBus||, CODE, READONLY, ALIGN=2

                  bsp_InitSPIBus PROC
;;;79     */
;;;80     void bsp_InitSPIBus(void)
000000  b508              PUSH     {r3,lr}
;;;81     {
;;;82     #ifdef SOFT_SPI		/* 软件SPI */
;;;83     	GPIO_InitTypeDef  GPIO_InitStructure;
;;;84     
;;;85     	/* 打开GPIO时钟 */
;;;86     	RCC_APB2PeriphClockCmd(RCC_SCK | RCC_MOSI | RCC_MISO, ENABLE);	
;;;87     
;;;88     	/* 配置SPI引脚SCK、MISO 和 MOSI为复用推挽模式 */
;;;89     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;90     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;	/* 推挽输出模式 */
;;;91     	GPIO_InitStructure.GPIO_Pin = PIN_SCK;
;;;92     	GPIO_Init(PORT_SCK, &GPIO_InitStructure);
;;;93     
;;;94     	GPIO_InitStructure.GPIO_Pin = PIN_MOSI;
;;;95     	GPIO_Init(PORT_MOSI, &GPIO_InitStructure);	
;;;96     
;;;97     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;		/* MISO 设置为输入上拉 */
;;;98     	GPIO_InitStructure.GPIO_Pin = PIN_MISO;
;;;99     	GPIO_Init(PORT_MISO, &GPIO_InitStructure);
;;;100    #endif
;;;101    
;;;102    #ifdef HARD_SPI		/* 硬件SPI */
;;;103    	GPIO_InitTypeDef GPIO_InitStructure;
;;;104    
;;;105    	/* 开启 SPI 时钟 */
;;;106    	//RCC_APB2PeriphClockCmd(RCC_SPI, ENABLE);
;;;107    	
;;;108    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
000002  2101              MOVS     r1,#1
000004  0308              LSLS     r0,r1,#12
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;109    	
;;;110    	/* 使能 GPIO 时钟 */
;;;111    	RCC_APB2PeriphClockCmd(RCC_SCK | RCC_MOSI | RCC_MISO, ENABLE);	
00000a  2101              MOVS     r1,#1
00000c  2004              MOVS     r0,#4
00000e  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;112    
;;;113    	/* 配置 SPI引脚SCK、MISO 和 MOSI为复用推挽模式 */
;;;114    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
000012  2018              MOVS     r0,#0x18
000014  f88d0003          STRB     r0,[sp,#3]
;;;115    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000018  2003              MOVS     r0,#3
00001a  f88d0002          STRB     r0,[sp,#2]
;;;116    	GPIO_InitStructure.GPIO_Pin = PIN_SCK;	
00001e  2020              MOVS     r0,#0x20
000020  f8ad0000          STRH     r0,[sp,#0]
;;;117    	GPIO_Init(PORT_SCK, &GPIO_InitStructure);
000024  4669              MOV      r1,sp
000026  4814              LDR      r0,|L1.120|
000028  f7fffffe          BL       GPIO_Init
;;;118    	
;;;119    	GPIO_InitStructure.GPIO_Pin = PIN_MISO;	
00002c  2040              MOVS     r0,#0x40
00002e  f8ad0000          STRH     r0,[sp,#0]
;;;120    	GPIO_Init(PORT_MISO, &GPIO_InitStructure);
000032  4669              MOV      r1,sp
000034  4810              LDR      r0,|L1.120|
000036  f7fffffe          BL       GPIO_Init
;;;121    
;;;122    	GPIO_InitStructure.GPIO_Pin = PIN_MOSI;	
00003a  2080              MOVS     r0,#0x80
00003c  f8ad0000          STRH     r0,[sp,#0]
;;;123    	GPIO_Init(PORT_MOSI, &GPIO_InitStructure);
000040  4669              MOV      r1,sp
000042  480d              LDR      r0,|L1.120|
000044  f7fffffe          BL       GPIO_Init
;;;124    		
;;;125    	bsp_SPI_Init(SPI_Direction_2Lines_FullDuplex | SPI_Mode_Master | SPI_DataSize_8b
000048  f240303f          MOV      r0,#0x33f
00004c  f7fffffe          BL       bsp_SPI_Init
;;;126    		| SPI_CPOL_High | SPI_CPHA_2Edge | SPI_NSS_Soft | SPI_BaudRatePrescaler_256 | SPI_FirstBit_MSB);	
;;;127    	
;;;128    	/* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
;;;129    	SPI_HARD->I2SCFGR &= SPI_Mode_Select;		/* 选择SPI模式，不是I2S模式 */
000050  480a              LDR      r0,|L1.124|
000052  8b80              LDRH     r0,[r0,#0x1c]
000054  f24f71ff          MOV      r1,#0xf7ff
000058  4008              ANDS     r0,r0,r1
00005a  4908              LDR      r1,|L1.124|
00005c  8388              STRH     r0,[r1,#0x1c]
;;;130    
;;;131    	/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
;;;132    	/* Write to SPIx CRCPOLY */
;;;133    	SPI_HARD->CRCPR = 7;		/* 一般不用 */
00005e  2007              MOVS     r0,#7
000060  8208              STRH     r0,[r1,#0x10]
;;;134    
;;;135    
;;;136    	SPI_Cmd(SPI_HARD, DISABLE);			/* 先禁止SPI  */
000062  2100              MOVS     r1,#0
000064  4805              LDR      r0,|L1.124|
000066  f7fffffe          BL       SPI_Cmd
;;;137    
;;;138    	SPI_Cmd(SPI_HARD, ENABLE);			/* 使能SPI  */
00006a  2101              MOVS     r1,#1
00006c  4803              LDR      r0,|L1.124|
00006e  f7fffffe          BL       SPI_Cmd
;;;139        bsp_spiRead0();//启动传输	
000072  f7fffffe          BL       bsp_spiRead0
;;;140    #endif
;;;141    }
000076  bd08              POP      {r3,pc}
;;;142    
                          ENDP

                  |L1.120|
                          DCD      0x40010800
                  |L1.124|
                          DCD      0x40013000

                          AREA ||i.bsp_SPI_Init||, CODE, READONLY, ALIGN=2

                  bsp_SPI_Init PROC
;;;151    #ifdef HARD_SPI		/* 硬件SPI */
;;;152    void bsp_SPI_Init(uint16_t _cr1)
000000  4909              LDR      r1,|L2.40|
;;;153    {
;;;154    	SPI_HARD->CR1 = ((SPI_HARD->CR1 & CR1_CLEAR_Mask) | _cr1);
000002  8809              LDRH     r1,[r1,#0]
000004  f4015141          AND      r1,r1,#0x3040
000008  4301              ORRS     r1,r1,r0
00000a  4a07              LDR      r2,|L2.40|
00000c  8011              STRH     r1,[r2,#0]
;;;155    	  
;;;156    	//SPI_Cmd(SPI_HARD, DISABLE);			/* 先禁止SPI  */	    
;;;157        SPI_HARD->CR1 &= CR1_SPE_Reset;	/* Disable the selected SPI peripheral */
00000e  4611              MOV      r1,r2
000010  8809              LDRH     r1,[r1,#0]
000012  f64f72bf          MOV      r2,#0xffbf
000016  4011              ANDS     r1,r1,r2
000018  4a03              LDR      r2,|L2.40|
00001a  8011              STRH     r1,[r2,#0]
;;;158    
;;;159    	//SPI_Cmd(SPI_HARD, ENABLE);			/* 使能SPI  */		    
;;;160        SPI_HARD->CR1 |= CR1_SPE_Set;	  /* Enable the selected SPI peripheral */
00001c  4611              MOV      r1,r2
00001e  8809              LDRH     r1,[r1,#0]
000020  f0410140          ORR      r1,r1,#0x40
000024  8011              STRH     r1,[r2,#0]
;;;161    }
000026  4770              BX       lr
;;;162    #endif
                          ENDP

                  |L2.40|
                          DCD      0x40013000

                          AREA ||i.bsp_SpiBusBusy||, CODE, READONLY, ALIGN=2

                  bsp_SpiBusBusy PROC
;;;406    */
;;;407    uint8_t bsp_SpiBusBusy(void)
000000  4801              LDR      r0,|L3.8|
;;;408    {
;;;409    	return g_spi_busy;
000002  7800              LDRB     r0,[r0,#0]  ; g_spi_busy
;;;410    }
000004  4770              BX       lr
;;;411    
                          ENDP

000006  0000              DCW      0x0000
                  |L3.8|
                          DCD      g_spi_busy

                          AREA ||i.bsp_SpiBusEnter||, CODE, READONLY, ALIGN=2

                  bsp_SpiBusEnter PROC
;;;380    */
;;;381    void bsp_SpiBusEnter(void)
000000  2001              MOVS     r0,#1
;;;382    {
;;;383    	g_spi_busy = 1;
000002  4901              LDR      r1,|L4.8|
000004  7008              STRB     r0,[r1,#0]
;;;384    }
000006  4770              BX       lr
;;;385    
                          ENDP

                  |L4.8|
                          DCD      g_spi_busy

                          AREA ||i.bsp_SpiBusExit||, CODE, READONLY, ALIGN=2

                  bsp_SpiBusExit PROC
;;;393    */
;;;394    void bsp_SpiBusExit(void)
000000  2000              MOVS     r0,#0
;;;395    {
;;;396    	g_spi_busy = 0;
000002  4901              LDR      r1,|L5.8|
000004  7008              STRB     r0,[r1,#0]
;;;397    }
000006  4770              BX       lr
;;;398    
                          ENDP

                  |L5.8|
                          DCD      g_spi_busy

                          AREA ||i.bsp_spiRead0||, CODE, READONLY, ALIGN=2

                  bsp_spiRead0 PROC
;;;235    */
;;;236    uint8_t bsp_spiRead0(void)
000000  b510              PUSH     {r4,lr}
;;;237    {
;;;238    #ifdef SOFT_SPI		/* 软件SPI */
;;;239    	uint8_t i;
;;;240    	uint8_t read = 0;
;;;241    
;;;242    	for (i = 0; i < 8; i++)
;;;243    	{
;;;244    		read = read<<1;
;;;245    
;;;246    		if (MISO_IS_HIGH())
;;;247    		{
;;;248    			read++;
;;;249    		}
;;;250    		SCK_1();
;;;251    		bsp_spiDelay();
;;;252    		SCK_0();
;;;253    		bsp_spiDelay();
;;;254    	}
;;;255    	return read;
;;;256    #endif
;;;257    
;;;258    #ifdef HARD_SPI		/* 硬件SPI */
;;;259    	uint8_t read;
;;;260    
;;;261    	/* 等待发送缓冲区空 */
;;;262    	while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
000002  bf00              NOP      
                  |L6.4|
000004  2102              MOVS     r1,#2
000006  480b              LDR      r0,|L6.52|
000008  f7fffffe          BL       SPI_I2S_GetFlagStatus
00000c  2800              CMP      r0,#0
00000e  d0f9              BEQ      |L6.4|
;;;263    
;;;264    	/* 发送一个字节 */
;;;265    	SPI_I2S_SendData(SPI1, 0);
000010  2100              MOVS     r1,#0
000012  4808              LDR      r0,|L6.52|
000014  f7fffffe          BL       SPI_I2S_SendData
;;;266    
;;;267    	/* 等待数据接收完毕 */
;;;268    	while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
000018  bf00              NOP      
                  |L6.26|
00001a  2101              MOVS     r1,#1
00001c  4805              LDR      r0,|L6.52|
00001e  f7fffffe          BL       SPI_I2S_GetFlagStatus
000022  2800              CMP      r0,#0
000024  d0f9              BEQ      |L6.26|
;;;269    
;;;270    	/* 读取接收到的数据 */
;;;271    	read = SPI_I2S_ReceiveData(SPI1);
000026  4803              LDR      r0,|L6.52|
000028  f7fffffe          BL       SPI_I2S_ReceiveData
00002c  b2c4              UXTB     r4,r0
;;;272    
;;;273    	/* 返回读到的数据 */
;;;274    	return read;
00002e  4620              MOV      r0,r4
;;;275    #endif
;;;276    }
000030  bd10              POP      {r4,pc}
;;;277    
                          ENDP

000032  0000              DCW      0x0000
                  |L6.52|
                          DCD      0x40013000

                          AREA ||i.bsp_spiRead1||, CODE, READONLY, ALIGN=2

                  bsp_spiRead1 PROC
;;;331    */
;;;332    uint8_t bsp_spiRead1(void)
000000  b510              PUSH     {r4,lr}
;;;333    {
;;;334    #ifdef SOFT_SPI		/* 软件SPI */
;;;335    	uint8_t i;
;;;336    	uint8_t read = 0;
;;;337    
;;;338    	for (i = 0; i < 8; i++)
;;;339    	{
;;;340    		SCK_0();
;;;341    		bsp_spiDelay();
;;;342    		read = read << 1;
;;;343    		if (MISO_IS_HIGH())
;;;344    		{
;;;345    			read++;
;;;346    		}
;;;347    		SCK_1();
;;;348    		bsp_spiDelay();
;;;349    	}
;;;350    	return read;
;;;351    #endif
;;;352    
;;;353    #ifdef HARD_SPI		/* 硬件SPI */
;;;354    	uint8_t read;
;;;355    
;;;356    	/* 等待发送缓冲区空 */
;;;357    	while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
000002  bf00              NOP      
                  |L7.4|
000004  2102              MOVS     r1,#2
000006  480b              LDR      r0,|L7.52|
000008  f7fffffe          BL       SPI_I2S_GetFlagStatus
00000c  2800              CMP      r0,#0
00000e  d0f9              BEQ      |L7.4|
;;;358    
;;;359    	/* 发送一个字节 */
;;;360    	SPI_I2S_SendData(SPI1, 0);
000010  2100              MOVS     r1,#0
000012  4808              LDR      r0,|L7.52|
000014  f7fffffe          BL       SPI_I2S_SendData
;;;361    
;;;362    	/* 等待数据接收完毕 */
;;;363    	while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
000018  bf00              NOP      
                  |L7.26|
00001a  2101              MOVS     r1,#1
00001c  4805              LDR      r0,|L7.52|
00001e  f7fffffe          BL       SPI_I2S_GetFlagStatus
000022  2800              CMP      r0,#0
000024  d0f9              BEQ      |L7.26|
;;;364    
;;;365    	/* 读取接收到的数据 */
;;;366    	read = SPI_I2S_ReceiveData(SPI1);
000026  4803              LDR      r0,|L7.52|
000028  f7fffffe          BL       SPI_I2S_ReceiveData
00002c  b2c4              UXTB     r4,r0
;;;367    
;;;368    	/* 返回读到的数据 */
;;;369    	return read;
00002e  4620              MOV      r0,r4
;;;370    #endif
;;;371    }
000030  bd10              POP      {r4,pc}
;;;372    
                          ENDP

000032  0000              DCW      0x0000
                  |L7.52|
                          DCD      0x40013000

                          AREA ||i.bsp_spiWrite0||, CODE, READONLY, ALIGN=2

                  bsp_spiWrite0 PROC
;;;188    */
;;;189    void bsp_spiWrite0(uint8_t _ucByte)
000000  b510              PUSH     {r4,lr}
;;;190    {
000002  4604              MOV      r4,r0
;;;191    #ifdef SOFT_SPI		/* 软件SPI */
;;;192    	uint8_t i;
;;;193    
;;;194    	for(i = 0; i < 8; i++)
;;;195    	{
;;;196    		if (_ucByte & 0x80)
;;;197    		{
;;;198    			MOSI_1();
;;;199    		}
;;;200    		else
;;;201    		{
;;;202    			MOSI_0();
;;;203    		}
;;;204    		bsp_spiDelay();
;;;205    		SCK_1();
;;;206    		_ucByte <<= 1;
;;;207    		bsp_spiDelay();
;;;208    		SCK_0();
;;;209    	}
;;;210    	bsp_spiDelay();
;;;211    #endif
;;;212    
;;;213    #ifdef HARD_SPI		/* 硬件SPI */
;;;214    	/* 等待发送缓冲区空 */
;;;215    	while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
000004  bf00              NOP      
                  |L8.6|
000006  2102              MOVS     r1,#2
000008  4809              LDR      r0,|L8.48|
00000a  f7fffffe          BL       SPI_I2S_GetFlagStatus
00000e  2800              CMP      r0,#0
000010  d0f9              BEQ      |L8.6|
;;;216    
;;;217    	/* 发送一个字节 */
;;;218    	SPI_I2S_SendData(SPI1, _ucByte);
000012  4621              MOV      r1,r4
000014  4806              LDR      r0,|L8.48|
000016  f7fffffe          BL       SPI_I2S_SendData
;;;219    
;;;220    	/* 等待数据接收完毕 */
;;;221    	while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
00001a  bf00              NOP      
                  |L8.28|
00001c  2101              MOVS     r1,#1
00001e  4804              LDR      r0,|L8.48|
000020  f7fffffe          BL       SPI_I2S_GetFlagStatus
000024  2800              CMP      r0,#0
000026  d0f9              BEQ      |L8.28|
;;;222    
;;;223    	/* 读取接收到的数据 */
;;;224    	SPI_I2S_ReceiveData(SPI1);
000028  4801              LDR      r0,|L8.48|
00002a  f7fffffe          BL       SPI_I2S_ReceiveData
;;;225    #endif
;;;226    }
00002e  bd10              POP      {r4,pc}
;;;227    
                          ENDP

                  |L8.48|
                          DCD      0x40013000

                          AREA ||i.bsp_spiWrite1||, CODE, READONLY, ALIGN=2

                  bsp_spiWrite1 PROC
;;;285    */
;;;286    void bsp_spiWrite1(uint8_t _ucByte)
000000  b510              PUSH     {r4,lr}
;;;287    {
000002  4604              MOV      r4,r0
;;;288    #ifdef SOFT_SPI		/* 软件SPI */
;;;289    	uint8_t i;
;;;290    
;;;291    	for(i = 0; i < 8; i++)
;;;292    	{
;;;293    		if (_ucByte & 0x80)
;;;294    		{
;;;295    			MOSI_1();
;;;296    		}
;;;297    		else
;;;298    		{
;;;299    			MOSI_0();
;;;300    		}
;;;301    		SCK_0();
;;;302    		_ucByte <<= 1;
;;;303    		bsp_spiDelay();
;;;304    		SCK_1();				/* SCK上升沿采集数据, SCK空闲时为高电平 */
;;;305    		bsp_spiDelay();
;;;306    	}
;;;307    #endif
;;;308    
;;;309    #ifdef HARD_SPI		/* 硬件SPI */
;;;310    	/* 等待发送缓冲区空 */
;;;311    	while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
000004  bf00              NOP      
                  |L9.6|
000006  2102              MOVS     r1,#2
000008  4809              LDR      r0,|L9.48|
00000a  f7fffffe          BL       SPI_I2S_GetFlagStatus
00000e  2800              CMP      r0,#0
000010  d0f9              BEQ      |L9.6|
;;;312    
;;;313    	/* 发送一个字节 */
;;;314    	SPI_I2S_SendData(SPI1, _ucByte);
000012  4621              MOV      r1,r4
000014  4806              LDR      r0,|L9.48|
000016  f7fffffe          BL       SPI_I2S_SendData
;;;315    
;;;316    	/* 等待数据接收完毕 */
;;;317    	while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
00001a  bf00              NOP      
                  |L9.28|
00001c  2101              MOVS     r1,#1
00001e  4804              LDR      r0,|L9.48|
000020  f7fffffe          BL       SPI_I2S_GetFlagStatus
000024  2800              CMP      r0,#0
000026  d0f9              BEQ      |L9.28|
;;;318    
;;;319    	/* 读取接收到的数据 */
;;;320    	SPI_I2S_ReceiveData(SPI1);
000028  4801              LDR      r0,|L9.48|
00002a  f7fffffe          BL       SPI_I2S_ReceiveData
;;;321    #endif
;;;322    }
00002e  bd10              POP      {r4,pc}
;;;323    
                          ENDP

                  |L9.48|
                          DCD      0x40013000

                          AREA ||.data||, DATA, ALIGN=0

                  g_spi_busy
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\SPI\\bsp_spi_bus.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___13_bsp_spi_bus_c_c88bcf96____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_bsp_spi_bus_c_c88bcf96____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___13_bsp_spi_bus_c_c88bcf96____REVSH|
#line 128
|__asm___13_bsp_spi_bus_c_c88bcf96____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
