; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\rt_mutex.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\rt_mutex.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\RTX\inc -I..\..\RTX\portable -I..\..\User\CpuFlash -I..\..\User\CRC8_16 -I..\..\User\DS1302 -I..\..\User\DWT -I..\..\User\IIC -I..\..\User\IWDG -I..\..\User\Key -I..\..\User\Led -I..\..\User\Net -I..\..\User\Protocal -I..\..\User\Reader -I..\..\User\SPI -I..\..\User\Timer -I..\..\User\Uart -I..\..\User\Param -I..\..\User\ADC -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\rt_mutex.crf ..\..\RTX\src\rt_Mutex.c]
                          THUMB

                          AREA ||i.rt_mut_init||, CODE, READONLY, ALIGN=1

                  rt_mut_init PROC
;;;25     
;;;26     void rt_mut_init (OS_ID mutex) {
000000  4601              MOV      r1,r0
;;;27       /* Initialize a mutex object */
;;;28       P_MUCB p_MCB = mutex;
;;;29     
;;;30       p_MCB->cb_type = MUCB;
000002  2203              MOVS     r2,#3
000004  700a              STRB     r2,[r1,#0]
;;;31       p_MCB->level   = 0;
000006  2200              MOVS     r2,#0
000008  804a              STRH     r2,[r1,#2]
;;;32       p_MCB->p_lnk   = NULL;
00000a  604a              STR      r2,[r1,#4]
;;;33       p_MCB->owner   = NULL;
00000c  608a              STR      r2,[r1,#8]
;;;34       p_MCB->p_mlnk  = NULL;
00000e  60ca              STR      r2,[r1,#0xc]
;;;35     }
000010  4770              BX       lr
;;;36     
                          ENDP


                          AREA ||i.rt_mut_release||, CODE, READONLY, ALIGN=2

                  rt_mut_release PROC
;;;39     
;;;40     OS_RESULT rt_mut_release (OS_ID mutex) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4607              MOV      r7,r0
;;;41       /* Release a mutex object */
;;;42       P_MUCB p_MCB = mutex;
000006  463c              MOV      r4,r7
;;;43       P_TCB  p_TCB;
;;;44       P_MUCB p_mlnk;
;;;45       U8     prio;
;;;46     
;;;47       if (p_MCB->level == 0 || p_MCB->owner != os_tsk.run) {
000008  8860              LDRH     r0,[r4,#2]
00000a  b120              CBZ      r0,|L2.22|
00000c  4946              LDR      r1,|L2.296|
00000e  68a0              LDR      r0,[r4,#8]
000010  6809              LDR      r1,[r1,#0]  ; os_tsk
000012  4288              CMP      r0,r1
000014  d002              BEQ      |L2.28|
                  |L2.22|
;;;48         /* Unbalanced mutex release or task is not the owner */
;;;49         return (OS_R_NOK);
000016  20ff              MOVS     r0,#0xff
                  |L2.24|
;;;50       }
;;;51       if (--p_MCB->level != 0) {
;;;52         return (OS_R_OK);
;;;53       }
;;;54     
;;;55       /* Remove mutex from task mutex owner list. */
;;;56       p_mlnk = os_tsk.run->p_mlnk;
;;;57       if (p_mlnk == p_MCB) {
;;;58         os_tsk.run->p_mlnk = p_MCB->p_mlnk;
;;;59       }
;;;60       else {
;;;61         while (p_mlnk) {
;;;62           if (p_mlnk->p_mlnk == p_MCB) {
;;;63             p_mlnk->p_mlnk = p_MCB->p_mlnk;
;;;64             break;
;;;65           }
;;;66           p_mlnk = p_mlnk->p_mlnk;
;;;67         }
;;;68       }
;;;69     
;;;70       /* Restore owner task's priority. */
;;;71       prio = os_tsk.run->prio_base;
;;;72       p_mlnk = os_tsk.run->p_mlnk;
;;;73       while (p_mlnk) {
;;;74         if (p_mlnk->p_lnk && (p_mlnk->p_lnk->prio > prio)) {
;;;75           /* A task with higher priority is waiting for mutex. */
;;;76           prio = p_mlnk->p_lnk->prio;
;;;77         }
;;;78         p_mlnk = p_mlnk->p_mlnk;
;;;79       }
;;;80       os_tsk.run->prio = prio;
;;;81     
;;;82       if (p_MCB->p_lnk != NULL) {
;;;83         /* A task is waiting for mutex. */
;;;84         p_TCB = rt_get_first ((P_XCB)p_MCB);
;;;85         p_TCB->ret_val = OS_R_MUT;
;;;86         rt_rmv_dly (p_TCB);
;;;87         /* A waiting task becomes the owner of this mutex. */
;;;88         p_MCB->level  = 1;
;;;89         p_MCB->owner  = p_TCB;
;;;90         p_MCB->p_mlnk = p_TCB->p_mlnk;
;;;91         p_TCB->p_mlnk = p_MCB; 
;;;92         /* Priority inversion, check which task continues. */
;;;93         if (os_tsk.run->prio >= rt_rdy_prio()) {
;;;94           rt_dispatch (p_TCB);
;;;95         }
;;;96         else {
;;;97           /* Ready task has higher priority than running task. */
;;;98           rt_put_prio (&os_rdy, os_tsk.run);
;;;99           rt_put_prio (&os_rdy, p_TCB);
;;;100          os_tsk.run->state = READY;
;;;101          p_TCB->state      = READY;
;;;102          rt_dispatch (NULL);
;;;103        }
;;;104        os_tsk.run->ret_val = OS_R_OK;
;;;105      }
;;;106      else {
;;;107        /* Check if own priority lowered by priority inversion. */
;;;108        if (rt_rdy_prio() > os_tsk.run->prio) {
;;;109          rt_put_prio (&os_rdy, os_tsk.run);
;;;110          os_tsk.run->state = READY;
;;;111          rt_dispatch (NULL);
;;;112          os_tsk.run->ret_val = OS_R_OK;
;;;113        }
;;;114      }
;;;115      return (OS_R_OK);
;;;116    }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L2.28|
00001c  8860              LDRH     r0,[r4,#2]            ;51
00001e  1e40              SUBS     r0,r0,#1              ;51
000020  0400              LSLS     r0,r0,#16             ;51
000022  0c00              LSRS     r0,r0,#16             ;51
000024  8060              STRH     r0,[r4,#2]            ;51
000026  d001              BEQ      |L2.44|
000028  2000              MOVS     r0,#0                 ;52
00002a  e7f5              B        |L2.24|
                  |L2.44|
00002c  483e              LDR      r0,|L2.296|
00002e  6800              LDR      r0,[r0,#0]            ;56  ; os_tsk
000030  6a05              LDR      r5,[r0,#0x20]         ;56
000032  42a5              CMP      r5,r4                 ;57
000034  d104              BNE      |L2.64|
000036  493c              LDR      r1,|L2.296|
000038  68e0              LDR      r0,[r4,#0xc]          ;58
00003a  6809              LDR      r1,[r1,#0]            ;58  ; os_tsk
00003c  6208              STR      r0,[r1,#0x20]         ;58
00003e  e00a              B        |L2.86|
                  |L2.64|
000040  e006              B        |L2.80|
                  |L2.66|
000042  68e8              LDR      r0,[r5,#0xc]          ;62
000044  42a0              CMP      r0,r4                 ;62
000046  d102              BNE      |L2.78|
000048  68e0              LDR      r0,[r4,#0xc]          ;63
00004a  60e8              STR      r0,[r5,#0xc]          ;63
00004c  e002              B        |L2.84|
                  |L2.78|
00004e  68ed              LDR      r5,[r5,#0xc]          ;66
                  |L2.80|
000050  2d00              CMP      r5,#0                 ;61
000052  d1f6              BNE      |L2.66|
                  |L2.84|
000054  bf00              NOP                            ;64
                  |L2.86|
000056  4834              LDR      r0,|L2.296|
000058  6800              LDR      r0,[r0,#0]            ;71  ; os_tsk
00005a  f8908024          LDRB     r8,[r0,#0x24]         ;71
00005e  4832              LDR      r0,|L2.296|
000060  6800              LDR      r0,[r0,#0]            ;72  ; os_tsk
000062  6a05              LDR      r5,[r0,#0x20]         ;72
000064  e009              B        |L2.122|
                  |L2.102|
000066  6868              LDR      r0,[r5,#4]            ;74
000068  b130              CBZ      r0,|L2.120|
00006a  6868              LDR      r0,[r5,#4]            ;74
00006c  7880              LDRB     r0,[r0,#2]            ;74
00006e  4540              CMP      r0,r8                 ;74
000070  dd02              BLE      |L2.120|
000072  6868              LDR      r0,[r5,#4]            ;76
000074  f8908002          LDRB     r8,[r0,#2]            ;76
                  |L2.120|
000078  68ed              LDR      r5,[r5,#0xc]          ;78
                  |L2.122|
00007a  2d00              CMP      r5,#0                 ;73
00007c  d1f3              BNE      |L2.102|
00007e  482a              LDR      r0,|L2.296|
000080  6800              LDR      r0,[r0,#0]            ;80  ; os_tsk
000082  f8808002          STRB     r8,[r0,#2]            ;80
000086  6860              LDR      r0,[r4,#4]            ;82
000088  b390              CBZ      r0,|L2.240|
00008a  4620              MOV      r0,r4                 ;84
00008c  f7fffffe          BL       rt_get_first
000090  4606              MOV      r6,r0                 ;84
000092  2005              MOVS     r0,#5                 ;85
000094  f8860025          STRB     r0,[r6,#0x25]         ;85
000098  4630              MOV      r0,r6                 ;86
00009a  f7fffffe          BL       rt_rmv_dly
00009e  2001              MOVS     r0,#1                 ;88
0000a0  8060              STRH     r0,[r4,#2]            ;88
0000a2  60a6              STR      r6,[r4,#8]            ;89
0000a4  6a30              LDR      r0,[r6,#0x20]         ;90
0000a6  60e0              STR      r0,[r4,#0xc]          ;90
0000a8  6234              STR      r4,[r6,#0x20]         ;91
0000aa  481f              LDR      r0,|L2.296|
0000ac  6800              LDR      r0,[r0,#0]            ;93  ; os_tsk
0000ae  7880              LDRB     r0,[r0,#2]            ;93
0000b0  491e              LDR      r1,|L2.300|
0000b2  6849              LDR      r1,[r1,#4]            ;93  ; os_rdy
0000b4  7889              LDRB     r1,[r1,#2]            ;93
0000b6  4288              CMP      r0,r1                 ;93
0000b8  db03              BLT      |L2.194|
0000ba  4630              MOV      r0,r6                 ;94
0000bc  f7fffffe          BL       rt_dispatch
0000c0  e010              B        |L2.228|
                  |L2.194|
0000c2  4819              LDR      r0,|L2.296|
0000c4  6801              LDR      r1,[r0,#0]            ;98  ; os_tsk
0000c6  4819              LDR      r0,|L2.300|
0000c8  f7fffffe          BL       rt_put_prio
0000cc  4631              MOV      r1,r6                 ;99
0000ce  4817              LDR      r0,|L2.300|
0000d0  f7fffffe          BL       rt_put_prio
0000d4  2001              MOVS     r0,#1                 ;100
0000d6  4914              LDR      r1,|L2.296|
0000d8  6809              LDR      r1,[r1,#0]            ;100  ; os_tsk
0000da  7048              STRB     r0,[r1,#1]            ;100
0000dc  7070              STRB     r0,[r6,#1]            ;101
0000de  2000              MOVS     r0,#0                 ;102
0000e0  f7fffffe          BL       rt_dispatch
                  |L2.228|
0000e4  2000              MOVS     r0,#0                 ;104
0000e6  4910              LDR      r1,|L2.296|
0000e8  6809              LDR      r1,[r1,#0]            ;104  ; os_tsk
0000ea  f8810025          STRB     r0,[r1,#0x25]         ;104
0000ee  e019              B        |L2.292|
                  |L2.240|
0000f0  e7ff              B        |L2.242|
                  |L2.242|
0000f2  480e              LDR      r0,|L2.300|
0000f4  6840              LDR      r0,[r0,#4]            ;108  ; os_rdy
0000f6  7880              LDRB     r0,[r0,#2]            ;108
0000f8  490b              LDR      r1,|L2.296|
0000fa  6809              LDR      r1,[r1,#0]            ;108  ; os_tsk
0000fc  7889              LDRB     r1,[r1,#2]            ;108
0000fe  4288              CMP      r0,r1                 ;108
000100  dd10              BLE      |L2.292|
000102  4809              LDR      r0,|L2.296|
000104  6801              LDR      r1,[r0,#0]            ;109  ; os_tsk
000106  4809              LDR      r0,|L2.300|
000108  f7fffffe          BL       rt_put_prio
00010c  2001              MOVS     r0,#1                 ;110
00010e  4906              LDR      r1,|L2.296|
000110  6809              LDR      r1,[r1,#0]            ;110  ; os_tsk
000112  7048              STRB     r0,[r1,#1]            ;110
000114  2000              MOVS     r0,#0                 ;111
000116  f7fffffe          BL       rt_dispatch
00011a  2000              MOVS     r0,#0                 ;112
00011c  4902              LDR      r1,|L2.296|
00011e  6809              LDR      r1,[r1,#0]            ;112  ; os_tsk
000120  f8810025          STRB     r0,[r1,#0x25]         ;112
                  |L2.292|
000124  2000              MOVS     r0,#0                 ;115
000126  e777              B        |L2.24|
;;;117    
                          ENDP

                  |L2.296|
                          DCD      os_tsk
                  |L2.300|
                          DCD      os_rdy

                          AREA ||i.rt_mut_wait||, CODE, READONLY, ALIGN=2

                  rt_mut_wait PROC
;;;120    
;;;121    OS_RESULT rt_mut_wait (OS_ID mutex, U16 timeout) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;122      /* Wait for a mutex, continue when mutex is free. */
;;;123      P_MUCB p_MCB = mutex;
000006  462c              MOV      r4,r5
;;;124    
;;;125      if (p_MCB->level == 0) {
000008  8860              LDRH     r0,[r4,#2]
00000a  b950              CBNZ     r0,|L3.34|
;;;126        p_MCB->owner  = os_tsk.run;
00000c  481f              LDR      r0,|L3.140|
00000e  6800              LDR      r0,[r0,#0]  ; os_tsk
000010  60a0              STR      r0,[r4,#8]
;;;127        p_MCB->p_mlnk = os_tsk.run->p_mlnk;
000012  481e              LDR      r0,|L3.140|
000014  6800              LDR      r0,[r0,#0]  ; os_tsk
000016  6a00              LDR      r0,[r0,#0x20]
000018  60e0              STR      r0,[r4,#0xc]
;;;128        os_tsk.run->p_mlnk = p_MCB; 
00001a  481c              LDR      r0,|L3.140|
00001c  6800              LDR      r0,[r0,#0]  ; os_tsk
00001e  6204              STR      r4,[r0,#0x20]
;;;129        goto inc;
000020  e005              B        |L3.46|
                  |L3.34|
;;;130      }
;;;131      if (p_MCB->owner == os_tsk.run) {
000022  491a              LDR      r1,|L3.140|
000024  68a0              LDR      r0,[r4,#8]
000026  6809              LDR      r1,[r1,#0]  ; os_tsk
000028  4288              CMP      r0,r1
00002a  d105              BNE      |L3.56|
;;;132        /* OK, running task is the owner of this mutex. */
;;;133    inc:p_MCB->level++;
00002c  bf00              NOP      
                  |L3.46|
00002e  8860              LDRH     r0,[r4,#2]
000030  1c40              ADDS     r0,r0,#1
000032  8060              STRH     r0,[r4,#2]
;;;134        return (OS_R_OK);
000034  2000              MOVS     r0,#0
                  |L3.54|
;;;135      }
;;;136      /* Mutex owned by another task, wait until released. */
;;;137      if (timeout == 0) {
;;;138        return (OS_R_TMO);
;;;139      }
;;;140      /* Raise the owner task priority if lower than current priority. */
;;;141      /* This priority inversion is called priority inheritance.       */
;;;142      if (p_MCB->owner->prio < os_tsk.run->prio) {
;;;143        p_MCB->owner->prio = os_tsk.run->prio;
;;;144        rt_resort_prio (p_MCB->owner);
;;;145      }
;;;146      if (p_MCB->p_lnk != NULL) {
;;;147        rt_put_prio ((P_XCB)p_MCB, os_tsk.run);
;;;148      }
;;;149      else {
;;;150        p_MCB->p_lnk = os_tsk.run;
;;;151        os_tsk.run->p_lnk  = NULL;
;;;152        os_tsk.run->p_rlnk = (P_TCB)p_MCB;
;;;153      }
;;;154      rt_block(timeout, WAIT_MUT);
;;;155      return (OS_R_TMO);
;;;156    }
000036  bd70              POP      {r4-r6,pc}
                  |L3.56|
000038  b90e              CBNZ     r6,|L3.62|
00003a  2001              MOVS     r0,#1                 ;138
00003c  e7fb              B        |L3.54|
                  |L3.62|
00003e  68a0              LDR      r0,[r4,#8]            ;142
000040  7880              LDRB     r0,[r0,#2]            ;142
000042  4912              LDR      r1,|L3.140|
000044  6809              LDR      r1,[r1,#0]            ;142  ; os_tsk
000046  7889              LDRB     r1,[r1,#2]            ;142
000048  4288              CMP      r0,r1                 ;142
00004a  da07              BGE      |L3.92|
00004c  480f              LDR      r0,|L3.140|
00004e  6800              LDR      r0,[r0,#0]            ;143  ; os_tsk
000050  7880              LDRB     r0,[r0,#2]            ;143
000052  68a1              LDR      r1,[r4,#8]            ;143
000054  7088              STRB     r0,[r1,#2]            ;143
000056  68a0              LDR      r0,[r4,#8]            ;144
000058  f7fffffe          BL       rt_resort_prio
                  |L3.92|
00005c  6860              LDR      r0,[r4,#4]            ;146
00005e  b128              CBZ      r0,|L3.108|
000060  480a              LDR      r0,|L3.140|
000062  6801              LDR      r1,[r0,#0]            ;147  ; os_tsk
000064  4620              MOV      r0,r4                 ;147
000066  f7fffffe          BL       rt_put_prio
00006a  e009              B        |L3.128|
                  |L3.108|
00006c  4807              LDR      r0,|L3.140|
00006e  6800              LDR      r0,[r0,#0]            ;150  ; os_tsk
000070  6060              STR      r0,[r4,#4]            ;150
000072  2000              MOVS     r0,#0                 ;151
000074  4905              LDR      r1,|L3.140|
000076  6809              LDR      r1,[r1,#0]            ;151  ; os_tsk
000078  6048              STR      r0,[r1,#4]            ;151
00007a  4804              LDR      r0,|L3.140|
00007c  6800              LDR      r0,[r0,#0]            ;152  ; os_tsk
00007e  6084              STR      r4,[r0,#8]            ;152
                  |L3.128|
000080  2109              MOVS     r1,#9                 ;154
000082  4630              MOV      r0,r6                 ;154
000084  f7fffffe          BL       rt_block
000088  2001              MOVS     r0,#1                 ;155
00008a  e7d4              B        |L3.54|
;;;157    
                          ENDP

                  |L3.140|
                          DCD      os_tsk
