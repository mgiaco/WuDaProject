; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\rtx_conf_cm.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\rtx_conf_cm.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\RTX\inc -I..\..\RTX\portable -I..\..\User\CpuFlash -I..\..\User\CRC8_16 -I..\..\User\DS1302 -I..\..\User\DWT -I..\..\User\IIC -I..\..\User\IWDG -I..\..\User\Key -I..\..\User\Led -I..\..\User\Net -I..\..\User\Protocal -I..\..\User\Reader -I..\..\User\SPI -I..\..\User\Timer -I..\..\User\Uart -I..\..\User\Param -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\rtx_conf_cm.crf ..\..\User\RTX_Conf_CM.c]
                          THUMB

                          AREA ||i.os_error||, CODE, READONLY, ALIGN=1

                  os_error PROC
;;;219    
;;;220    void os_error (U32 err_code) {
000000  bf00              NOP      
                  |L1.2|
;;;221      /* This function is called when a runtime error is detected. Parameter */
;;;222      /* 'err_code' holds the runtime error code (defined in RTL.H).         */
;;;223    
;;;224      /* HERE: include optional code to be executed on runtime error. */
;;;225      for (;;);
000002  e7fe              B        |L1.2|
;;;226    }
;;;227    
                          ENDP


                          AREA ||i.os_idle_demon||, CODE, READONLY, ALIGN=1

                  os_idle_demon PROC
;;;147    
;;;148    __task void os_idle_demon (void) {
000000  bf00              NOP      
                  |L2.2|
;;;149      /* The idle demon is a system task, running when no other task is ready */
;;;150      /* to run. The 'os_xxx' function calls are not allowed from this task.  */
;;;151    
;;;152      for (;;) {
000002  e7fe              B        |L2.2|
;;;153      /* HERE: include optional user code to be executed when no task runs.*/
;;;154      }
;;;155    }
;;;156    
                          ENDP


                          AREA ||i.os_tmr_call||, CODE, READONLY, ALIGN=2

                  os_tmr_call PROC
;;;177    
;;;178    void os_tmr_call (U16 info) {
000000  b538              PUSH     {r3-r5,lr}
000002  4604              MOV      r4,r0
;;;179      /* This function is called when the user timer has expired. Parameter   */
;;;180      /* 'info' holds the value, defined when the timer was created.          */
;;;181    
;;;182      /* HERE: include optional user code to be executed on timeout. */
;;;183          /* 定时器回调函数中仅支持isr_开头的系统函数，os_开头的不支持，此回调函数是在
;;;184         滴答定时器中断中执行的。
;;;185      */
;;;186      
;;;187      switch(info)
000004  2c05              CMP      r4,#5
000006  d228              BCS      |L3.90|
000008  e8dff004          TBB      [pc,r4]
00000c  030d131a          DCB      0x03,0x0d,0x13,0x1a
000010  2100              DCB      0x21,0x00
;;;188      {
;;;189        case 0:          /* 参数为0,远程开门后关门 */
;;;190        {
;;;191          SingleRelation_T t_remoteOpen;//add3-9 为了能够在case标签后面声明结构体变量，加上了大括号
;;;192          t_remoteOpen.button_switcher = g_tRunInfo.remoteOpen;
000012  4813              LDR      r0,|L3.96|
000014  7840              LDRB     r0,[r0,#1]  ; g_tRunInfo
000016  f88d0001          STRB     r0,[sp,#1]
;;;193          g_tDoorStatus.closeDoor(&t_remoteOpen, e_BUTTON_A);//e_BUTTON_A和 e_BUTTON_B在closeDoor函数中情况一样，不必区分
00001a  4812              LDR      r0,|L3.100|
00001c  2102              MOVS     r1,#2
00001e  68c2              LDR      r2,[r0,#0xc]  ; g_tDoorStatus
000020  4668              MOV      r0,sp
000022  4790              BLX      r2
;;;194        }
;;;195          break;
000024  e019              B        |L3.90|
;;;196          
;;;197    	case 1:          /* 参数为1 ,关系A-读头*/
;;;198          g_tDoorStatus.closeDoor(&g_tParam.relation.relationA, e_READER_A);//e_BUTTON_A和 e_BUTTON_B在closeDoor函数中情况一样，不必区分
000026  480f              LDR      r0,|L3.100|
000028  2100              MOVS     r1,#0
00002a  68c2              LDR      r2,[r0,#0xc]  ; g_tDoorStatus
00002c  480e              LDR      r0,|L3.104|
00002e  4790              BLX      r2
;;;199          break;
000030  e013              B        |L3.90|
;;;200    	
;;;201    	case 2:          /* 参数为2，关系B-按键 */
;;;202    	  g_tDoorStatus.closeDoor(&g_tParam.relation.relationB, e_BUTTON_A);//同上      
000032  480c              LDR      r0,|L3.100|
000034  2102              MOVS     r1,#2
000036  68c2              LDR      r2,[r0,#0xc]  ; g_tDoorStatus
000038  480b              LDR      r0,|L3.104|
00003a  1c80              ADDS     r0,r0,#2
00003c  4790              BLX      r2
;;;203          break;
00003e  e00c              B        |L3.90|
;;;204        
;;;205        case 3:          /* 参数为3 ,关系B-读头*/
;;;206          g_tDoorStatus.closeDoor(&g_tParam.relation.relationB, e_READER_A);//e_BUTTON_A和 e_BUTTON_B在closeDoor函数中情况一样，不必区分
000040  4808              LDR      r0,|L3.100|
000042  2100              MOVS     r1,#0
000044  68c2              LDR      r2,[r0,#0xc]  ; g_tDoorStatus
000046  4808              LDR      r0,|L3.104|
000048  1c80              ADDS     r0,r0,#2
00004a  4790              BLX      r2
;;;207          break;
00004c  e005              B        |L3.90|
;;;208    	
;;;209    	case 4:          /* 参数为4，关系A-按键 */
;;;210    	  g_tDoorStatus.closeDoor(&g_tParam.relation.relationA, e_BUTTON_A);//同上      
00004e  4805              LDR      r0,|L3.100|
000050  2102              MOVS     r1,#2
000052  68c2              LDR      r2,[r0,#0xc]  ; g_tDoorStatus
000054  4804              LDR      r0,|L3.104|
000056  4790              BLX      r2
;;;211          break;
000058  bf00              NOP      
                  |L3.90|
00005a  bf00              NOP                            ;195
;;;212        
;;;213        
;;;214      }
;;;215    }
00005c  bd38              POP      {r3-r5,pc}
;;;216    
                          ENDP

00005e  0000              DCW      0x0000
                  |L3.96|
                          DCD      g_tRunInfo
                  |L3.100|
                          DCD      g_tDoorStatus
                  |L3.104|
                          DCD      g_tParam+0x14

                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  mp_tcb
                          %        464
                  mp_stk
                          %        528
                  os_fifo
                          %        132
                  os_active_TCB
                          %        32
                  mp_tmr
                          %        28

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  os_maxtaskrun
000000  0008              DCW      0x0008
000002  0000              DCB      0x00,0x00
                  os_stackinfo
                          DCD      0x01080200
                  os_rrobin
                          DCD      0x00010005
                  os_trv
                          DCD      0x0001193f
                  os_flags
000010  01000000          DCB      0x01,0x00,0x00,0x00
                  os_clockrate
                  ||__tagsym$$used||
                          DCD      0x000003e8
                  os_timernum
                  |symbol_number.16|
                          DCD      0x00000002
                  mp_tcb_size
00001c  01cc              DCW      0x01cc
00001e  0000              DCB      0x00,0x00
                  mp_stk_size
                          DCD      0x00000210
                  os_fifo_size
000024  1000              DCB      0x10,0x00
                  mp_tmr_size
000026  001c              DCW      0x001c

                          AREA ||.data||, DATA, ALIGN=2

                  m_tmr
                          DCD      mp_tmr

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\RTX_Conf_CM.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___13_RTX_Conf_CM_c_79201571____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_RTX_Conf_CM_c_79201571____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___13_RTX_Conf_CM_c_79201571____REVSH|
#line 128
|__asm___13_RTX_Conf_CM_c_79201571____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
