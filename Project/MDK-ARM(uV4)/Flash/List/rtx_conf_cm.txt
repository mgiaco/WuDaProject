; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\rtx_conf_cm.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\rtx_conf_cm.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\RTX\inc -I..\..\RTX\portable -I..\..\User\CpuFlash -I..\..\User\CRC8_16 -I..\..\User\DS1302 -I..\..\User\DWT -I..\..\User\IIC -I..\..\User\IWDG -I..\..\User\Key -I..\..\User\Led -I..\..\User\Net -I..\..\User\Protocal -I..\..\User\Reader -I..\..\User\SPI -I..\..\User\Timer -I..\..\User\Uart -I..\..\User\Param -I..\..\User\ADC -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\rtx_conf_cm.crf ..\..\User\RTX_Conf_CM.c]
                          THUMB

                          AREA ||i.os_error||, CODE, READONLY, ALIGN=1

                  os_error PROC
;;;200    
;;;201    void os_error (U32 err_code) {
000000  bf00              NOP      
                  |L1.2|
;;;202      /* This function is called when a runtime error is detected. Parameter */
;;;203      /* 'err_code' holds the runtime error code (defined in RTL.H).         */
;;;204    
;;;205      /* HERE: include optional code to be executed on runtime error. */
;;;206      for (;;);
000002  e7fe              B        |L1.2|
;;;207    }
;;;208    
                          ENDP


                          AREA ||i.os_idle_demon||, CODE, READONLY, ALIGN=1

                  os_idle_demon PROC
;;;147    
;;;148    __task void os_idle_demon (void) {
000000  bf00              NOP      
                  |L2.2|
;;;149      /* The idle demon is a system task, running when no other task is ready */
;;;150      /* to run. The 'os_xxx' function calls are not allowed from this task.  */
;;;151    
;;;152      for (;;) {
000002  e7fe              B        |L2.2|
;;;153      /* HERE: include optional user code to be executed when no task runs.*/
;;;154      }
;;;155    }
;;;156    
                          ENDP


                          AREA ||i.os_tmr_call||, CODE, READONLY, ALIGN=1

                  os_tmr_call PROC
;;;177    
;;;178    void os_tmr_call (U16 info) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;179      /* This function is called when the user timer has expired. Parameter   */
;;;180      /* 'info' holds the value, defined when the timer was created.          */
;;;181    
;;;182      /* HERE: include optional user code to be executed on timeout. */
;;;183          /* 定时器回调函数中仅支持isr_开头的系统函数，os_开头的不支持，此回调函数是在
;;;184         滴答定时器中断中执行的。
;;;185      */
;;;186      
;;;187      switch(info)
000004  b914              CBNZ     r4,|L3.12|
;;;188      {
;;;189          case 0:
;;;190              ResetDetector();    
000006  f7fffffe          BL       ResetDetector
;;;191              break;
00000a  e000              B        |L3.14|
                  |L3.12|
;;;192          
;;;193          default:
;;;194              break;
00000c  bf00              NOP      
                  |L3.14|
00000e  bf00              NOP                            ;191
;;;195      }
;;;196    }
000010  bd10              POP      {r4,pc}
;;;197    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  mp_tcb
                          %        240
                  mp_stk
                          %        528
                  os_fifo
                          %        132
                  os_active_TCB
                          %        16
                  mp_tmr
                          %        28

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  os_maxtaskrun
000000  0004              DCW      0x0004
000002  0000              DCB      0x00,0x00
                  os_stackinfo
                          DCD      0x01040200
                  os_rrobin
                          DCD      0x00010005
                  os_trv
                          DCD      0x0001193f
                  os_flags
000010  01000000          DCB      0x01,0x00,0x00,0x00
                  os_clockrate
                  ||__tagsym$$used||
                          DCD      0x000003e8
                  os_timernum
                  |symbol_number.13|
                          DCD      0x00000002
                  mp_tcb_size
00001c  00ec              DCW      0x00ec
00001e  0000              DCB      0x00,0x00
                  mp_stk_size
                          DCD      0x00000210
                  os_fifo_size
000024  1000              DCB      0x10,0x00
                  mp_tmr_size
000026  001c              DCW      0x001c

                          AREA ||.data||, DATA, ALIGN=2

                  m_tmr
                          DCD      mp_tmr

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\RTX_Conf_CM.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___13_RTX_Conf_CM_c_79201571____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_RTX_Conf_CM_c_79201571____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___13_RTX_Conf_CM_c_79201571____REVSH|
#line 128
|__asm___13_RTX_Conf_CM_c_79201571____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
