; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\socket.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\socket.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\RTX\inc -I..\..\RTX\portable -I..\..\User\CpuFlash -I..\..\User\CRC8_16 -I..\..\User\DS1302 -I..\..\User\DWT -I..\..\User\IIC -I..\..\User\IWDG -I..\..\User\Key -I..\..\User\Led -I..\..\User\Net -I..\..\User\Protocal -I..\..\User\Reader -I..\..\User\SPI -I..\..\User\Timer -I..\..\User\Uart -I..\..\User\Param -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\socket.crf ..\..\User\Net\socket.c]
                          THUMB

                          AREA ||i.close||, CODE, READONLY, ALIGN=1

                  close PROC
;;;49     */
;;;50     void close(SOCKET s)
000000  b510              PUSH     {r4,lr}
;;;51     {
000002  4604              MOV      r4,r0
;;;52        IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_CLOSE);
000004  f44f7184          MOV      r1,#0x108
000008  eb011044          ADD      r0,r1,r4,LSL #5
00000c  2110              MOVS     r1,#0x10
00000e  f7fffffe          BL       IINCHIP_WRITE
;;;53     
;;;54        /* wait to process the command... */
;;;55        while( IINCHIP_READ(Sn_CR(s) ) )
000012  bf00              NOP      
                  |L1.20|
000014  f44f7184          MOV      r1,#0x108
000018  eb011044          ADD      r0,r1,r4,LSL #5
00001c  f7fffffe          BL       IINCHIP_READ
000020  2800              CMP      r0,#0
000022  d1f7              BNE      |L1.20|
;;;56           ;
;;;57        /* ------- */
;;;58             /* all clear */
;;;59        IINCHIP_WRITE( Sn_IR(s) , 0xFF);
000024  f44f7102          MOV      r1,#0x208
000028  eb011044          ADD      r0,r1,r4,LSL #5
00002c  21ff              MOVS     r1,#0xff
00002e  f7fffffe          BL       IINCHIP_WRITE
;;;60     }
000032  bd10              POP      {r4,pc}
;;;61     
                          ENDP


                          AREA ||i.connect||, CODE, READONLY, ALIGN=1

                  connect PROC
;;;92     */
;;;93     uint8 connect(SOCKET s, uint8 * addr, uint16 port)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;94     {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
;;;95         uint8 ret;				// ret定义为是否连接的标志位，ret=0  连接中断；ret=1连接成功
;;;96         if							
00000a  7820              LDRB     r0,[r4,#0]
00000c  28ff              CMP      r0,#0xff
00000e  d108              BNE      |L2.34|
;;;97             (
;;;98                 ((addr[0] == 0xFF) && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) ||
000010  7860              LDRB     r0,[r4,#1]
000012  28ff              CMP      r0,#0xff
000014  d105              BNE      |L2.34|
000016  78a0              LDRB     r0,[r4,#2]
000018  28ff              CMP      r0,#0xff
00001a  d102              BNE      |L2.34|
00001c  78e0              LDRB     r0,[r4,#3]
00001e  28ff              CMP      r0,#0xff
000020  d008              BEQ      |L2.52|
                  |L2.34|
;;;99                 ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||
000022  7820              LDRB     r0,[r4,#0]
000024  b928              CBNZ     r0,|L2.50|
000026  7860              LDRB     r0,[r4,#1]
000028  b918              CBNZ     r0,|L2.50|
00002a  78a0              LDRB     r0,[r4,#2]
00002c  b908              CBNZ     r0,|L2.50|
00002e  78e0              LDRB     r0,[r4,#3]
000030  b100              CBZ      r0,|L2.52|
                  |L2.50|
;;;100                (port == 0x00)
000032  b90e              CBNZ     r6,|L2.56|
                  |L2.52|
;;;101            )
;;;102        {
;;;103          ret = 0;				// 如果IP地址和Port无法获取，则连接中断
000034  2700              MOVS     r7,#0
000036  e05c              B        |L2.242|
                  |L2.56|
;;;104        }
;;;105        else							// 如果目的IP和Port未设置，则进行设置
;;;106        {
;;;107            ret = 1;
000038  2701              MOVS     r7,#1
;;;108            IINCHIP_WRITE( Sn_DIPR0(s), addr[0]);
00003a  7821              LDRB     r1,[r4,#0]
00003c  f6404208          MOV      r2,#0xc08
000040  eb021045          ADD      r0,r2,r5,LSL #5
000044  f7fffffe          BL       IINCHIP_WRITE
;;;109            IINCHIP_WRITE( Sn_DIPR1(s), addr[1]);
000048  7861              LDRB     r1,[r4,#1]
00004a  f6405208          MOV      r2,#0xd08
00004e  eb021045          ADD      r0,r2,r5,LSL #5
000052  f7fffffe          BL       IINCHIP_WRITE
;;;110            IINCHIP_WRITE( Sn_DIPR2(s), addr[2]);
000056  78a1              LDRB     r1,[r4,#2]
000058  f6406208          MOV      r2,#0xe08
00005c  eb021045          ADD      r0,r2,r5,LSL #5
000060  f7fffffe          BL       IINCHIP_WRITE
;;;111            IINCHIP_WRITE( Sn_DIPR3(s), addr[3]);
000064  78e1              LDRB     r1,[r4,#3]
000066  f6407208          MOV      r2,#0xf08
00006a  eb021045          ADD      r0,r2,r5,LSL #5
00006e  f7fffffe          BL       IINCHIP_WRITE
;;;112            IINCHIP_WRITE( Sn_DPORT0(s), (uint8)((port & 0xff00) >> 8));
000072  0a31              LSRS     r1,r6,#8
000074  f2410208          MOV      r2,#0x1008
000078  eb021045          ADD      r0,r2,r5,LSL #5
00007c  f7fffffe          BL       IINCHIP_WRITE
;;;113            IINCHIP_WRITE( Sn_DPORT1(s), (uint8)(port & 0x00ff));
000080  b2f1              UXTB     r1,r6
000082  f2411208          MOV      r2,#0x1108
000086  eb021045          ADD      r0,r2,r5,LSL #5
00008a  f7fffffe          BL       IINCHIP_WRITE
;;;114     
;;;115    				IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_CONNECT);						// Sn_CR数值设为0x04，并执行TCP连接请求命令
00008e  f44f7184          MOV      r1,#0x108
000092  eb011045          ADD      r0,r1,r5,LSL #5
000096  2104              MOVS     r1,#4
000098  f7fffffe          BL       IINCHIP_WRITE
;;;116    
;;;117            while ( IINCHIP_READ(Sn_CR(s) ) ) ;									// MCU读取Sn_CR(s)的数值
00009c  bf00              NOP      
                  |L2.158|
00009e  f44f7184          MOV      r1,#0x108
0000a2  eb011045          ADD      r0,r1,r5,LSL #5
0000a6  f7fffffe          BL       IINCHIP_READ
0000aa  2800              CMP      r0,#0
0000ac  d1f7              BNE      |L2.158|
;;;118    
;;;119            while ( IINCHIP_READ(Sn_SR(s)) != SOCK_SYNSENT )		// 此时Sn_SR(s)寄存器应该处于SOCK_SYNSENT，下面排除不在该状态的几种情况
0000ae  e017              B        |L2.224|
                  |L2.176|
;;;120            {
;;;121                if(IINCHIP_READ(Sn_SR(s)) == SOCK_ESTABLISHED)	// Socket连接已经建立，正常连接
0000b0  f44f7142          MOV      r1,#0x308
0000b4  eb011045          ADD      r0,r1,r5,LSL #5
0000b8  f7fffffe          BL       IINCHIP_READ
0000bc  2817              CMP      r0,#0x17
0000be  d100              BNE      |L2.194|
;;;122                {
;;;123                    break;
0000c0  e016              B        |L2.240|
                  |L2.194|
;;;124                }
;;;125                if (getSn_IR(s) & Sn_IR_TIMEOUT)								// 当ARPto或TCPto超时，异常
0000c2  4628              MOV      r0,r5
0000c4  f7fffffe          BL       getSn_IR
0000c8  f0100f08          TST      r0,#8
0000cc  d008              BEQ      |L2.224|
;;;126                {
;;;127                    IINCHIP_WRITE(Sn_IR(s), (Sn_IR_TIMEOUT));   // 通知MCU该中断，并清中断
0000ce  f44f7102          MOV      r1,#0x208
0000d2  eb011045          ADD      r0,r1,r5,LSL #5
0000d6  2108              MOVS     r1,#8
0000d8  f7fffffe          BL       IINCHIP_WRITE
;;;128                    ret = 0;																		// ret置0，连接中断
0000dc  2700              MOVS     r7,#0
;;;129                    break;
0000de  e007              B        |L2.240|
                  |L2.224|
0000e0  f44f7142          MOV      r1,#0x308             ;119
0000e4  eb011045          ADD      r0,r1,r5,LSL #5       ;119
0000e8  f7fffffe          BL       IINCHIP_READ
0000ec  2815              CMP      r0,#0x15              ;119
0000ee  d1df              BNE      |L2.176|
                  |L2.240|
0000f0  bf00              NOP                            ;123
                  |L2.242|
;;;130                }
;;;131            }
;;;132        }
;;;133    
;;;134       return ret;
0000f2  4638              MOV      r0,r7
;;;135    }
0000f4  e8bd81f0          POP      {r4-r8,pc}
;;;136    
                          ENDP


                          AREA ||i.disconnect||, CODE, READONLY, ALIGN=1

                  disconnect PROC
;;;142    */
;;;143    void disconnect(SOCKET s)
000000  b510              PUSH     {r4,lr}
;;;144    {
000002  4604              MOV      r4,r0
;;;145       IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_DISCON);
000004  f44f7184          MOV      r1,#0x108
000008  eb011044          ADD      r0,r1,r4,LSL #5
00000c  2108              MOVS     r1,#8
00000e  f7fffffe          BL       IINCHIP_WRITE
;;;146    
;;;147       /* wait to process the command... */
;;;148       while( IINCHIP_READ(Sn_CR(s) ) )
000012  bf00              NOP      
                  |L3.20|
000014  f44f7184          MOV      r1,#0x108
000018  eb011044          ADD      r0,r1,r4,LSL #5
00001c  f7fffffe          BL       IINCHIP_READ
000020  2800              CMP      r0,#0
000022  d1f7              BNE      |L3.20|
;;;149          ;
;;;150       /* ------- */
;;;151    }
000024  bd10              POP      {r4,pc}
;;;152    
                          ENDP


                          AREA ||i.listen||, CODE, READONLY, ALIGN=1

                  listen PROC
;;;66     */
;;;67     uint8 listen(SOCKET s)
000000  b570              PUSH     {r4-r6,lr}
;;;68     {
000002  4604              MOV      r4,r0
;;;69        uint8 ret;
;;;70        if (IINCHIP_READ( Sn_SR(s) ) == SOCK_INIT)
000004  f44f7142          MOV      r1,#0x308
000008  eb011044          ADD      r0,r1,r4,LSL #5
00000c  f7fffffe          BL       IINCHIP_READ
000010  2813              CMP      r0,#0x13
000012  d111              BNE      |L4.56|
;;;71        {
;;;72           IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_LISTEN);
000014  f44f7184          MOV      r1,#0x108
000018  eb011044          ADD      r0,r1,r4,LSL #5
00001c  2102              MOVS     r1,#2
00001e  f7fffffe          BL       IINCHIP_WRITE
;;;73           /* wait to process the command... */
;;;74           while( IINCHIP_READ(Sn_CR(s) ) )
000022  bf00              NOP      
                  |L4.36|
000024  f44f7184          MOV      r1,#0x108
000028  eb011044          ADD      r0,r1,r4,LSL #5
00002c  f7fffffe          BL       IINCHIP_READ
000030  2800              CMP      r0,#0
000032  d1f7              BNE      |L4.36|
;;;75              ;
;;;76           /* ------- */
;;;77           ret = 1;
000034  2501              MOVS     r5,#1
000036  e000              B        |L4.58|
                  |L4.56|
;;;78        }
;;;79        else
;;;80        {
;;;81           ret = 0;
000038  2500              MOVS     r5,#0
                  |L4.58|
;;;82        }
;;;83        return ret;
00003a  4628              MOV      r0,r5
;;;84     }
00003c  bd70              POP      {r4-r6,pc}
;;;85     
                          ENDP


                          AREA ||i.recv||, CODE, READONLY, ALIGN=1

                  recv PROC
;;;212    */
;;;213    uint16 recv(SOCKET s, uint8 * buf, uint16 len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;214    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;215       uint16 ret=0;
00000a  2700              MOVS     r7,#0
;;;216       if ( len > 0 )
00000c  2d00              CMP      r5,#0
00000e  dd15              BLE      |L5.60|
;;;217       {
;;;218          recv_data_processing(s, buf, len);
000010  462a              MOV      r2,r5
000012  4631              MOV      r1,r6
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       recv_data_processing
;;;219          IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_RECV);
00001a  f44f7184          MOV      r1,#0x108
00001e  eb011044          ADD      r0,r1,r4,LSL #5
000022  2140              MOVS     r1,#0x40
000024  f7fffffe          BL       IINCHIP_WRITE
;;;220          /* wait to process the command... */
;;;221          while( IINCHIP_READ(Sn_CR(s) ));
000028  bf00              NOP      
                  |L5.42|
00002a  f44f7184          MOV      r1,#0x108
00002e  eb011044          ADD      r0,r1,r4,LSL #5
000032  f7fffffe          BL       IINCHIP_READ
000036  2800              CMP      r0,#0
000038  d1f7              BNE      |L5.42|
;;;222          /* ------- */
;;;223          ret = len;
00003a  462f              MOV      r7,r5
                  |L5.60|
;;;224       }
;;;225       return ret;
00003c  4638              MOV      r0,r7
;;;226    }
00003e  e8bd81f0          POP      {r4-r8,pc}
;;;227    
                          ENDP


                          AREA ||i.recvfrom||, CODE, READONLY, ALIGN=2

                  recvfrom PROC
;;;283    */
;;;284    uint16 recvfrom(SOCKET s, uint8 * buf, uint16 len, uint8 * addr, uint16 *port)
000000  e92d5ffc          PUSH     {r2-r12,lr}
;;;285    {
000004  4605              MOV      r5,r0
000006  4689              MOV      r9,r1
000008  4690              MOV      r8,r2
00000a  461f              MOV      r7,r3
00000c  f8ddb030          LDR      r11,[sp,#0x30]
;;;286       uint8 head[8];
;;;287       uint16 data_len=0;
000010  2600              MOVS     r6,#0
;;;288       uint16 ptr=0;
000012  2400              MOVS     r4,#0
;;;289       uint32 addrbsb =0;
000014  46a2              MOV      r10,r4
;;;290       if ( len > 0 )
000016  f1b80f00          CMP      r8,#0
00001a  dd7d              BLE      |L6.280|
;;;291       {
;;;292          ptr     = IINCHIP_READ(Sn_RX_RD0(s) );
00001c  f6420108          MOV      r1,#0x2808
000020  eb011045          ADD      r0,r1,r5,LSL #5
000024  f7fffffe          BL       IINCHIP_READ
000028  4604              MOV      r4,r0
;;;293          ptr     = ((ptr & 0x00ff) << 8) + IINCHIP_READ(Sn_RX_RD1(s));
00002a  f6421108          MOV      r1,#0x2908
00002e  eb011045          ADD      r0,r1,r5,LSL #5
000032  f7fffffe          BL       IINCHIP_READ
000036  eb002004          ADD      r0,r0,r4,LSL #8
00003a  b284              UXTH     r4,r0
;;;294          addrbsb = (uint32)(ptr<<8) +  (s<<5) + 0x18;
00003c  0220              LSLS     r0,r4,#8
00003e  eb001045          ADD      r0,r0,r5,LSL #5
000042  f1000a18          ADD      r10,r0,#0x18
;;;295          
;;;296          switch (IINCHIP_READ(Sn_MR(s) ) & 0x07)
000046  2108              MOVS     r1,#8
000048  eb011045          ADD      r0,r1,r5,LSL #5
00004c  f7fffffe          BL       IINCHIP_READ
000050  f0000007          AND      r0,r0,#7
000054  2802              CMP      r0,#2
000056  d004              BEQ      |L6.98|
000058  2803              CMP      r0,#3
00005a  d02c              BEQ      |L6.182|
00005c  2804              CMP      r0,#4
00005e  d175              BNE      |L6.332|
000060  e060              B        |L6.292|
                  |L6.98|
;;;297          {
;;;298          case Sn_MR_UDP :
;;;299            wiz_read_buf(addrbsb, head, 0x08);        
000062  2208              MOVS     r2,#8
000064  4669              MOV      r1,sp
000066  4650              MOV      r0,r10
000068  f7fffffe          BL       wiz_read_buf
;;;300            ptr += 8;
00006c  f1040008          ADD      r0,r4,#8
000070  b284              UXTH     r4,r0
;;;301          //会使广播地址变为源地址
;;;302            // read peer's IP address, port number.
;;;303            /*addr[0]  = head[0];
;;;304            addr[1]  = head[1];
;;;305            addr[2]  = head[2];
;;;306            addr[3]  = head[3];*/
;;;307            //*port    = head[4];
;;;308            //*port    = (*port << 8) + head[5];
;;;309            data_len = head[6];
000072  f89d6006          LDRB     r6,[sp,#6]
;;;310            data_len = (data_len << 8) + head[7];
000076  f89d0007          LDRB     r0,[sp,#7]
00007a  eb002006          ADD      r0,r0,r6,LSL #8
00007e  b286              UXTH     r6,r0
;;;311    
;;;312            addrbsb = (uint32)(ptr<<8) +  (s<<5) + 0x18;
000080  0220              LSLS     r0,r4,#8
000082  eb001045          ADD      r0,r0,r5,LSL #5
000086  f1000a18          ADD      r10,r0,#0x18
;;;313            wiz_read_buf(addrbsb, buf, data_len);                
00008a  4632              MOV      r2,r6
00008c  4649              MOV      r1,r9
00008e  4650              MOV      r0,r10
000090  f7fffffe          BL       wiz_read_buf
;;;314            ptr += data_len;
000094  19a0              ADDS     r0,r4,r6
000096  b284              UXTH     r4,r0
;;;315    
;;;316            IINCHIP_WRITE( Sn_RX_RD0(s), (uint8)((ptr & 0xff00) >> 8));
000098  0a21              LSRS     r1,r4,#8
00009a  f6420208          MOV      r2,#0x2808
00009e  eb021045          ADD      r0,r2,r5,LSL #5
0000a2  f7fffffe          BL       IINCHIP_WRITE
;;;317            IINCHIP_WRITE( Sn_RX_RD1(s), (uint8)(ptr & 0x00ff));
0000a6  b2e1              UXTB     r1,r4
0000a8  f6421208          MOV      r2,#0x2908
0000ac  eb021045          ADD      r0,r2,r5,LSL #5
0000b0  f7fffffe          BL       IINCHIP_WRITE
;;;318            break;
0000b4  e06c              B        |L6.400|
                  |L6.182|
;;;319    
;;;320          case Sn_MR_IPRAW :
;;;321            wiz_read_buf(addrbsb, head, 0x06);        
0000b6  2206              MOVS     r2,#6
0000b8  4669              MOV      r1,sp
0000ba  4650              MOV      r0,r10
0000bc  f7fffffe          BL       wiz_read_buf
;;;322            ptr += 6;
0000c0  1da0              ADDS     r0,r4,#6
0000c2  b284              UXTH     r4,r0
;;;323            addr[0]  = head[0];
0000c4  f89d0000          LDRB     r0,[sp,#0]
0000c8  7038              STRB     r0,[r7,#0]
;;;324            addr[1]  = head[1];
0000ca  f89d0001          LDRB     r0,[sp,#1]
0000ce  7078              STRB     r0,[r7,#1]
;;;325            addr[2]  = head[2];
0000d0  f89d0002          LDRB     r0,[sp,#2]
0000d4  70b8              STRB     r0,[r7,#2]
;;;326            addr[3]  = head[3];
0000d6  f89d0003          LDRB     r0,[sp,#3]
0000da  70f8              STRB     r0,[r7,#3]
;;;327            data_len = head[4];
0000dc  f89d6004          LDRB     r6,[sp,#4]
;;;328            data_len = (data_len << 8) + head[5];
0000e0  f89d0005          LDRB     r0,[sp,#5]
0000e4  eb002006          ADD      r0,r0,r6,LSL #8
0000e8  b286              UXTH     r6,r0
;;;329    
;;;330            addrbsb  = (uint32)(ptr<<8) +  (s<<5) + 0x18;
0000ea  0220              LSLS     r0,r4,#8
0000ec  eb001045          ADD      r0,r0,r5,LSL #5
0000f0  f1000a18          ADD      r10,r0,#0x18
;;;331            wiz_read_buf(addrbsb, buf, data_len);        
0000f4  4632              MOV      r2,r6
0000f6  4649              MOV      r1,r9
0000f8  4650              MOV      r0,r10
0000fa  f7fffffe          BL       wiz_read_buf
;;;332            ptr += data_len;
0000fe  19a0              ADDS     r0,r4,r6
000100  b284              UXTH     r4,r0
;;;333    
;;;334            IINCHIP_WRITE( Sn_RX_RD0(s), (uint8)((ptr & 0xff00) >> 8));
000102  0a21              LSRS     r1,r4,#8
000104  f6420208          MOV      r2,#0x2808
000108  eb021045          ADD      r0,r2,r5,LSL #5
00010c  f7fffffe          BL       IINCHIP_WRITE
;;;335            IINCHIP_WRITE( Sn_RX_RD1(s), (uint8)(ptr & 0x00ff));
000110  b2e1              UXTB     r1,r4
000112  f6421208          MOV      r2,#0x2908
000116  e000              B        |L6.282|
                  |L6.280|
000118  e04b              B        |L6.434|
                  |L6.282|
00011a  eb021045          ADD      r0,r2,r5,LSL #5
00011e  f7fffffe          BL       IINCHIP_WRITE
;;;336            break;
000122  e035              B        |L6.400|
                  |L6.292|
;;;337    
;;;338          case Sn_MR_MACRAW :
;;;339            wiz_read_buf(addrbsb, head, 0x02);
000124  2202              MOVS     r2,#2
000126  4669              MOV      r1,sp
000128  4650              MOV      r0,r10
00012a  f7fffffe          BL       wiz_read_buf
;;;340            ptr+=2;
00012e  1ca0              ADDS     r0,r4,#2
000130  b284              UXTH     r4,r0
;;;341            data_len = head[0];
000132  f89d6000          LDRB     r6,[sp,#0]
;;;342            data_len = (data_len<<8) + head[1] - 2;
000136  f89d0001          LDRB     r0,[sp,#1]
00013a  eb002006          ADD      r0,r0,r6,LSL #8
00013e  1e80              SUBS     r0,r0,#2
000140  b286              UXTH     r6,r0
;;;343            if(data_len > 1514)
000142  f24050ea          MOV      r0,#0x5ea
000146  4286              CMP      r6,r0
000148  dd06              BLE      |L6.344|
;;;344            {
;;;345               printf("data_len over 1514\r\n");
00014a  e000              B        |L6.334|
                  |L6.332|
00014c  e01f              B        |L6.398|
                  |L6.334|
00014e  a01a              ADR      r0,|L6.440|
000150  f7fffffe          BL       __2printf
;;;346               while(1);
000154  bf00              NOP      
                  |L6.342|
000156  e7fe              B        |L6.342|
                  |L6.344|
;;;347            }
;;;348    
;;;349            addrbsb  = (uint32)(ptr<<8) +  (s<<5) + 0x18;
000158  0220              LSLS     r0,r4,#8
00015a  eb001045          ADD      r0,r0,r5,LSL #5
00015e  f1000a18          ADD      r10,r0,#0x18
;;;350            wiz_read_buf(addrbsb, buf, data_len);
000162  4632              MOV      r2,r6
000164  4649              MOV      r1,r9
000166  4650              MOV      r0,r10
000168  f7fffffe          BL       wiz_read_buf
;;;351            ptr += data_len;
00016c  19a0              ADDS     r0,r4,r6
00016e  b284              UXTH     r4,r0
;;;352    
;;;353            IINCHIP_WRITE( Sn_RX_RD0(s), (uint8)((ptr & 0xff00) >> 8));
000170  0a21              LSRS     r1,r4,#8
000172  f6420208          MOV      r2,#0x2808
000176  eb021045          ADD      r0,r2,r5,LSL #5
00017a  f7fffffe          BL       IINCHIP_WRITE
;;;354            IINCHIP_WRITE( Sn_RX_RD1(s), (uint8)(ptr & 0x00ff));
00017e  b2e1              UXTB     r1,r4
000180  f6421208          MOV      r2,#0x2908
000184  eb021045          ADD      r0,r2,r5,LSL #5
000188  f7fffffe          BL       IINCHIP_WRITE
;;;355            break;
00018c  e000              B        |L6.400|
                  |L6.398|
;;;356    
;;;357          default :
;;;358                break;
00018e  bf00              NOP      
                  |L6.400|
000190  bf00              NOP                            ;318
;;;359          }
;;;360          IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_RECV);
000192  f44f7184          MOV      r1,#0x108
000196  eb011045          ADD      r0,r1,r5,LSL #5
00019a  2140              MOVS     r1,#0x40
00019c  f7fffffe          BL       IINCHIP_WRITE
;;;361    
;;;362          /* wait to process the command... */
;;;363          while( IINCHIP_READ( Sn_CR(s)) ) ;
0001a0  bf00              NOP      
                  |L6.418|
0001a2  f44f7184          MOV      r1,#0x108
0001a6  eb011045          ADD      r0,r1,r5,LSL #5
0001aa  f7fffffe          BL       IINCHIP_READ
0001ae  2800              CMP      r0,#0
0001b0  d1f7              BNE      |L6.418|
                  |L6.434|
;;;364          /* ------- */
;;;365       }
;;;366       return data_len;
0001b2  4630              MOV      r0,r6
;;;367    }
0001b4  e8bd9ffc          POP      {r2-r12,pc}
;;;368    
                          ENDP

                  |L6.440|
0001b8  64617461          DCB      "data_len over 1514\r\n",0
0001bc  5f6c656e
0001c0  206f7665
0001c4  72203135
0001c8  31340d0a
0001cc  00      
0001cd  00                DCB      0
0001ce  00                DCB      0
0001cf  00                DCB      0

                          AREA ||i.send||, CODE, READONLY, ALIGN=2

                  send PROC
;;;157    */
;;;158    uint16 send(SOCKET s, const uint8 * buf, uint16 len)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;159    {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
000008  4616              MOV      r6,r2
;;;160      uint8 status=0;
00000a  2500              MOVS     r5,#0
;;;161      uint16 ret=0;
00000c  2700              MOVS     r7,#0
;;;162      uint16 freesize=0;
00000e  46a9              MOV      r9,r5
;;;163    
;;;164      if (len > getIINCHIP_TxMAX(s)) 
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       getIINCHIP_TxMAX
000016  42b0              CMP      r0,r6
000018  da04              BGE      |L7.36|
;;;165    			ret = getIINCHIP_TxMAX(s); 
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       getIINCHIP_TxMAX
000020  4607              MOV      r7,r0
000022  e000              B        |L7.38|
                  |L7.36|
;;;166      else ret = len;
000024  4637              MOV      r7,r6
                  |L7.38|
;;;167      do
000026  bf00              NOP      
                  |L7.40|
;;;168      {
;;;169        freesize = getSn_TX_FSR(s);
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       getSn_TX_FSR
00002e  4681              MOV      r9,r0
;;;170        status = IINCHIP_READ(Sn_SR(s));
000030  f44f7142          MOV      r1,#0x308
000034  eb011044          ADD      r0,r1,r4,LSL #5
000038  f7fffffe          BL       IINCHIP_READ
00003c  4605              MOV      r5,r0
;;;171        if ((status != SOCK_ESTABLISHED) && (status != SOCK_CLOSE_WAIT))
00003e  2d17              CMP      r5,#0x17
000040  d003              BEQ      |L7.74|
000042  2d1c              CMP      r5,#0x1c
000044  d001              BEQ      |L7.74|
;;;172        {
;;;173          ret = 0;
000046  2700              MOVS     r7,#0
;;;174          break;
000048  e001              B        |L7.78|
                  |L7.74|
;;;175        }
;;;176      } 
;;;177    	while (freesize < ret);
00004a  45b9              CMP      r9,r7
00004c  dbec              BLT      |L7.40|
                  |L7.78|
00004e  bf00              NOP                            ;174
;;;178      send_data_processing(s, (uint8 *)buf, ret);			 
000050  463a              MOV      r2,r7
000052  4641              MOV      r1,r8
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       send_data_processing
;;;179      IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_SEND);
00005a  f44f7184          MOV      r1,#0x108
00005e  eb011044          ADD      r0,r1,r4,LSL #5
000062  2120              MOVS     r1,#0x20
000064  f7fffffe          BL       IINCHIP_WRITE
;;;180    
;;;181      /* wait to process the command... */
;;;182      while( IINCHIP_READ(Sn_CR(s) ) );
000068  bf00              NOP      
                  |L7.106|
00006a  f44f7184          MOV      r1,#0x108
00006e  eb011044          ADD      r0,r1,r4,LSL #5
000072  f7fffffe          BL       IINCHIP_READ
000076  2800              CMP      r0,#0
000078  d1f7              BNE      |L7.106|
;;;183    
;;;184      while ( (IINCHIP_READ(Sn_IR(s) ) & Sn_IR_SEND_OK) != Sn_IR_SEND_OK )
00007a  e013              B        |L7.164|
                  |L7.124|
;;;185      {
;;;186        status = IINCHIP_READ(Sn_SR(s));
00007c  f44f7142          MOV      r1,#0x308
000080  eb011044          ADD      r0,r1,r4,LSL #5
000084  f7fffffe          BL       IINCHIP_READ
000088  4605              MOV      r5,r0
;;;187        if ((status != SOCK_ESTABLISHED) && (status != SOCK_CLOSE_WAIT) )
00008a  2d17              CMP      r5,#0x17
00008c  d00a              BEQ      |L7.164|
00008e  2d1c              CMP      r5,#0x1c
000090  d008              BEQ      |L7.164|
;;;188        {
;;;189          printf("SEND_OK Problem!!\r\n");
000092  a011              ADR      r0,|L7.216|
000094  f7fffffe          BL       __2printf
;;;190          close(s);
000098  4620              MOV      r0,r4
00009a  f7fffffe          BL       close
;;;191          return 0;
00009e  2000              MOVS     r0,#0
                  |L7.160|
;;;192        }
;;;193      }
;;;194      IINCHIP_WRITE( Sn_IR(s) , Sn_IR_SEND_OK);
;;;195    
;;;196    #ifdef __DEF_IINCHIP_INT__
;;;197       putISR(s, getISR(s) & (~Sn_IR_SEND_OK));
;;;198    #else
;;;199       IINCHIP_WRITE( Sn_IR(s) , Sn_IR_SEND_OK);
;;;200    #endif
;;;201    
;;;202       return ret;
;;;203    }
0000a0  e8bd87f0          POP      {r4-r10,pc}
                  |L7.164|
0000a4  f44f7102          MOV      r1,#0x208             ;184
0000a8  eb011044          ADD      r0,r1,r4,LSL #5       ;184
0000ac  f7fffffe          BL       IINCHIP_READ
0000b0  f0000010          AND      r0,r0,#0x10           ;184
0000b4  2810              CMP      r0,#0x10              ;184
0000b6  d1e1              BNE      |L7.124|
0000b8  f44f7102          MOV      r1,#0x208             ;194
0000bc  eb011044          ADD      r0,r1,r4,LSL #5       ;194
0000c0  2110              MOVS     r1,#0x10              ;194
0000c2  f7fffffe          BL       IINCHIP_WRITE
0000c6  f44f7102          MOV      r1,#0x208             ;199
0000ca  eb011044          ADD      r0,r1,r4,LSL #5       ;199
0000ce  2110              MOVS     r1,#0x10              ;199
0000d0  f7fffffe          BL       IINCHIP_WRITE
0000d4  4638              MOV      r0,r7                 ;202
0000d6  e7e3              B        |L7.160|
;;;204    
                          ENDP

                  |L7.216|
0000d8  53454e44          DCB      "SEND_OK Problem!!\r\n",0
0000dc  5f4f4b20
0000e0  50726f62
0000e4  6c656d21
0000e8  210d0a00

                          AREA ||i.send_ka||, CODE, READONLY, ALIGN=1

                  send_ka PROC
;;;368    
;;;369    void send_ka(SOCKET s)
000000  b510              PUSH     {r4,lr}
;;;370    {
000002  4604              MOV      r4,r0
;;;371      IINCHIP_WRITE(Sn_CR(s),Sn_CR_SEND_KEEP);
000004  f44f7184          MOV      r1,#0x108
000008  eb011044          ADD      r0,r1,r4,LSL #5
00000c  2122              MOVS     r1,#0x22
00000e  f7fffffe          BL       IINCHIP_WRITE
;;;372      return;
;;;373    }
000012  bd10              POP      {r4,pc}
;;;374    
                          ENDP


                          AREA ||i.sendto||, CODE, READONLY, ALIGN=1

                  sendto PROC
;;;234    */
;;;235    uint16 sendto(SOCKET s, const uint8 * buf, uint16 len, uint8 * addr, uint16 port)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;236    {
000004  4604              MOV      r4,r0
000006  4689              MOV      r9,r1
000008  4616              MOV      r6,r2
00000a  461d              MOV      r5,r3
00000c  9f08              LDR      r7,[sp,#0x20]
;;;237       uint16 ret=0;
00000e  f04f0800          MOV      r8,#0
;;;238    
;;;239       if (len > getIINCHIP_TxMAX(s)) ret = getIINCHIP_TxMAX(s); // check size not to exceed MAX size.
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       getIINCHIP_TxMAX
000018  42b0              CMP      r0,r6
00001a  da04              BGE      |L9.38|
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       getIINCHIP_TxMAX
000022  4680              MOV      r8,r0
000024  e000              B        |L9.40|
                  |L9.38|
;;;240       else ret = len;
000026  46b0              MOV      r8,r6
                  |L9.40|
;;;241    
;;;242       if( ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) || ((port == 0x00)) )//||(ret == 0) )
000028  7828              LDRB     r0,[r5,#0]
00002a  b928              CBNZ     r0,|L9.56|
00002c  7868              LDRB     r0,[r5,#1]
00002e  b918              CBNZ     r0,|L9.56|
000030  78a8              LDRB     r0,[r5,#2]
000032  b908              CBNZ     r0,|L9.56|
000034  78e8              LDRB     r0,[r5,#3]
000036  b100              CBZ      r0,|L9.58|
                  |L9.56|
000038  b917              CBNZ     r7,|L9.64|
                  |L9.58|
;;;243       {
;;;244          /* added return value */
;;;245          ret = 0;
00003a  f04f0800          MOV      r8,#0
00003e  e063              B        |L9.264|
                  |L9.64|
;;;246       }
;;;247       else
;;;248       {
;;;249          IINCHIP_WRITE( Sn_DIPR0(s), addr[0]);
000040  7829              LDRB     r1,[r5,#0]
000042  f6404208          MOV      r2,#0xc08
000046  eb021044          ADD      r0,r2,r4,LSL #5
00004a  f7fffffe          BL       IINCHIP_WRITE
;;;250          IINCHIP_WRITE( Sn_DIPR1(s), addr[1]);
00004e  7869              LDRB     r1,[r5,#1]
000050  f6405208          MOV      r2,#0xd08
000054  eb021044          ADD      r0,r2,r4,LSL #5
000058  f7fffffe          BL       IINCHIP_WRITE
;;;251          IINCHIP_WRITE( Sn_DIPR2(s), addr[2]);
00005c  78a9              LDRB     r1,[r5,#2]
00005e  f6406208          MOV      r2,#0xe08
000062  eb021044          ADD      r0,r2,r4,LSL #5
000066  f7fffffe          BL       IINCHIP_WRITE
;;;252          IINCHIP_WRITE( Sn_DIPR3(s), addr[3]);
00006a  78e9              LDRB     r1,[r5,#3]
00006c  f6407208          MOV      r2,#0xf08
000070  eb021044          ADD      r0,r2,r4,LSL #5
000074  f7fffffe          BL       IINCHIP_WRITE
;;;253          IINCHIP_WRITE( Sn_DPORT0(s),(uint8)((port & 0xff00) >> 8));
000078  0a39              LSRS     r1,r7,#8
00007a  f2410208          MOV      r2,#0x1008
00007e  eb021044          ADD      r0,r2,r4,LSL #5
000082  f7fffffe          BL       IINCHIP_WRITE
;;;254          IINCHIP_WRITE( Sn_DPORT1(s),(uint8)(port & 0x00ff));
000086  b2f9              UXTB     r1,r7
000088  f2411208          MOV      r2,#0x1108
00008c  eb021044          ADD      r0,r2,r4,LSL #5
000090  f7fffffe          BL       IINCHIP_WRITE
;;;255          // copy data
;;;256          send_data_processing(s, (uint8 *)buf, ret);
000094  4642              MOV      r2,r8
000096  4649              MOV      r1,r9
000098  4620              MOV      r0,r4
00009a  f7fffffe          BL       send_data_processing
;;;257          IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_SEND);
00009e  f44f7184          MOV      r1,#0x108
0000a2  eb011044          ADD      r0,r1,r4,LSL #5
0000a6  2120              MOVS     r1,#0x20
0000a8  f7fffffe          BL       IINCHIP_WRITE
;;;258          /* wait to process the command... */
;;;259          while( IINCHIP_READ( Sn_CR(s) ) )
0000ac  bf00              NOP      
                  |L9.174|
0000ae  f44f7184          MOV      r1,#0x108
0000b2  eb011044          ADD      r0,r1,r4,LSL #5
0000b6  f7fffffe          BL       IINCHIP_READ
0000ba  2800              CMP      r0,#0
0000bc  d1f7              BNE      |L9.174|
;;;260             ;
;;;261          /* ------- */
;;;262    
;;;263          while( (IINCHIP_READ( Sn_IR(s) ) & Sn_IR_SEND_OK) != Sn_IR_SEND_OK )
0000be  e012              B        |L9.230|
                  |L9.192|
;;;264          {
;;;265             if (IINCHIP_READ( Sn_IR(s) ) & Sn_IR_TIMEOUT)
0000c0  f44f7102          MOV      r1,#0x208
0000c4  eb011044          ADD      r0,r1,r4,LSL #5
0000c8  f7fffffe          BL       IINCHIP_READ
0000cc  f0100f08          TST      r0,#8
0000d0  d009              BEQ      |L9.230|
;;;266             {
;;;267                /* clear interrupt */
;;;268                IINCHIP_WRITE( Sn_IR(s) , (Sn_IR_SEND_OK | Sn_IR_TIMEOUT)); /* clear SEND_OK & TIMEOUT */
0000d2  f44f7102          MOV      r1,#0x208
0000d6  eb011044          ADD      r0,r1,r4,LSL #5
0000da  2118              MOVS     r1,#0x18
0000dc  f7fffffe          BL       IINCHIP_WRITE
;;;269                return 0;
0000e0  2000              MOVS     r0,#0
                  |L9.226|
;;;270             }
;;;271          }
;;;272          IINCHIP_WRITE( Sn_IR(s) , Sn_IR_SEND_OK);
;;;273       }
;;;274       return ret;
;;;275    }
0000e2  e8bd87f0          POP      {r4-r10,pc}
                  |L9.230|
0000e6  f44f7102          MOV      r1,#0x208             ;263
0000ea  eb011044          ADD      r0,r1,r4,LSL #5       ;263
0000ee  f7fffffe          BL       IINCHIP_READ
0000f2  f0000010          AND      r0,r0,#0x10           ;263
0000f6  2810              CMP      r0,#0x10              ;263
0000f8  d1e2              BNE      |L9.192|
0000fa  f44f7102          MOV      r1,#0x208             ;272
0000fe  eb011044          ADD      r0,r1,r4,LSL #5       ;272
000102  2110              MOVS     r1,#0x10              ;272
000104  f7fffffe          BL       IINCHIP_WRITE
                  |L9.264|
000108  4640              MOV      r0,r8                 ;274
00010a  e7ea              B        |L9.226|
;;;276    
                          ENDP


                          AREA ||i.socket||, CODE, READONLY, ALIGN=2

                  socket PROC
;;;9      */
;;;10     uint8 socket(SOCKET s, uint8 protocol, uint16 port, uint8 flag)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;11     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  4698              MOV      r8,r3
;;;12        uint8 ret;
;;;13        if (
00000c  f005000f          AND      r0,r5,#0xf
000010  2801              CMP      r0,#1
000012  d00f              BEQ      |L10.52|
;;;14             ((protocol&0x0F) == Sn_MR_TCP)    ||
;;;15             ((protocol&0x0F) == Sn_MR_UDP)    ||
000014  f005000f          AND      r0,r5,#0xf
000018  2802              CMP      r0,#2
00001a  d00b              BEQ      |L10.52|
;;;16             ((protocol&0x0F) == Sn_MR_IPRAW)  ||
00001c  f005000f          AND      r0,r5,#0xf
000020  2803              CMP      r0,#3
000022  d007              BEQ      |L10.52|
;;;17             ((protocol&0x0F) == Sn_MR_MACRAW) ||
000024  f005000f          AND      r0,r5,#0xf
000028  2804              CMP      r0,#4
00002a  d003              BEQ      |L10.52|
;;;18             ((protocol&0x0F) == Sn_MR_PPPOE)
00002c  f005000f          AND      r0,r5,#0xf
000030  2805              CMP      r0,#5
000032  d141              BNE      |L10.184|
                  |L10.52|
;;;19           )
;;;20        {
;;;21           close(s);
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       close
;;;22           IINCHIP_WRITE(Sn_MR(s) ,protocol | flag);
00003a  ea450108          ORR      r1,r5,r8
00003e  2208              MOVS     r2,#8
000040  eb021044          ADD      r0,r2,r4,LSL #5
000044  f7fffffe          BL       IINCHIP_WRITE
;;;23           if (port != 0) {
000048  b176              CBZ      r6,|L10.104|
;;;24              IINCHIP_WRITE( Sn_PORT0(s) ,(uint8)((port & 0xff00) >> 8));
00004a  0a31              LSRS     r1,r6,#8
00004c  f44f6281          MOV      r2,#0x408
000050  eb021044          ADD      r0,r2,r4,LSL #5
000054  f7fffffe          BL       IINCHIP_WRITE
;;;25              IINCHIP_WRITE( Sn_PORT1(s) ,(uint8)(port & 0x00ff));
000058  b2f1              UXTB     r1,r6
00005a  f44f62a1          MOV      r2,#0x508
00005e  eb021044          ADD      r0,r2,r4,LSL #5
000062  f7fffffe          BL       IINCHIP_WRITE
000066  e015              B        |L10.148|
                  |L10.104|
;;;26           } else {
;;;27              local_port++; // if don't set the source port, set local_port number.
000068  4815              LDR      r0,|L10.192|
00006a  8800              LDRH     r0,[r0,#0]  ; local_port
00006c  1c40              ADDS     r0,r0,#1
00006e  4914              LDR      r1,|L10.192|
000070  8008              STRH     r0,[r1,#0]
;;;28              IINCHIP_WRITE(Sn_PORT0(s) ,(uint8)((local_port & 0xff00) >> 8));
000072  460a              MOV      r2,r1
000074  8812              LDRH     r2,[r2,#0]  ; local_port
000076  0a11              LSRS     r1,r2,#8
000078  f44f6281          MOV      r2,#0x408
00007c  eb021044          ADD      r0,r2,r4,LSL #5
000080  f7fffffe          BL       IINCHIP_WRITE
;;;29              IINCHIP_WRITE(Sn_PORT1(s) ,(uint8)(local_port & 0x00ff));
000084  4a0e              LDR      r2,|L10.192|
000086  7811              LDRB     r1,[r2,#0]  ; local_port
000088  f44f62a1          MOV      r2,#0x508
00008c  eb021044          ADD      r0,r2,r4,LSL #5
000090  f7fffffe          BL       IINCHIP_WRITE
                  |L10.148|
;;;30           }
;;;31           IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_OPEN); // run sockinit Sn_CR
000094  f44f7184          MOV      r1,#0x108
000098  eb011044          ADD      r0,r1,r4,LSL #5
00009c  2101              MOVS     r1,#1
00009e  f7fffffe          BL       IINCHIP_WRITE
;;;32     
;;;33           /* wait to process the command... */
;;;34           while( IINCHIP_READ(Sn_CR(s)) )
0000a2  bf00              NOP      
                  |L10.164|
0000a4  f44f7184          MOV      r1,#0x108
0000a8  eb011044          ADD      r0,r1,r4,LSL #5
0000ac  f7fffffe          BL       IINCHIP_READ
0000b0  2800              CMP      r0,#0
0000b2  d1f7              BNE      |L10.164|
;;;35              ;
;;;36           /* ------- */
;;;37           ret = 1;
0000b4  2701              MOVS     r7,#1
0000b6  e000              B        |L10.186|
                  |L10.184|
;;;38        }
;;;39        else
;;;40        {
;;;41           ret = 0;
0000b8  2700              MOVS     r7,#0
                  |L10.186|
;;;42        }
;;;43        return ret;
0000ba  4638              MOV      r0,r7
;;;44     }
0000bc  e8bd81f0          POP      {r4-r8,pc}
;;;45     
                          ENDP

                  |L10.192|
                          DCD      local_port

                          AREA ||.data||, DATA, ALIGN=1

                  local_port
000000  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\Net\\socket.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___8_socket_c_socket____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_socket_c_socket____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___8_socket_c_socket____REVSH|
#line 128
|__asm___8_socket_c_socket____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
