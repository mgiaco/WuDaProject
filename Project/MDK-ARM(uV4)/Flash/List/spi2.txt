; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\spi2.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\spi2.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\RTX\inc -I..\..\RTX\portable -I..\..\User\CpuFlash -I..\..\User\CRC8_16 -I..\..\User\DS1302 -I..\..\User\DWT -I..\..\User\IIC -I..\..\User\IWDG -I..\..\User\Key -I..\..\User\Led -I..\..\User\Net -I..\..\User\Protocal -I..\..\User\Reader -I..\..\User\SPI -I..\..\User\Timer -I..\..\User\Uart -I..\..\User\Param -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\spi2.crf ..\..\User\Net\spi2.c]
                          THUMB

                          AREA ||i.SPI2_SendByte||, CODE, READONLY, ALIGN=2

                  SPI2_SendByte PROC
;;;66     
;;;67     uint8_t SPI2_SendByte(uint8_t byte)
000000  b510              PUSH     {r4,lr}
;;;68     {
000002  4604              MOV      r4,r0
;;;69         while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE) == RESET);
000004  bf00              NOP      
                  |L1.6|
000006  2102              MOVS     r1,#2
000008  480a              LDR      r0,|L1.52|
00000a  f7fffffe          BL       SPI_I2S_GetFlagStatus
00000e  2800              CMP      r0,#0
000010  d0f9              BEQ      |L1.6|
;;;70         
;;;71         SPI_I2S_SendData(SPI2, byte);
000012  4621              MOV      r1,r4
000014  4807              LDR      r0,|L1.52|
000016  f7fffffe          BL       SPI_I2S_SendData
;;;72         
;;;73         while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET);
00001a  bf00              NOP      
                  |L1.28|
00001c  2101              MOVS     r1,#1
00001e  4805              LDR      r0,|L1.52|
000020  f7fffffe          BL       SPI_I2S_GetFlagStatus
000024  2800              CMP      r0,#0
000026  d0f9              BEQ      |L1.28|
;;;74         
;;;75         return SPI_I2S_ReceiveData(SPI2);
000028  4802              LDR      r0,|L1.52|
00002a  f7fffffe          BL       SPI_I2S_ReceiveData
00002e  b2c0              UXTB     r0,r0
;;;76     }
000030  bd10              POP      {r4,pc}
;;;77     
                          ENDP

000032  0000              DCW      0x0000
                  |L1.52|
                          DCD      0x40003800

                          AREA ||i.WIZ_CS||, CODE, READONLY, ALIGN=2

                  WIZ_CS PROC
;;;54     
;;;55     void WIZ_CS(uint8_t val)
000000  b510              PUSH     {r4,lr}
;;;56     {
000002  4604              MOV      r4,r0
;;;57     	if (val == LOW) 
000004  b92c              CBNZ     r4,|L2.18|
;;;58     	{
;;;59        		GPIO_ResetBits(GPIOB, WIZ_SCS); 
000006  f44f5180          MOV      r1,#0x1000
00000a  4805              LDR      r0,|L2.32|
00000c  f7fffffe          BL       GPIO_ResetBits
000010  e005              B        |L2.30|
                  |L2.18|
;;;60     	}
;;;61     	else if (val == HIGH)
000012  2c01              CMP      r4,#1
000014  d103              BNE      |L2.30|
;;;62     	{
;;;63        		GPIO_SetBits(GPIOB, WIZ_SCS); 
000016  0321              LSLS     r1,r4,#12
000018  4801              LDR      r0,|L2.32|
00001a  f7fffffe          BL       GPIO_SetBits
                  |L2.30|
;;;64     	}
;;;65     }
00001e  bd10              POP      {r4,pc}
;;;66     
                          ENDP

                  |L2.32|
                          DCD      0x40010c00

                          AREA ||i.WIZ_SPI_Init||, CODE, READONLY, ALIGN=2

                  WIZ_SPI_Init PROC
;;;2      
;;;3      void WIZ_SPI_Init(void)
000000  b500              PUSH     {lr}
;;;4      {
000002  b087              SUB      sp,sp,#0x1c
;;;5      	SPI_InitTypeDef   SPI_InitStructure;
;;;6      	GPIO_InitTypeDef GPIO_InitStructure;
;;;7          
;;;8          RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
000004  2101              MOVS     r1,#1
000006  0388              LSLS     r0,r1,#14
000008  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;9          RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB|RCC_APB2Periph_GPIOC, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  2018              MOVS     r0,#0x18
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;10         /* Configure SPIy pins: SCK, MISO and MOSI */
;;;11         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13| GPIO_Pin_14| GPIO_Pin_15;
000014  f44f4060          MOV      r0,#0xe000
000018  f8ad0004          STRH     r0,[sp,#4]
;;;12         GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00001c  2003              MOVS     r0,#3
00001e  f88d0006          STRB     r0,[sp,#6]
;;;13         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
000022  2018              MOVS     r0,#0x18
000024  f88d0007          STRB     r0,[sp,#7]
;;;14         GPIO_Init(GPIOB, &GPIO_InitStructure);
000028  a901              ADD      r1,sp,#4
00002a  482c              LDR      r0,|L3.220|
00002c  f7fffffe          BL       GPIO_Init
;;;15         
;;;16         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12; 
000030  f44f5080          MOV      r0,#0x1000
000034  f8ad0004          STRH     r0,[sp,#4]
;;;17         GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000038  2003              MOVS     r0,#3
00003a  f88d0006          STRB     r0,[sp,#6]
;;;18         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
00003e  2010              MOVS     r0,#0x10
000040  f88d0007          STRB     r0,[sp,#7]
;;;19         GPIO_Init(GPIOB, &GPIO_InitStructure);
000044  a901              ADD      r1,sp,#4
000046  4825              LDR      r0,|L3.220|
000048  f7fffffe          BL       GPIO_Init
;;;20         GPIO_SetBits(GPIOB, GPIO_Pin_12);
00004c  f44f5180          MOV      r1,#0x1000
000050  4822              LDR      r0,|L3.220|
000052  f7fffffe          BL       GPIO_SetBits
;;;21     
;;;22     
;;;23         // Port C output;//rst
;;;24         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7; 
000056  2080              MOVS     r0,#0x80
000058  f8ad0004          STRH     r0,[sp,#4]
;;;25         GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00005c  2003              MOVS     r0,#3
00005e  f88d0006          STRB     r0,[sp,#6]
;;;26         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000062  2010              MOVS     r0,#0x10
000064  f88d0007          STRB     r0,[sp,#7]
;;;27         GPIO_Init(GPIOC, &GPIO_InitStructure);
000068  a901              ADD      r1,sp,#4
00006a  481d              LDR      r0,|L3.224|
00006c  f7fffffe          BL       GPIO_Init
;;;28         GPIO_SetBits(GPIOC, GPIO_Pin_7);
000070  2180              MOVS     r1,#0x80
000072  481b              LDR      r0,|L3.224|
000074  f7fffffe          BL       GPIO_SetBits
;;;29         
;;;30         // Port C input//INT
;;;31         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
000078  2040              MOVS     r0,#0x40
00007a  f8ad0004          STRH     r0,[sp,#4]
;;;32         GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00007e  2003              MOVS     r0,#3
000080  f88d0006          STRB     r0,[sp,#6]
;;;33         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
000084  2048              MOVS     r0,#0x48
000086  f88d0007          STRB     r0,[sp,#7]
;;;34         GPIO_Init(GPIOC, &GPIO_InitStructure);
00008a  a901              ADD      r1,sp,#4
00008c  4814              LDR      r0,|L3.224|
00008e  f7fffffe          BL       GPIO_Init
;;;35         
;;;36         /* SPI Config -------------------------------------------------------------*/
;;;37         SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
000092  2000              MOVS     r0,#0
000094  f8ad0008          STRH     r0,[sp,#8]
;;;38         SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
000098  f44f7082          MOV      r0,#0x104
00009c  f8ad000a          STRH     r0,[sp,#0xa]
;;;39         SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
0000a0  2000              MOVS     r0,#0
0000a2  f8ad000c          STRH     r0,[sp,#0xc]
;;;40     #if 1    
;;;41         SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
0000a6  f8ad000e          STRH     r0,[sp,#0xe]
;;;42         SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
0000aa  f8ad0010          STRH     r0,[sp,#0x10]
;;;43     #endif
;;;44         SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
0000ae  f44f7000          MOV      r0,#0x200
0000b2  f8ad0012          STRH     r0,[sp,#0x12]
;;;45         SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;
0000b6  2008              MOVS     r0,#8
0000b8  f8ad0014          STRH     r0,[sp,#0x14]
;;;46         SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
0000bc  2000              MOVS     r0,#0
0000be  f8ad0016          STRH     r0,[sp,#0x16]
;;;47         SPI_InitStructure.SPI_CRCPolynomial = 7;
0000c2  2007              MOVS     r0,#7
0000c4  f8ad0018          STRH     r0,[sp,#0x18]
;;;48         
;;;49         SPI_Init(SPI2, &SPI_InitStructure);
0000c8  a902              ADD      r1,sp,#8
0000ca  4806              LDR      r0,|L3.228|
0000cc  f7fffffe          BL       SPI_Init
;;;50         SPI_Cmd(SPI2, ENABLE);
0000d0  2101              MOVS     r1,#1
0000d2  4804              LDR      r0,|L3.228|
0000d4  f7fffffe          BL       SPI_Cmd
;;;51         
;;;52         
;;;53     }
0000d8  b007              ADD      sp,sp,#0x1c
0000da  bd00              POP      {pc}
;;;54     
                          ENDP

                  |L3.220|
                          DCD      0x40010c00
                  |L3.224|
                          DCD      0x40011000
                  |L3.228|
                          DCD      0x40003800

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\Net\\spi2.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_spi2_c_b08440da____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_spi2_c_b08440da____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___6_spi2_c_b08440da____REVSH|
#line 128
|__asm___6_spi2_c_b08440da____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
