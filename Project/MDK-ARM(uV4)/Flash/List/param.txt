; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\param.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\param.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\RTX\inc -I..\..\RTX\portable -I..\..\User\CpuFlash -I..\..\User\CRC8_16 -I..\..\User\DS1302 -I..\..\User\DWT -I..\..\User\IIC -I..\..\User\IWDG -I..\..\User\Key -I..\..\User\Led -I..\..\User\Net -I..\..\User\Protocal -I..\..\User\Reader -I..\..\User\SPI -I..\..\User\Timer -I..\..\User\Uart -I..\..\User\Param -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\param.crf ..\..\User\Param\param.c]
                          THUMB

                          AREA ||i.compareID||, CODE, READONLY, ALIGN=1

                  compareID PROC
;;;444    //比较卡号
;;;445    static uint8_t compareID(uint8_t *id, uint8_t *idLibrary, uint16_t len)
000000  b530              PUSH     {r4,r5,lr}
;;;446    {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
;;;447        uint16_t i;
;;;448        for(i=0; i<len; i++)
000006  2100              MOVS     r1,#0
000008  e011              B        |L1.46|
                  |L1.10|
;;;449        {
;;;450            if(id[0] == idLibrary[i])
00000a  7818              LDRB     r0,[r3,#0]
00000c  5c65              LDRB     r5,[r4,r1]
00000e  42a8              CMP      r0,r5
000010  d10b              BNE      |L1.42|
;;;451            {
;;;452                if(id[1] == idLibrary[i+1])
000012  785d              LDRB     r5,[r3,#1]
000014  1c48              ADDS     r0,r1,#1
000016  5c20              LDRB     r0,[r4,r0]
000018  4285              CMP      r5,r0
00001a  d106              BNE      |L1.42|
;;;453                {
;;;454                    if(id[2] == idLibrary[i+2])
00001c  789d              LDRB     r5,[r3,#2]
00001e  1c88              ADDS     r0,r1,#2
000020  5c20              LDRB     r0,[r4,r0]
000022  4285              CMP      r5,r0
000024  d101              BNE      |L1.42|
;;;455                    {
;;;456                        return 1;
000026  2001              MOVS     r0,#1
                  |L1.40|
;;;457                    }
;;;458                }
;;;459            }
;;;460        }//end of for
;;;461        return 0;
;;;462    }
000028  bd30              POP      {r4,r5,pc}
                  |L1.42|
00002a  1c48              ADDS     r0,r1,#1              ;448
00002c  b281              UXTH     r1,r0                 ;448
                  |L1.46|
00002e  4291              CMP      r1,r2                 ;448
000030  dbeb              BLT      |L1.10|
000032  2000              MOVS     r0,#0                 ;461
000034  e7f8              B        |L1.40|
;;;463    
                          ENDP


                          AREA ||i.paramInit||, CODE, READONLY, ALIGN=2

                  paramInit PROC
;;;50     //读取参数
;;;51     void paramInit(void)
000000  b530              PUSH     {r4,r5,lr}
;;;52     {
000002  b0cb              SUB      sp,sp,#0x12c
;;;53         uint8_t temp[300];//暂存从IIC读取的数据，可放100个ID
;;;54         uint8_t i;
;;;55         uint16_t len=300;
000004  f44f7596          MOV      r5,#0x12c
;;;56         //复制函数指针
;;;57         g_tParam.updateRelation = updateRelation;
000008  486a              LDR      r0,|L2.436|
00000a  496b              LDR      r1,|L2.440|
00000c  6008              STR      r0,[r1,#0]  ; g_tParam
;;;58         g_tParam.updateNetCfg = updateNetCfg;
00000e  486b              LDR      r0,|L2.444|
000010  6048              STR      r0,[r1,#4]  ; g_tParam
;;;59         g_tParam.updateSystemCfg = updateSystemCfg;
000012  486b              LDR      r0,|L2.448|
000014  6088              STR      r0,[r1,#8]  ; g_tParam
;;;60         g_tParam.updateNextStartAddr = updateNextStartAddr;
000016  486b              LDR      r0,|L2.452|
000018  60c8              STR      r0,[r1,#0xc]  ; g_tParam
;;;61         g_tParam.updateMultipleCardID = updateMultipleCardID;
00001a  486b              LDR      r0,|L2.456|
00001c  6108              STR      r0,[r1,#0x10]  ; g_tParam
;;;62         
;;;63         ee_ReadBytes(temp, 0, EE_PAGE_SIZE*3);
00001e  2260              MOVS     r2,#0x60
000020  2100              MOVS     r1,#0
000022  4668              MOV      r0,sp
000024  f7fffffe          BL       ee_ReadBytes
;;;64         
;;;65         //first page
;;;66         if(temp[ADDR_LOCAL_IP] == 0xFF)
000028  f89d0001          LDRB     r0,[sp,#1]
00002c  28ff              CMP      r0,#0xff
00002e  d103              BNE      |L2.56|
;;;67         {
;;;68             //若IP没有配置过，则重置
;;;69             resetParam();
000030  f7fffffe          BL       resetParam
                  |L2.52|
;;;70             //把普通卡号数组全置为0xFF,已在重置函数中完成
;;;71             //memset(g_tParam.multipleCardID.generalCardID, 0xFF, sizeof(g_tParam.multipleCardID.generalCardID));
;;;72             return;
;;;73         }
;;;74     
;;;75         memcpy(g_tParam.netCfg.local_ip,    &temp[ADDR_LOCAL_IP], sizeof(g_tParam.netCfg.local_ip));
;;;76         //memcpy(g_tParam.netCfg.local_port,  &temp[ADDR_LOCAL_PORT], sizeof(g_tParam.netCfg.local_port));
;;;77         g_tParam.netCfg.local_port = (temp[ADDR_LOCAL_PORT]<<8) + temp[ADDR_LOCAL_PORT+1];
;;;78         memcpy(g_tParam.netCfg.server_ip,   &temp[ADDR_SERVER_IP], sizeof(g_tParam.netCfg.server_ip));
;;;79         //memcpy(g_tParam.netCfg.server_port, &temp[ADDR_SERVER_PORT], sizeof(g_tParam.netCfg.server_port));
;;;80         g_tParam.netCfg.server_port = (temp[ADDR_SERVER_PORT]<<8) + temp[ADDR_SERVER_PORT+1];
;;;81     
;;;82         memcpy(&g_tParam.systemCfg.openTime, &temp[ADDR_OPEN_TIME], sizeof(g_tParam.systemCfg.openTime));
;;;83         memcpy(&g_tParam.systemCfg.waitTime, &temp[ADDR_WAIT_TIME], sizeof(g_tParam.systemCfg.waitTime));
;;;84         
;;;85         memcpy(&g_tParam.relation.relationA.reader_switcher, &temp[ADDR_RELATION_READER_A], sizeof(g_tParam.relation.relationA.reader_switcher));
;;;86         memcpy(&g_tParam.relation.relationB.reader_switcher, &temp[ADDR_RELATION_READER_B], sizeof(g_tParam.relation.relationB.reader_switcher));
;;;87         memcpy(&g_tParam.relation.relationA.button_switcher, &temp[ADDR_RELATION_BUTTON_A], sizeof(g_tParam.relation.relationA.reader_switcher));
;;;88         memcpy(&g_tParam.relation.relationB.button_switcher, &temp[ADDR_RELATION_BUTTON_B], sizeof(g_tParam.relation.relationB.reader_switcher));
;;;89         
;;;90         //i = sizeof(g_tParam.nextStartAddr.nextStartSector);
;;;91         memcpy(g_tParam.nextStartAddr.nextStartSector, &temp[NEXT_START_SECTOR_H], sizeof(g_tParam.nextStartAddr.nextStartSector));
;;;92         //i = sizeof(g_tParam.nextStartAddr.nextStartAddr);
;;;93         memcpy(g_tParam.nextStartAddr.nextStartAddr, &temp[NEXT_START_ADDR_H], sizeof(g_tParam.nextStartAddr.nextStartAddr));
;;;94         
;;;95         //第二页及以后
;;;96         //8个配置开关
;;;97         //modify 3-9 顺序修正
;;;98         memcpy(&g_tParam.systemCfg.multipleOpenCfg[0], &temp[IS_OPEN_INTERLOCK], 1);
;;;99         memcpy(&g_tParam.systemCfg.multipleOpenCfg[1], &temp[IS_OPEN_FIRST_CARD], 1);
;;;100        memcpy(&g_tParam.systemCfg.multipleOpenCfg[2], &temp[IS_OPEN_MULTIPLE_CARD], 1);
;;;101        memcpy(&g_tParam.systemCfg.multipleOpenCfg[3], &temp[IS_OPEN_SUPER_CARD], 1);
;;;102        memcpy(&g_tParam.systemCfg.multipleOpenCfg[4], &temp[IS_OPEN_SUPER_PASSWORD], 1);
;;;103        memcpy(&g_tParam.systemCfg.multipleOpenCfg[5], &temp[IS_OPEN_THREAT_CARD], 1);
;;;104        memcpy(&g_tParam.systemCfg.multipleOpenCfg[6], &temp[IS_OPEN_THREAT_PASSWORD], 1);
;;;105        memcpy(&g_tParam.systemCfg.multipleOpenCfg[7], &temp[IS_OPEN_FINGER], 1);
;;;106        
;;;107        //last page
;;;108        //9个卡号数组
;;;109        memcpy(g_tParam.multipleCardID.firstCardID,     &temp[FIRST_CARD_ID], sizeof(g_tParam.multipleCardID.firstCardID));
;;;110        memcpy(g_tParam.multipleCardID.superCardID,     &temp[SUPER_CARD_ID], sizeof(g_tParam.multipleCardID.superCardID));
;;;111        memcpy(g_tParam.multipleCardID.threatCardID,    &temp[THREAT_CARD_ID], sizeof(g_tParam.multipleCardID.threatCardID));
;;;112        memcpy(g_tParam.multipleCardID.threatPasswordID,&temp[THREAT_PASSWORD_ID], sizeof(g_tParam.multipleCardID.threatPasswordID));
;;;113        memcpy(g_tParam.multipleCardID.superPasswordID, &temp[SUPER_PASSWORD_ID], sizeof(g_tParam.multipleCardID.superPasswordID));
;;;114        memcpy(g_tParam.multipleCardID.multipleCardID, &temp[MULTIPLE_CARD_ID], sizeof(g_tParam.multipleCardID.multipleCardID));
;;;115        memcpy(g_tParam.multipleCardID.keyBoardID, &temp[KEY_BOARD_ID], sizeof(g_tParam.multipleCardID.keyBoardID));
;;;116        //一次读300字节，有100个卡号，分5次读取
;;;117        for(i=0;i<5;i++)
;;;118        {
;;;119            ee_ReadBytes(temp, FINGER_ID+i*300, len);//指纹ID
;;;120            memcpy(&g_tParam.multipleCardID.fingerID[i*len], temp, sizeof(temp));
;;;121        }
;;;122        for(i=0;i<5;i++)
;;;123        {
;;;124            ee_ReadBytes(temp, GENERAL_CARD_ID+i*300, len);//普通卡ID
;;;125            memcpy(&g_tParam.multipleCardID.generalCardID[i*len], temp, sizeof(temp));
;;;126        }
;;;127           
;;;128    }
000034  b04b              ADD      sp,sp,#0x12c
000036  bd30              POP      {r4,r5,pc}
                  |L2.56|
000038  485f              LDR      r0,|L2.440|
00003a  f8dd1001          LDR      r1,[sp,#1]            ;75
00003e  61c1              STR      r1,[r0,#0x1c]         ;75
000040  f89d0006          LDRB     r0,[sp,#6]            ;77
000044  f89d1005          LDRB     r1,[sp,#5]            ;77
000048  eb002001          ADD      r0,r0,r1,LSL #8       ;77
00004c  495a              LDR      r1,|L2.440|
00004e  8308              STRH     r0,[r1,#0x18]         ;77
000050  4608              MOV      r0,r1                 ;78
000052  f8dd1007          LDR      r1,[sp,#7]            ;78
000056  6201              STR      r1,[r0,#0x20]         ;78
000058  f89d000c          LDRB     r0,[sp,#0xc]          ;80
00005c  f89d100b          LDRB     r1,[sp,#0xb]          ;80
000060  eb002001          ADD      r0,r0,r1,LSL #8       ;80
000064  b281              UXTH     r1,r0                 ;80
000066  4854              LDR      r0,|L2.440|
000068  8341              STRH     r1,[r0,#0x1a]         ;80
00006a  f89d100d          LDRB     r1,[sp,#0xd]          ;82
00006e  f8801028          STRB     r1,[r0,#0x28]         ;82
000072  f89d1012          LDRB     r1,[sp,#0x12]         ;83
000076  f8801029          STRB     r1,[r0,#0x29]         ;83
00007a  f89d100e          LDRB     r1,[sp,#0xe]          ;85
00007e  7501              STRB     r1,[r0,#0x14]         ;85
000080  f89d100f          LDRB     r1,[sp,#0xf]          ;86
000084  7581              STRB     r1,[r0,#0x16]         ;86
000086  f89d1010          LDRB     r1,[sp,#0x10]         ;87
00008a  7541              STRB     r1,[r0,#0x15]         ;87
00008c  f89d1011          LDRB     r1,[sp,#0x11]         ;88
000090  75c1              STRB     r1,[r0,#0x17]         ;88
000092  f8bd101c          LDRH     r1,[sp,#0x1c]         ;91
000096  8641              STRH     r1,[r0,#0x32]         ;91
000098  f8bd101e          LDRH     r1,[sp,#0x1e]         ;93
00009c  8681              STRH     r1,[r0,#0x34]         ;93
00009e  f89d1032          LDRB     r1,[sp,#0x32]         ;98
0000a2  f880102a          STRB     r1,[r0,#0x2a]         ;98
0000a6  f89d1023          LDRB     r1,[sp,#0x23]         ;99
0000aa  f880102b          STRB     r1,[r0,#0x2b]         ;99
0000ae  f89d1040          LDRB     r1,[sp,#0x40]         ;100
0000b2  f880102c          STRB     r1,[r0,#0x2c]         ;100
0000b6  f89d1027          LDRB     r1,[sp,#0x27]         ;101
0000ba  f880102d          STRB     r1,[r0,#0x2d]         ;101
0000be  f89d103a          LDRB     r1,[sp,#0x3a]         ;102
0000c2  f880102e          STRB     r1,[r0,#0x2e]         ;102
0000c6  f89d1031          LDRB     r1,[sp,#0x31]         ;103
0000ca  f880102f          STRB     r1,[r0,#0x2f]         ;103
0000ce  f89d1036          LDRB     r1,[sp,#0x36]         ;104
0000d2  f8801030          STRB     r1,[r0,#0x30]         ;104
0000d6  f89d1060          LDRB     r1,[sp,#0x60]         ;105
0000da  f8801031          STRB     r1,[r0,#0x31]         ;105
0000de  f8bd1020          LDRH     r1,[sp,#0x20]         ;109
0000e2  86c1              STRH     r1,[r0,#0x36]         ;109
0000e4  f89d1022          LDRB     r1,[sp,#0x22]         ;109
0000e8  f8801038          STRB     r1,[r0,#0x38]         ;109
0000ec  3039              ADDS     r0,r0,#0x39           ;110
0000ee  f8bd1024          LDRH     r1,[sp,#0x24]         ;110
0000f2  8001              STRH     r1,[r0,#0]            ;110
0000f4  f89d1026          LDRB     r1,[sp,#0x26]         ;110
0000f8  7081              STRB     r1,[r0,#2]            ;110
0000fa  382e              SUBS     r0,r0,#0x2e           ;111
0000fc  990a              LDR      r1,[sp,#0x28]         ;111
0000fe  6341              STR      r1,[r0,#0x34]         ;111
000100  990b              LDR      r1,[sp,#0x2c]         ;111
000102  6381              STR      r1,[r0,#0x38]         ;111
000104  f89d1030          LDRB     r1,[sp,#0x30]         ;111
000108  f880103c          STRB     r1,[r0,#0x3c]         ;111
00010c  302b              ADDS     r0,r0,#0x2b           ;112
00010e  f8bd1033          LDRH     r1,[sp,#0x33]         ;112
000112  8241              STRH     r1,[r0,#0x12]         ;112
000114  f89d1035          LDRB     r1,[sp,#0x35]         ;112
000118  7501              STRB     r1,[r0,#0x14]         ;112
00011a  3836              SUBS     r0,r0,#0x36           ;113
00011c  f8bd1037          LDRH     r1,[sp,#0x37]         ;113
000120  8781              STRH     r1,[r0,#0x3c]         ;113
000122  f89d1039          LDRB     r1,[sp,#0x39]         ;113
000126  f880103e          STRB     r1,[r0,#0x3e]         ;113
00012a  221e              MOVS     r2,#0x1e              ;114
00012c  f10d0141          ADD      r1,sp,#0x41           ;114
000130  304e              ADDS     r0,r0,#0x4e           ;114
000132  f7fffffe          BL       __aeabi_memcpy
000136  4820              LDR      r0,|L2.440|
000138  304b              ADDS     r0,r0,#0x4b           ;115
00013a  f8bd1061          LDRH     r1,[sp,#0x61]         ;115
00013e  8001              STRH     r1,[r0,#0]            ;115
000140  f89d1063          LDRB     r1,[sp,#0x63]         ;115
000144  7081              STRB     r1,[r0,#2]            ;115
000146  2400              MOVS     r4,#0                 ;117
000148  e015              B        |L2.374|
                  |L2.330|
00014a  ebc41004          RSB      r0,r4,r4,LSL #4       ;119
00014e  eb000080          ADD      r0,r0,r0,LSL #2       ;119
000152  2264              MOVS     r2,#0x64              ;119
000154  eb020180          ADD      r1,r2,r0,LSL #2       ;119
000158  462a              MOV      r2,r5                 ;119
00015a  4668              MOV      r0,sp                 ;119
00015c  f7fffffe          BL       ee_ReadBytes
000160  4915              LDR      r1,|L2.440|
000162  316c              ADDS     r1,r1,#0x6c           ;120
000164  fb041005          MLA      r0,r4,r5,r1           ;120
000168  f44f7296          MOV      r2,#0x12c             ;120
00016c  4669              MOV      r1,sp                 ;120
00016e  f7fffffe          BL       __aeabi_memcpy
000172  1c60              ADDS     r0,r4,#1              ;117
000174  b2c4              UXTB     r4,r0                 ;117
                  |L2.374|
000176  2c05              CMP      r4,#5                 ;117
000178  dbe7              BLT      |L2.330|
00017a  2400              MOVS     r4,#0                 ;122
00017c  e015              B        |L2.426|
                  |L2.382|
00017e  ebc41004          RSB      r0,r4,r4,LSL #4       ;124
000182  eb000080          ADD      r0,r0,r0,LSL #2       ;124
000186  f44f62c8          MOV      r2,#0x640             ;124
00018a  eb020180          ADD      r1,r2,r0,LSL #2       ;124
00018e  462a              MOV      r2,r5                 ;124
000190  4668              MOV      r0,sp                 ;124
000192  f7fffffe          BL       ee_ReadBytes
000196  490d              LDR      r1,|L2.460|
000198  fb041005          MLA      r0,r4,r5,r1           ;125
00019c  f44f7296          MOV      r2,#0x12c             ;125
0001a0  4669              MOV      r1,sp                 ;125
0001a2  f7fffffe          BL       __aeabi_memcpy
0001a6  1c60              ADDS     r0,r4,#1              ;122
0001a8  b2c4              UXTB     r4,r0                 ;122
                  |L2.426|
0001aa  2c05              CMP      r4,#5                 ;122
0001ac  dbe7              BLT      |L2.382|
0001ae  bf00              NOP      
0001b0  e740              B        |L2.52|
;;;129    
                          ENDP

0001b2  0000              DCW      0x0000
                  |L2.436|
                          DCD      updateRelation
                  |L2.440|
                          DCD      g_tParam
                  |L2.444|
                          DCD      updateNetCfg
                  |L2.448|
                          DCD      updateSystemCfg
                  |L2.452|
                          DCD      updateNextStartAddr
                  |L2.456|
                          DCD      updateMultipleCardID
                  |L2.460|
                          DCD      g_tParam+0x648

                          AREA ||i.resetParam||, CODE, READONLY, ALIGN=2

                  resetParam PROC
;;;130    //复位参数, 需要重新设置w5500
;;;131    void resetParam(void)
000000  b510              PUSH     {r4,lr}
;;;132    {
000002  b08a              SUB      sp,sp,#0x28
;;;133        uint16_t i;
;;;134        uint8_t buf[EE_PAGE_SIZE];
;;;135        uint8_t temp[2]; 
;;;136        //uint8_t card[3];    
;;;137        
;;;138        for(i = 0; i < EE_PAGE_SIZE; i++)
000004  2400              MOVS     r4,#0
000006  e004              B        |L3.18|
                  |L3.8|
;;;139    	{
;;;140    		buf[i] = 0xFF;
000008  20ff              MOVS     r0,#0xff
00000a  a902              ADD      r1,sp,#8
00000c  5508              STRB     r0,[r1,r4]
00000e  1c60              ADDS     r0,r4,#1              ;138
000010  b284              UXTH     r4,r0                 ;138
                  |L3.18|
000012  2c20              CMP      r4,#0x20              ;138
000014  dbf8              BLT      |L3.8|
;;;141    	}
;;;142          
;;;143        for(i = 1; i<97; i++)//只把第二页及以后填0xFF，97*32=3104>3100，可以填充完
000016  2401              MOVS     r4,#1
000018  e006              B        |L3.40|
                  |L3.26|
;;;144        {
;;;145            ee_WriteBytes(buf, i*32, EE_PAGE_SIZE);
00001a  0161              LSLS     r1,r4,#5
00001c  2220              MOVS     r2,#0x20
00001e  a802              ADD      r0,sp,#8
000020  f7fffffe          BL       ee_WriteBytes
000024  1c60              ADDS     r0,r4,#1              ;143
000026  b284              UXTH     r4,r0                 ;143
                  |L3.40|
000028  2c61              CMP      r4,#0x61              ;143
00002a  dbf6              BLT      |L3.26|
;;;146        }
;;;147        //复位结构体成员的值
;;;148        //第一页的默认参数，不用0xFF填充
;;;149        g_tParam.netCfg.local_ip[0]=192;
00002c  21c0              MOVS     r1,#0xc0
00002e  4868              LDR      r0,|L3.464|
000030  7701              STRB     r1,[r0,#0x1c]
;;;150        g_tParam.netCfg.local_ip[1]=168;
000032  21a8              MOVS     r1,#0xa8
000034  7741              STRB     r1,[r0,#0x1d]
;;;151        g_tParam.netCfg.local_ip[2]=3;
000036  2103              MOVS     r1,#3
000038  7781              STRB     r1,[r0,#0x1e]
;;;152        g_tParam.netCfg.local_ip[3]=100;
00003a  2164              MOVS     r1,#0x64
00003c  77c1              STRB     r1,[r0,#0x1f]
;;;153        g_tParam.netCfg.local_port = 6000;
00003e  f2417070          MOV      r0,#0x1770
000042  4963              LDR      r1,|L3.464|
000044  8308              STRH     r0,[r1,#0x18]
;;;154        
;;;155        //server IP:255.255.255.255,broadcast
;;;156        g_tParam.netCfg.server_ip[0]=255;
000046  21ff              MOVS     r1,#0xff
000048  4861              LDR      r0,|L3.464|
00004a  f8801020          STRB     r1,[r0,#0x20]
;;;157        g_tParam.netCfg.server_ip[1]=255;
00004e  f8801021          STRB     r1,[r0,#0x21]
;;;158        g_tParam.netCfg.server_ip[2]=255;
000052  f8801022          STRB     r1,[r0,#0x22]
;;;159        g_tParam.netCfg.server_ip[3]=255; 
000056  f8801023          STRB     r1,[r0,#0x23]
;;;160        g_tParam.netCfg.server_port = 8085;
00005a  f6417195          MOV      r1,#0x1f95
00005e  8341              STRH     r1,[r0,#0x1a]
;;;161        
;;;162        g_tParam.systemCfg.openTime = 5;
000060  2005              MOVS     r0,#5
000062  495b              LDR      r1,|L3.464|
000064  f8810028          STRB     r0,[r1,#0x28]
;;;163        g_tParam.systemCfg.waitTime = 0;
000068  2100              MOVS     r1,#0
00006a  4859              LDR      r0,|L3.464|
00006c  f8801029          STRB     r1,[r0,#0x29]
;;;164        memset(g_tParam.systemCfg.multipleOpenCfg, 0, sizeof(g_tParam.systemCfg.multipleOpenCfg));
000070  1c80              ADDS     r0,r0,#2
000072  6281              STR      r1,[r0,#0x28]
000074  62c1              STR      r1,[r0,#0x2c]
;;;165        
;;;166        g_tParam.relation.relationA.reader_switcher = 1;
000076  2001              MOVS     r0,#1
000078  4955              LDR      r1,|L3.464|
00007a  7508              STRB     r0,[r1,#0x14]
;;;167        g_tParam.relation.relationB.reader_switcher = (1<<4);
00007c  2110              MOVS     r1,#0x10
00007e  4854              LDR      r0,|L3.464|
000080  7581              STRB     r1,[r0,#0x16]
;;;168        g_tParam.relation.relationA.button_switcher = 1;
000082  2101              MOVS     r1,#1
000084  7541              STRB     r1,[r0,#0x15]
;;;169        g_tParam.relation.relationB.button_switcher = (1<<4);
000086  2110              MOVS     r1,#0x10
000088  75c1              STRB     r1,[r0,#0x17]
;;;170        
;;;171        g_tParam.nextStartAddr.nextStartSector[0] = 0;
00008a  2000              MOVS     r0,#0
00008c  4950              LDR      r1,|L3.464|
00008e  f8810032          STRB     r0,[r1,#0x32]
;;;172        g_tParam.nextStartAddr.nextStartSector[1] = 64;
000092  2140              MOVS     r1,#0x40
000094  484e              LDR      r0,|L3.464|
000096  f8801033          STRB     r1,[r0,#0x33]
;;;173        g_tParam.nextStartAddr.nextStartAddr[0] = 0;
00009a  2100              MOVS     r1,#0
00009c  f8801034          STRB     r1,[r0,#0x34]
;;;174        g_tParam.nextStartAddr.nextStartAddr[1] = 0;
0000a0  f8801035          STRB     r1,[r0,#0x35]
;;;175        
;;;176        //开始写入
;;;177        //net
;;;178        ee_WriteBytes(g_tParam.netCfg.local_ip, ADDR_LOCAL_IP, sizeof(g_tParam.netCfg.local_ip));
0000a4  2204              MOVS     r2,#4
0000a6  2101              MOVS     r1,#1
0000a8  301c              ADDS     r0,r0,#0x1c
0000aa  f7fffffe          BL       ee_WriteBytes
;;;179        temp[0] = g_tParam.netCfg.local_port >> 8;
0000ae  4848              LDR      r0,|L3.464|
0000b0  8b00              LDRH     r0,[r0,#0x18]  ; g_tParam
0000b2  1200              ASRS     r0,r0,#8
0000b4  f88d0004          STRB     r0,[sp,#4]
;;;180        temp[1] = g_tParam.netCfg.local_port & 0xFF;
0000b8  4845              LDR      r0,|L3.464|
0000ba  7e00              LDRB     r0,[r0,#0x18]  ; g_tParam
0000bc  f88d0005          STRB     r0,[sp,#5]
;;;181        ee_WriteBytes(temp, ADDR_LOCAL_PORT, sizeof(temp));
0000c0  2202              MOVS     r2,#2
0000c2  2105              MOVS     r1,#5
0000c4  a801              ADD      r0,sp,#4
0000c6  f7fffffe          BL       ee_WriteBytes
;;;182        ee_WriteBytes(g_tParam.netCfg.server_ip, ADDR_SERVER_IP, sizeof(g_tParam.netCfg.server_ip));
0000ca  2204              MOVS     r2,#4
0000cc  2107              MOVS     r1,#7
0000ce  4840              LDR      r0,|L3.464|
0000d0  3020              ADDS     r0,r0,#0x20
0000d2  f7fffffe          BL       ee_WriteBytes
;;;183        temp[0] = g_tParam.netCfg.server_port >> 8;
0000d6  483e              LDR      r0,|L3.464|
0000d8  8b40              LDRH     r0,[r0,#0x1a]
0000da  1200              ASRS     r0,r0,#8
0000dc  f88d0004          STRB     r0,[sp,#4]
;;;184        temp[1] = g_tParam.netCfg.server_port & 0xFF;
0000e0  483b              LDR      r0,|L3.464|
0000e2  7e80              LDRB     r0,[r0,#0x1a]
0000e4  f88d0005          STRB     r0,[sp,#5]
;;;185        ee_WriteBytes(temp, ADDR_SERVER_PORT, sizeof(temp));
0000e8  2202              MOVS     r2,#2
0000ea  210b              MOVS     r1,#0xb
0000ec  a801              ADD      r0,sp,#4
0000ee  f7fffffe          BL       ee_WriteBytes
;;;186        //配置开关
;;;187        ee_WriteOneBytes(g_tParam.systemCfg.openTime, ADDR_OPEN_TIME);
0000f2  4937              LDR      r1,|L3.464|
0000f4  f8910028          LDRB     r0,[r1,#0x28]  ; g_tParam
0000f8  210d              MOVS     r1,#0xd
0000fa  f7fffffe          BL       ee_WriteOneBytes
;;;188        ee_WriteOneBytes(g_tParam.systemCfg.waitTime, ADDR_WAIT_TIME);   
0000fe  4934              LDR      r1,|L3.464|
000100  f8910029          LDRB     r0,[r1,#0x29]
000104  2112              MOVS     r1,#0x12
000106  f7fffffe          BL       ee_WriteOneBytes
;;;189        ee_WriteOneBytes(g_tParam.systemCfg.multipleOpenCfg[0], IS_OPEN_INTERLOCK);
00010a  4931              LDR      r1,|L3.464|
00010c  f891002a          LDRB     r0,[r1,#0x2a]
000110  2132              MOVS     r1,#0x32
000112  f7fffffe          BL       ee_WriteOneBytes
;;;190        ee_WriteOneBytes(g_tParam.systemCfg.multipleOpenCfg[1], IS_OPEN_FIRST_CARD);
000116  492e              LDR      r1,|L3.464|
000118  f891002b          LDRB     r0,[r1,#0x2b]
00011c  2123              MOVS     r1,#0x23
00011e  f7fffffe          BL       ee_WriteOneBytes
;;;191        ee_WriteOneBytes(g_tParam.systemCfg.multipleOpenCfg[2], IS_OPEN_MULTIPLE_CARD);
000122  492b              LDR      r1,|L3.464|
000124  f891002c          LDRB     r0,[r1,#0x2c]
000128  2140              MOVS     r1,#0x40
00012a  f7fffffe          BL       ee_WriteOneBytes
;;;192        ee_WriteOneBytes(g_tParam.systemCfg.multipleOpenCfg[3], IS_OPEN_SUPER_CARD);
00012e  4928              LDR      r1,|L3.464|
000130  f891002d          LDRB     r0,[r1,#0x2d]
000134  2127              MOVS     r1,#0x27
000136  f7fffffe          BL       ee_WriteOneBytes
;;;193        ee_WriteOneBytes(g_tParam.systemCfg.multipleOpenCfg[4], IS_OPEN_SUPER_PASSWORD);
00013a  4925              LDR      r1,|L3.464|
00013c  f891002e          LDRB     r0,[r1,#0x2e]
000140  213a              MOVS     r1,#0x3a
000142  f7fffffe          BL       ee_WriteOneBytes
;;;194        ee_WriteOneBytes(g_tParam.systemCfg.multipleOpenCfg[5], IS_OPEN_THREAT_CARD);
000146  4922              LDR      r1,|L3.464|
000148  f891002f          LDRB     r0,[r1,#0x2f]
00014c  2131              MOVS     r1,#0x31
00014e  f7fffffe          BL       ee_WriteOneBytes
;;;195        ee_WriteOneBytes(g_tParam.systemCfg.multipleOpenCfg[6], IS_OPEN_THREAT_PASSWORD);
000152  491f              LDR      r1,|L3.464|
000154  f8910030          LDRB     r0,[r1,#0x30]
000158  2136              MOVS     r1,#0x36
00015a  f7fffffe          BL       ee_WriteOneBytes
;;;196        ee_WriteOneBytes(g_tParam.systemCfg.multipleOpenCfg[7], IS_OPEN_FINGER);
00015e  491c              LDR      r1,|L3.464|
000160  f8910031          LDRB     r0,[r1,#0x31]
000164  2160              MOVS     r1,#0x60
000166  f7fffffe          BL       ee_WriteOneBytes
;;;197        //对应关系
;;;198        ee_WriteOneBytes(g_tParam.relation.relationA.reader_switcher, ADDR_RELATION_READER_A);
00016a  4919              LDR      r1,|L3.464|
00016c  7d08              LDRB     r0,[r1,#0x14]  ; g_tParam
00016e  210e              MOVS     r1,#0xe
000170  f7fffffe          BL       ee_WriteOneBytes
;;;199        ee_WriteOneBytes(g_tParam.relation.relationB.reader_switcher, ADDR_RELATION_READER_B);
000174  4916              LDR      r1,|L3.464|
000176  7d88              LDRB     r0,[r1,#0x16]
000178  210f              MOVS     r1,#0xf
00017a  f7fffffe          BL       ee_WriteOneBytes
;;;200        ee_WriteOneBytes(g_tParam.relation.relationA.button_switcher, ADDR_RELATION_BUTTON_A);
00017e  4914              LDR      r1,|L3.464|
000180  7d48              LDRB     r0,[r1,#0x15]
000182  2110              MOVS     r1,#0x10
000184  f7fffffe          BL       ee_WriteOneBytes
;;;201        ee_WriteOneBytes(g_tParam.relation.relationB.button_switcher, ADDR_RELATION_BUTTON_B);
000188  4911              LDR      r1,|L3.464|
00018a  7dc8              LDRB     r0,[r1,#0x17]
00018c  2111              MOVS     r1,#0x11
00018e  f7fffffe          BL       ee_WriteOneBytes
;;;202        //下一次历史记录地址
;;;203        ee_WriteOneBytes(g_tParam.nextStartAddr.nextStartSector[0], NEXT_START_SECTOR_H);
000192  490f              LDR      r1,|L3.464|
000194  f8910032          LDRB     r0,[r1,#0x32]  ; g_tParam
000198  211c              MOVS     r1,#0x1c
00019a  f7fffffe          BL       ee_WriteOneBytes
;;;204        ee_WriteOneBytes(g_tParam.nextStartAddr.nextStartSector[1], NEXT_START_SECTOR_L);
00019e  490c              LDR      r1,|L3.464|
0001a0  f8910033          LDRB     r0,[r1,#0x33]
0001a4  211d              MOVS     r1,#0x1d
0001a6  f7fffffe          BL       ee_WriteOneBytes
;;;205        ee_WriteOneBytes(g_tParam.nextStartAddr.nextStartAddr[0], NEXT_START_ADDR_H);
0001aa  4909              LDR      r1,|L3.464|
0001ac  f8910034          LDRB     r0,[r1,#0x34]
0001b0  211e              MOVS     r1,#0x1e
0001b2  f7fffffe          BL       ee_WriteOneBytes
;;;206        ee_WriteOneBytes(g_tParam.nextStartAddr.nextStartAddr[1], NEXT_START_ADDR_L);
0001b6  4906              LDR      r1,|L3.464|
0001b8  f8910035          LDRB     r0,[r1,#0x35]
0001bc  211f              MOVS     r1,#0x1f
0001be  f7fffffe          BL       ee_WriteOneBytes
;;;207        
;;;208        //重新设置网络
;;;209        set_default(&g_tParam.netCfg);
0001c2  4803              LDR      r0,|L3.464|
0001c4  3018              ADDS     r0,r0,#0x18
0001c6  f7fffffe          BL       set_default
;;;210    }
0001ca  b00a              ADD      sp,sp,#0x28
0001cc  bd10              POP      {r4,pc}
;;;211    
                          ENDP

0001ce  0000              DCW      0x0000
                  |L3.464|
                          DCD      g_tParam

                          AREA ||i.searchID||, CODE, READONLY, ALIGN=2

                  searchID PROC
;;;365    //判断成功后立即返回卡号类型，不成功则继续判断
;;;366    uint8_t searchID(uint8_t *id)
000000  b570              PUSH     {r4-r6,lr}
;;;367    {
000002  4605              MOV      r5,r0
;;;368        uint16_t i;
;;;369        
;;;370        for(i = 0; i<sizeof(g_tParam.systemCfg.multipleOpenCfg); i++)
000004  2400              MOVS     r4,#0
000006  e066              B        |L4.214|
                  |L4.8|
;;;371        {
;;;372            if(g_tParam.systemCfg.multipleOpenCfg[i]!=0)
000008  483a              LDR      r0,|L4.244|
00000a  5d00              LDRB     r0,[r0,r4]
00000c  2800              CMP      r0,#0
00000e  d060              BEQ      |L4.210|
;;;373            {
;;;374                switch(i)
000010  2c08              CMP      r4,#8
000012  d25c              BCS      |L4.206|
000014  e8dff004          TBB      [pc,r4]
000018  5b040f1a          DCB      0x5b,0x04,0x0f,0x1a
00001c  242f3a45          DCB      0x24,0x2f,0x3a,0x45
;;;375                {
;;;376                    case 1://首卡
;;;377                        if(compareID(id, g_tParam.multipleCardID.firstCardID, sizeof(g_tParam.multipleCardID.firstCardID)) == 1)
000020  2203              MOVS     r2,#3
000022  4934              LDR      r1,|L4.244|
000024  310c              ADDS     r1,r1,#0xc
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       compareID
00002c  2801              CMP      r0,#1
00002e  d101              BNE      |L4.52|
;;;378                        {
;;;379                            return e_firstCardID;
000030  2000              MOVS     r0,#0
                  |L4.50|
;;;380                        }
;;;381                        break;
;;;382                        
;;;383                    case 2://多重卡
;;;384                        if(compareID(id, g_tParam.multipleCardID.multipleCardID, sizeof(g_tParam.multipleCardID.multipleCardID)) == 1)
;;;385                        {
;;;386                            return e_multipleCardID;
;;;387                        }
;;;388                        break;
;;;389                    
;;;390                    case 3://超级卡
;;;391                        if(compareID(id, g_tParam.multipleCardID.superCardID, sizeof(g_tParam.multipleCardID.superCardID)) == 1)
;;;392                        {
;;;393                            return e_superCardID;
;;;394                        }
;;;395                        break;
;;;396                    
;;;397                    case 4://超级密码
;;;398                        if(compareID(id, g_tParam.multipleCardID.superPasswordID, sizeof(g_tParam.multipleCardID.superPasswordID)) == 1)
;;;399                        {
;;;400                            return e_superPasswordID;
;;;401                        }
;;;402                        break;
;;;403                    
;;;404                    case 5://胁迫卡
;;;405                        if(compareID(id, g_tParam.multipleCardID.threatCardID, sizeof(g_tParam.multipleCardID.threatCardID)) == 1)
;;;406                        {
;;;407                            return e_threatCardID;
;;;408                        }
;;;409                        break;
;;;410                    
;;;411                    case 6://胁迫码
;;;412                        if(compareID(id, g_tParam.multipleCardID.threatPasswordID, sizeof(g_tParam.multipleCardID.threatPasswordID)) == 1)
;;;413                        {
;;;414                            return e_threatPasswordID;
;;;415                        }
;;;416                        break;
;;;417                    
;;;418                    case 7://指纹模块
;;;419                        if(compareID(id, g_tParam.multipleCardID.keyBoardID, sizeof(g_tParam.multipleCardID.keyBoardID)) == 1)
;;;420                        {
;;;421                            return e_keyBoardID;
;;;422                        }
;;;423                        if(compareID(id, g_tParam.multipleCardID.fingerID, sizeof(g_tParam.multipleCardID.fingerID)) == 1)
;;;424                        {
;;;425                            return e_threatCardID;
;;;426                        }                    
;;;427                        break;
;;;428                    
;;;429                    default:
;;;430                        break;
;;;431                }//end of switch
;;;432            }//end of if
;;;433        }//end of for
;;;434        
;;;435        //判断普通卡
;;;436        if(compareID(id, g_tParam.multipleCardID.generalCardID, sizeof(g_tParam.multipleCardID.generalCardID)) == 1)
;;;437        {
;;;438            return e_generalCardID;
;;;439        }
;;;440        //都不符合，返回0xFF
;;;441        return 0xFF;
;;;442    }
000032  bd70              POP      {r4-r6,pc}
                  |L4.52|
000034  e04c              B        |L4.208|
000036  221e              MOVS     r2,#0x1e              ;384
000038  492e              LDR      r1,|L4.244|
00003a  3124              ADDS     r1,r1,#0x24           ;384
00003c  4628              MOV      r0,r5                 ;384
00003e  f7fffffe          BL       compareID
000042  2801              CMP      r0,#1                 ;384
000044  d101              BNE      |L4.74|
000046  2006              MOVS     r0,#6                 ;386
000048  e7f3              B        |L4.50|
                  |L4.74|
00004a  e041              B        |L4.208|
00004c  2203              MOVS     r2,#3                 ;391
00004e  4929              LDR      r1,|L4.244|
000050  310f              ADDS     r1,r1,#0xf            ;391
000052  4628              MOV      r0,r5                 ;391
000054  f7fffffe          BL       compareID
000058  2801              CMP      r0,#1                 ;391
00005a  d100              BNE      |L4.94|
00005c  e7e9              B        |L4.50|
                  |L4.94|
00005e  e037              B        |L4.208|
000060  2203              MOVS     r2,#3                 ;398
000062  4924              LDR      r1,|L4.244|
000064  3112              ADDS     r1,r1,#0x12           ;398
000066  4628              MOV      r0,r5                 ;398
000068  f7fffffe          BL       compareID
00006c  2801              CMP      r0,#1                 ;398
00006e  d101              BNE      |L4.116|
000070  2002              MOVS     r0,#2                 ;400
000072  e7de              B        |L4.50|
                  |L4.116|
000074  e02c              B        |L4.208|
000076  2209              MOVS     r2,#9                 ;405
000078  491e              LDR      r1,|L4.244|
00007a  3115              ADDS     r1,r1,#0x15           ;405
00007c  4628              MOV      r0,r5                 ;405
00007e  f7fffffe          BL       compareID
000082  2801              CMP      r0,#1                 ;405
000084  d101              BNE      |L4.138|
000086  2003              MOVS     r0,#3                 ;407
000088  e7d3              B        |L4.50|
                  |L4.138|
00008a  e021              B        |L4.208|
00008c  2203              MOVS     r2,#3                 ;412
00008e  4919              LDR      r1,|L4.244|
000090  311e              ADDS     r1,r1,#0x1e           ;412
000092  4628              MOV      r0,r5                 ;412
000094  f7fffffe          BL       compareID
000098  2801              CMP      r0,#1                 ;412
00009a  d101              BNE      |L4.160|
00009c  2004              MOVS     r0,#4                 ;414
00009e  e7c8              B        |L4.50|
                  |L4.160|
0000a0  e016              B        |L4.208|
0000a2  2203              MOVS     r2,#3                 ;419
0000a4  4913              LDR      r1,|L4.244|
0000a6  3121              ADDS     r1,r1,#0x21           ;419
0000a8  4628              MOV      r0,r5                 ;419
0000aa  f7fffffe          BL       compareID
0000ae  2801              CMP      r0,#1                 ;419
0000b0  d101              BNE      |L4.182|
0000b2  2005              MOVS     r0,#5                 ;421
0000b4  e7bd              B        |L4.50|
                  |L4.182|
0000b6  f24052dc          MOV      r2,#0x5dc             ;423
0000ba  490e              LDR      r1,|L4.244|
0000bc  3142              ADDS     r1,r1,#0x42           ;423
0000be  4628              MOV      r0,r5                 ;423
0000c0  f7fffffe          BL       compareID
0000c4  2801              CMP      r0,#1                 ;423
0000c6  d101              BNE      |L4.204|
0000c8  2003              MOVS     r0,#3                 ;425
0000ca  e7b2              B        |L4.50|
                  |L4.204|
0000cc  e000              B        |L4.208|
                  |L4.206|
0000ce  bf00              NOP                            ;430
                  |L4.208|
0000d0  bf00              NOP                            ;381
                  |L4.210|
0000d2  1c60              ADDS     r0,r4,#1              ;370
0000d4  b284              UXTH     r4,r0                 ;370
                  |L4.214|
0000d6  2c08              CMP      r4,#8                 ;370
0000d8  d396              BCC      |L4.8|
0000da  f24052dc          MOV      r2,#0x5dc             ;436
0000de  4906              LDR      r1,|L4.248|
0000e0  4628              MOV      r0,r5                 ;436
0000e2  f7fffffe          BL       compareID
0000e6  2801              CMP      r0,#1                 ;436
0000e8  d101              BNE      |L4.238|
0000ea  2007              MOVS     r0,#7                 ;438
0000ec  e7a1              B        |L4.50|
                  |L4.238|
0000ee  20ff              MOVS     r0,#0xff              ;441
0000f0  e79f              B        |L4.50|
;;;443    
                          ENDP

0000f2  0000              DCW      0x0000
                  |L4.244|
                          DCD      g_tParam+0x2a
                  |L4.248|
                          DCD      g_tParam+0x648

                          AREA ||i.updateMultipleCardID||, CODE, READONLY, ALIGN=1

                  updateMultipleCardID PROC
;;;310    //更新参数--卡号配置
;;;311    void updateMultipleCardID(uint8_t *data, uint16_t len, enum ID_Enum type)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;312    {
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
000008  4617              MOV      r7,r2
;;;313        uint8_t i = 0;
00000a  2400              MOVS     r4,#0
;;;314        //uint8_t temp[300]={0};
;;;315        switch(type)
00000c  2f09              CMP      r7,#9
00000e  d262              BCS      |L5.214|
000010  e8dff007          TBB      [pc,r7]
000014  050b1117          DCB      0x05,0x0b,0x11,0x17
000018  1d23292f          DCB      0x1d,0x23,0x29,0x2f
00001c  4800              DCB      0x48,0x00
;;;316        {
;;;317            case e_firstCardID:
;;;318                ee_WriteBytes(data, FIRST_CARD_ID, len);
00001e  462a              MOV      r2,r5
000020  2120              MOVS     r1,#0x20
000022  4630              MOV      r0,r6
000024  f7fffffe          BL       ee_WriteBytes
;;;319                break;
000028  e056              B        |L5.216|
;;;320            case e_superCardID:
;;;321                ee_WriteBytes(data, SUPER_CARD_ID, len);
00002a  462a              MOV      r2,r5
00002c  2124              MOVS     r1,#0x24
00002e  4630              MOV      r0,r6
000030  f7fffffe          BL       ee_WriteBytes
;;;322                break;
000034  e050              B        |L5.216|
;;;323            case e_superPasswordID:
;;;324                ee_WriteBytes(data, SUPER_PASSWORD_ID, len);
000036  462a              MOV      r2,r5
000038  2137              MOVS     r1,#0x37
00003a  4630              MOV      r0,r6
00003c  f7fffffe          BL       ee_WriteBytes
;;;325                break;
000040  e04a              B        |L5.216|
;;;326            case e_threatCardID:
;;;327                ee_WriteBytes(data, THREAT_CARD_ID, len);
000042  462a              MOV      r2,r5
000044  2128              MOVS     r1,#0x28
000046  4630              MOV      r0,r6
000048  f7fffffe          BL       ee_WriteBytes
;;;328                break;
00004c  e044              B        |L5.216|
;;;329            case e_threatPasswordID:
;;;330                ee_WriteBytes(data, THREAT_PASSWORD_ID, len);
00004e  462a              MOV      r2,r5
000050  2133              MOVS     r1,#0x33
000052  4630              MOV      r0,r6
000054  f7fffffe          BL       ee_WriteBytes
;;;331                break;
000058  e03e              B        |L5.216|
;;;332            case e_keyBoardID:
;;;333                ee_WriteBytes(data, KEY_BOARD_ID, len);
00005a  462a              MOV      r2,r5
00005c  2161              MOVS     r1,#0x61
00005e  4630              MOV      r0,r6
000060  f7fffffe          BL       ee_WriteBytes
;;;334                break;
000064  e038              B        |L5.216|
;;;335            case e_multipleCardID:
;;;336                ee_WriteBytes(data, MULTIPLE_CARD_ID, len);
000066  462a              MOV      r2,r5
000068  2141              MOVS     r1,#0x41
00006a  4630              MOV      r0,r6
00006c  f7fffffe          BL       ee_WriteBytes
;;;337                break;
000070  e032              B        |L5.216|
;;;338            case e_generalCardID://len=300
;;;339                len=len/5;
000072  2005              MOVS     r0,#5
000074  fb95f0f0          SDIV     r0,r5,r0
000078  b285              UXTH     r5,r0
;;;340                //一次写300字节，有100个卡号，分5次写入
;;;341                for(i=0;i<5;i++)
00007a  2400              MOVS     r4,#0
00007c  e00f              B        |L5.158|
                  |L5.126|
;;;342                {
;;;343                    ee_WriteBytes(data, GENERAL_CARD_ID+i*300, len);
00007e  ebc41004          RSB      r0,r4,r4,LSL #4
000082  eb000080          ADD      r0,r0,r0,LSL #2
000086  f44f62c8          MOV      r2,#0x640
00008a  eb020180          ADD      r1,r2,r0,LSL #2
00008e  462a              MOV      r2,r5
000090  4630              MOV      r0,r6
000092  f7fffffe          BL       ee_WriteBytes
;;;344                    data += 300;
000096  f5067696          ADD      r6,r6,#0x12c
00009a  1c60              ADDS     r0,r4,#1              ;341
00009c  b2c4              UXTB     r4,r0                 ;341
                  |L5.158|
00009e  2c05              CMP      r4,#5                 ;341
0000a0  dbed              BLT      |L5.126|
;;;345                }
;;;346                //test
;;;347                //bsp_DelayMS(100);
;;;348                //ee_ReadBytes(temp, GENERAL_CARD_ID, 300);
;;;349                break;
0000a2  e019              B        |L5.216|
;;;350            case e_fingerID://len=300
;;;351                len=len/5;
0000a4  2005              MOVS     r0,#5
0000a6  fb95f0f0          SDIV     r0,r5,r0
0000aa  b285              UXTH     r5,r0
;;;352                //一次写300字节，有100个卡号，分5次写入
;;;353                for(i=0;i<5;i++)
0000ac  2400              MOVS     r4,#0
0000ae  e00f              B        |L5.208|
                  |L5.176|
;;;354                {
;;;355                    ee_WriteBytes(data, GENERAL_CARD_ID+i*300, len);
0000b0  ebc41004          RSB      r0,r4,r4,LSL #4
0000b4  eb000080          ADD      r0,r0,r0,LSL #2
0000b8  f44f62c8          MOV      r2,#0x640
0000bc  eb020180          ADD      r1,r2,r0,LSL #2
0000c0  462a              MOV      r2,r5
0000c2  4630              MOV      r0,r6
0000c4  f7fffffe          BL       ee_WriteBytes
;;;356                    data += 300;
0000c8  f5067696          ADD      r6,r6,#0x12c
0000cc  1c60              ADDS     r0,r4,#1              ;353
0000ce  b2c4              UXTB     r4,r0                 ;353
                  |L5.208|
0000d0  2c05              CMP      r4,#5                 ;353
0000d2  dbed              BLT      |L5.176|
;;;357                }
;;;358                break;
0000d4  e000              B        |L5.216|
                  |L5.214|
;;;359            default:
;;;360                break;
0000d6  bf00              NOP      
                  |L5.216|
0000d8  bf00              NOP                            ;319
;;;361        }
;;;362    }
0000da  e8bd81f0          POP      {r4-r8,pc}
;;;363    
                          ENDP


                          AREA ||i.updateNetCfg||, CODE, READONLY, ALIGN=1

                  updateNetCfg PROC
;;;234    //更新参数--网络配置
;;;235    void updateNetCfg(NetCfg_T *netCfg, enum NetCfg_Enum type)
000000  b538              PUSH     {r3-r5,lr}
;;;236    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;237        uint8_t temp[2];
;;;238        switch(type)
000006  b165              CBZ      r5,|L6.34|
000008  2d01              CMP      r5,#1
00000a  d01e              BEQ      |L6.74|
00000c  2d02              CMP      r5,#2
00000e  d002              BEQ      |L6.22|
000010  2d03              CMP      r5,#3
000012  d127              BNE      |L6.100|
000014  e012              B        |L6.60|
                  |L6.22|
;;;239        {
;;;240            case e_local_ip:
;;;241                ee_WriteBytes(netCfg->local_ip, ADDR_LOCAL_IP, sizeof(netCfg->local_ip));
000016  2204              MOVS     r2,#4
000018  2101              MOVS     r1,#1
00001a  1d20              ADDS     r0,r4,#4
00001c  f7fffffe          BL       ee_WriteBytes
;;;242                break;
000020  e021              B        |L6.102|
                  |L6.34|
;;;243            case e_local_port:
;;;244                temp[0] = netCfg->local_port >> 8;
000022  8820              LDRH     r0,[r4,#0]
000024  1200              ASRS     r0,r0,#8
000026  f88d0000          STRB     r0,[sp,#0]
;;;245                temp[1] = netCfg->local_port & 0xFF;
00002a  7820              LDRB     r0,[r4,#0]
00002c  f88d0001          STRB     r0,[sp,#1]
;;;246                ee_WriteBytes(temp, ADDR_LOCAL_PORT, sizeof(temp));
000030  2202              MOVS     r2,#2
000032  2105              MOVS     r1,#5
000034  4668              MOV      r0,sp
000036  f7fffffe          BL       ee_WriteBytes
;;;247                break;
00003a  e014              B        |L6.102|
                  |L6.60|
;;;248            case e_server_ip:
;;;249                ee_WriteBytes(netCfg->server_ip, ADDR_SERVER_IP, sizeof(netCfg->server_ip));
00003c  2204              MOVS     r2,#4
00003e  2107              MOVS     r1,#7
000040  f1040008          ADD      r0,r4,#8
000044  f7fffffe          BL       ee_WriteBytes
;;;250                break;
000048  e00d              B        |L6.102|
                  |L6.74|
;;;251            case e_server_port:
;;;252                temp[0] = netCfg->server_port >> 8;
00004a  8860              LDRH     r0,[r4,#2]
00004c  1200              ASRS     r0,r0,#8
00004e  f88d0000          STRB     r0,[sp,#0]
;;;253                temp[1] = netCfg->server_port & 0xFF;
000052  78a0              LDRB     r0,[r4,#2]
000054  f88d0001          STRB     r0,[sp,#1]
;;;254                ee_WriteBytes(temp, ADDR_SERVER_PORT, sizeof(temp));
000058  2202              MOVS     r2,#2
00005a  210b              MOVS     r1,#0xb
00005c  4668              MOV      r0,sp
00005e  f7fffffe          BL       ee_WriteBytes
;;;255                break;
000062  e000              B        |L6.102|
                  |L6.100|
;;;256            default:
;;;257                break;
000064  bf00              NOP      
                  |L6.102|
000066  bf00              NOP                            ;242
;;;258        }
;;;259    }
000068  bd38              POP      {r3-r5,pc}
;;;260    
                          ENDP


                          AREA ||i.updateNextStartAddr||, CODE, READONLY, ALIGN=1

                  updateNextStartAddr PROC
;;;301    //更新参数--下次历史记录地址
;;;302    void updateNextStartAddr(NextStartAddr_T *nextStartAddr)
000000  b510              PUSH     {r4,lr}
;;;303    {
000002  4604              MOV      r4,r0
;;;304        ee_WriteOneBytes(nextStartAddr->nextStartSector[0], NEXT_START_SECTOR_H);
000004  7820              LDRB     r0,[r4,#0]
000006  211c              MOVS     r1,#0x1c
000008  f7fffffe          BL       ee_WriteOneBytes
;;;305        ee_WriteOneBytes(nextStartAddr->nextStartSector[1], NEXT_START_SECTOR_L);
00000c  7860              LDRB     r0,[r4,#1]
00000e  211d              MOVS     r1,#0x1d
000010  f7fffffe          BL       ee_WriteOneBytes
;;;306        ee_WriteOneBytes(nextStartAddr->nextStartAddr[0], NEXT_START_ADDR_H);
000014  78a0              LDRB     r0,[r4,#2]
000016  211e              MOVS     r1,#0x1e
000018  f7fffffe          BL       ee_WriteOneBytes
;;;307        ee_WriteOneBytes(nextStartAddr->nextStartAddr[1], NEXT_START_ADDR_L);
00001c  78e0              LDRB     r0,[r4,#3]
00001e  211f              MOVS     r1,#0x1f
000020  f7fffffe          BL       ee_WriteOneBytes
;;;308    }
000024  bd10              POP      {r4,pc}
;;;309    
                          ENDP


                          AREA ||i.updateRelation||, CODE, READONLY, ALIGN=1

                  updateRelation PROC
;;;212    //更新参数--对应关系
;;;213    void updateRelation(Relation_T *relation, enum ReaderOrButton_Enum type)
000000  b570              PUSH     {r4-r6,lr}
;;;214    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;215        switch(type)
000006  b135              CBZ      r5,|L8.22|
000008  2d01              CMP      r5,#1
00000a  d009              BEQ      |L8.32|
00000c  2d02              CMP      r5,#2
00000e  d00c              BEQ      |L8.42|
000010  2d03              CMP      r5,#3
000012  d114              BNE      |L8.62|
000014  e00e              B        |L8.52|
                  |L8.22|
;;;216        {
;;;217            case e_READER_A:
;;;218                ee_WriteOneBytes(relation->relationA.reader_switcher, ADDR_RELATION_READER_A);
000016  7820              LDRB     r0,[r4,#0]
000018  210e              MOVS     r1,#0xe
00001a  f7fffffe          BL       ee_WriteOneBytes
;;;219                break;
00001e  e00f              B        |L8.64|
                  |L8.32|
;;;220            case e_READER_B:
;;;221                ee_WriteOneBytes(relation->relationB.reader_switcher, ADDR_RELATION_READER_B);
000020  78a0              LDRB     r0,[r4,#2]
000022  210f              MOVS     r1,#0xf
000024  f7fffffe          BL       ee_WriteOneBytes
;;;222                break;
000028  e00a              B        |L8.64|
                  |L8.42|
;;;223            case e_BUTTON_A:
;;;224                ee_WriteOneBytes(relation->relationA.button_switcher, ADDR_RELATION_BUTTON_A);
00002a  7860              LDRB     r0,[r4,#1]
00002c  2110              MOVS     r1,#0x10
00002e  f7fffffe          BL       ee_WriteOneBytes
;;;225                break;
000032  e005              B        |L8.64|
                  |L8.52|
;;;226            case e_BUTTON_B:
;;;227                ee_WriteOneBytes(relation->relationB.button_switcher, ADDR_RELATION_BUTTON_B);
000034  78e0              LDRB     r0,[r4,#3]
000036  2111              MOVS     r1,#0x11
000038  f7fffffe          BL       ee_WriteOneBytes
;;;228                break;
00003c  e000              B        |L8.64|
                  |L8.62|
;;;229            default:
;;;230                break;
00003e  bf00              NOP      
                  |L8.64|
000040  bf00              NOP                            ;219
;;;231        }
;;;232    }
000042  bd70              POP      {r4-r6,pc}
;;;233    
                          ENDP


                          AREA ||i.updateSystemCfg||, CODE, READONLY, ALIGN=1

                  updateSystemCfg PROC
;;;261    //更新参数--系统配置
;;;262    void updateSystemCfg(SystemCfg_T *systemCfg, enum OpenCfg_Enum type)
000000  b570              PUSH     {r4-r6,lr}
;;;263    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;264        switch(type)
000006  2d0a              CMP      r5,#0xa
000008  d238              BCS      |L9.124|
00000a  e8dff005          TBB      [pc,r5]
00000e  050a              DCB      0x05,0x0a
000010  0f14191e          DCB      0x0f,0x14,0x19,0x1e
000014  23282d32          DCB      0x23,0x28,0x2d,0x32
;;;265        {
;;;266            case e_openTime:
;;;267                ee_WriteOneBytes(systemCfg->openTime, ADDR_OPEN_TIME);
000018  7820              LDRB     r0,[r4,#0]
00001a  210d              MOVS     r1,#0xd
00001c  f7fffffe          BL       ee_WriteOneBytes
;;;268                break;
000020  e02d              B        |L9.126|
;;;269            case e_waitTime:
;;;270                ee_WriteOneBytes(systemCfg->waitTime, ADDR_WAIT_TIME);
000022  7860              LDRB     r0,[r4,#1]
000024  2112              MOVS     r1,#0x12
000026  f7fffffe          BL       ee_WriteOneBytes
;;;271                break;
00002a  e028              B        |L9.126|
;;;272            case e_interlock:
;;;273                ee_WriteOneBytes(systemCfg->multipleOpenCfg[0], IS_OPEN_INTERLOCK);
00002c  78a0              LDRB     r0,[r4,#2]
00002e  2132              MOVS     r1,#0x32
000030  f7fffffe          BL       ee_WriteOneBytes
;;;274                break;
000034  e023              B        |L9.126|
;;;275            case e_firstCard:
;;;276                ee_WriteOneBytes(systemCfg->multipleOpenCfg[1], IS_OPEN_FIRST_CARD);
000036  78e0              LDRB     r0,[r4,#3]
000038  2123              MOVS     r1,#0x23
00003a  f7fffffe          BL       ee_WriteOneBytes
;;;277                break;
00003e  e01e              B        |L9.126|
;;;278            case e_multipleCard:
;;;279                ee_WriteOneBytes(systemCfg->multipleOpenCfg[2], IS_OPEN_MULTIPLE_CARD);
000040  7920              LDRB     r0,[r4,#4]
000042  2140              MOVS     r1,#0x40
000044  f7fffffe          BL       ee_WriteOneBytes
;;;280                break;
000048  e019              B        |L9.126|
;;;281            case e_superCard:
;;;282                ee_WriteOneBytes(systemCfg->multipleOpenCfg[3], IS_OPEN_SUPER_CARD);
00004a  7960              LDRB     r0,[r4,#5]
00004c  2127              MOVS     r1,#0x27
00004e  f7fffffe          BL       ee_WriteOneBytes
;;;283                break;
000052  e014              B        |L9.126|
;;;284            case e_superPassword:
;;;285                ee_WriteOneBytes(systemCfg->multipleOpenCfg[4], IS_OPEN_SUPER_PASSWORD);
000054  79a0              LDRB     r0,[r4,#6]
000056  213a              MOVS     r1,#0x3a
000058  f7fffffe          BL       ee_WriteOneBytes
;;;286                break;
00005c  e00f              B        |L9.126|
;;;287            case e_threatCard:
;;;288                ee_WriteOneBytes(systemCfg->multipleOpenCfg[5], IS_OPEN_THREAT_CARD);
00005e  79e0              LDRB     r0,[r4,#7]
000060  2131              MOVS     r1,#0x31
000062  f7fffffe          BL       ee_WriteOneBytes
;;;289                break;
000066  e00a              B        |L9.126|
;;;290            case e_threatPassword:
;;;291                ee_WriteOneBytes(systemCfg->multipleOpenCfg[6], IS_OPEN_THREAT_PASSWORD);
000068  7a20              LDRB     r0,[r4,#8]
00006a  2136              MOVS     r1,#0x36
00006c  f7fffffe          BL       ee_WriteOneBytes
;;;292                break;
000070  e005              B        |L9.126|
;;;293            case e_finger:
;;;294                ee_WriteOneBytes(systemCfg->multipleOpenCfg[7], IS_OPEN_FINGER);
000072  7a60              LDRB     r0,[r4,#9]
000074  2160              MOVS     r1,#0x60
000076  f7fffffe          BL       ee_WriteOneBytes
;;;295                break;
00007a  e000              B        |L9.126|
                  |L9.124|
;;;296            default:
;;;297                break;
00007c  bf00              NOP      
                  |L9.126|
00007e  bf00              NOP                            ;268
;;;298        }
;;;299    }
000080  bd70              POP      {r4-r6,pc}
;;;300    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_tParam
                          %        3108

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\Param\\param.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___7_param_c_94144d09____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_param_c_94144d09____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___7_param_c_94144d09____REVSH|
#line 128
|__asm___7_param_c_94144d09____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
