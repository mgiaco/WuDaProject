; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\device.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\device.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\User\bsp -I..\..\User -I..\..\Libraries\CMSIS\Include -I..\..\RTX\inc -I..\..\RTX\portable -I..\..\User\CpuFlash -I..\..\User\CRC8_16 -I..\..\User\DS1302 -I..\..\User\DWT -I..\..\User\IIC -I..\..\User\IWDG -I..\..\User\Key -I..\..\User\Led -I..\..\User\Net -I..\..\User\Protocal -I..\..\User\Reader -I..\..\User\SPI -I..\..\User\Timer -I..\..\User\Uart -I..\..\User\Param -D__MICROLIB -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\device.crf ..\..\User\Net\device.c]
                          THUMB

                          AREA ||i.Reset_W5500||, CODE, READONLY, ALIGN=2

                  Reset_W5500 PROC
;;;9      
;;;10     void Reset_W5500(void)
000000  b510              PUSH     {r4,lr}
;;;11     {
;;;12       GPIO_ResetBits(GPIOC, WIZ_RESET);
000002  2180              MOVS     r1,#0x80
000004  4807              LDR      r0,|L1.36|
000006  f7fffffe          BL       GPIO_ResetBits
;;;13       bsp_DelayMS(1);//datasheet上注明，reset引脚低有效，需保持低电平至少500us才能重置w5500  
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       bsp_DelayMS
;;;14       GPIO_SetBits(GPIOC, WIZ_RESET);
000010  2180              MOVS     r1,#0x80
000012  4804              LDR      r0,|L1.36|
000014  f7fffffe          BL       GPIO_SetBits
;;;15       bsp_DelayMS(1600);
000018  f44f60c8          MOV      r0,#0x640
00001c  f7fffffe          BL       bsp_DelayMS
;;;16     }
000020  bd10              POP      {r4,pc}
;;;17     //reboot 
                          ENDP

000022  0000              DCW      0x0000
                  |L1.36|
                          DCD      0x40011000

                          AREA ||i.set_default||, CODE, READONLY, ALIGN=2

                  set_default PROC
;;;48     // 设置默认MAC、IP、GW、SUB、DNS
;;;49     void set_default(NetCfg_T *NetCfg)	
000000  b510              PUSH     {r4,lr}
;;;50     {  
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
;;;51       uint8 lip[4]={0};
000006  2000              MOVS     r0,#0
000008  9005              STR      r0,[sp,#0x14]
;;;52       uint8 mac[6]={0x00, 0x08, 0, 0, 0, 0};//mac前两位保持不变，值为偶数
00000a  a11d              ADR      r1,|L2.128|
00000c  c903              LDM      r1,{r0,r1}
00000e  e9cd0103          STRD     r0,r1,[sp,#0xc]
;;;53       uint8 sub[4]={255,255,255,0};
000012  a01d              ADR      r0,|L2.136|
000014  6800              LDR      r0,[r0,#0]
000016  9002              STR      r0,[sp,#8]
;;;54       uint8 gw[4]={192,168,1,1};
000018  a01c              ADR      r0,|L2.140|
00001a  6800              LDR      r0,[r0,#0]
00001c  9001              STR      r0,[sp,#4]
;;;55       uint8 dns[4]={8,8,8,8};
00001e  a01c              ADR      r0,|L2.144|
000020  6800              LDR      r0,[r0,#0]
000022  9000              STR      r0,[sp,#0]
;;;56       
;;;57       mac[2]=NetCfg->mcuID[0];
000024  7b20              LDRB     r0,[r4,#0xc]
000026  f88d000e          STRB     r0,[sp,#0xe]
;;;58       mac[3]=NetCfg->mcuID[1];
00002a  7b60              LDRB     r0,[r4,#0xd]
00002c  f88d000f          STRB     r0,[sp,#0xf]
;;;59       mac[4]=NetCfg->mcuID[2];
000030  7ba0              LDRB     r0,[r4,#0xe]
000032  f88d0010          STRB     r0,[sp,#0x10]
;;;60       mac[5]=NetCfg->mcuID[3];
000036  7be0              LDRB     r0,[r4,#0xf]
000038  f88d0011          STRB     r0,[sp,#0x11]
;;;61       
;;;62       
;;;63       memcpy(lip, NetCfg->local_ip, 4);
00003c  6860              LDR      r0,[r4,#4]
00003e  9005              STR      r0,[sp,#0x14]
;;;64      
;;;65       memcpy(ConfigMsg.lip, lip, 4);
000040  4814              LDR      r0,|L2.148|
000042  9905              LDR      r1,[sp,#0x14]
000044  60c1              STR      r1,[r0,#0xc]  ; ConfigMsg
;;;66       memcpy(ConfigMsg.sub, sub, 4);
000046  9902              LDR      r1,[sp,#8]
000048  6101              STR      r1,[r0,#0x10]  ; ConfigMsg
;;;67       memcpy(ConfigMsg.gw,  gw, 4);
00004a  9901              LDR      r1,[sp,#4]
00004c  6141              STR      r1,[r0,#0x14]  ; ConfigMsg
;;;68       memcpy(ConfigMsg.mac, mac,6);
00004e  9903              LDR      r1,[sp,#0xc]
000050  6041              STR      r1,[r0,#4]  ; ConfigMsg
000052  f8bd1010          LDRH     r1,[sp,#0x10]
000056  8101              STRH     r1,[r0,#8]
;;;69       memcpy(ConfigMsg.dns,dns,4);
000058  9900              LDR      r1,[sp,#0]
00005a  6181              STR      r1,[r0,#0x18]  ; ConfigMsg
;;;70     
;;;71       ConfigMsg.dhcp=0;
00005c  2000              MOVS     r0,#0
00005e  490d              LDR      r1,|L2.148|
000060  7708              STRB     r0,[r1,#0x1c]
;;;72       ConfigMsg.debug=1;
000062  2001              MOVS     r0,#1
000064  7748              STRB     r0,[r1,#0x1d]
;;;73       ConfigMsg.fw_len=0;
000066  2000              MOVS     r0,#0
000068  83c8              STRH     r0,[r1,#0x1e]
;;;74       
;;;75       ConfigMsg.state=NORMAL_STATE;
00006a  f8810020          STRB     r0,[r1,#0x20]
;;;76       ConfigMsg.sw_ver[0]=FW_VER_HIGH;
00006e  2001              MOVS     r0,#1
000070  7288              STRB     r0,[r1,#0xa]
;;;77       ConfigMsg.sw_ver[1]=FW_VER_LOW;
000072  2100              MOVS     r1,#0
000074  4807              LDR      r0,|L2.148|
000076  72c1              STRB     r1,[r0,#0xb]
;;;78     
;;;79       set_network();//写入w5500
000078  f7fffffe          BL       set_network
;;;80     }
00007c  b006              ADD      sp,sp,#0x18
00007e  bd10              POP      {r4,pc}
;;;81     
                          ENDP

                  |L2.128|
000080  00                DCB      0
000081  0800              DCB      "\b",0
000083  00                DCB      0
000084  00                DCB      0
000085  00                DCB      0
000086  00                DCB      0
000087  00                DCB      0
                  |L2.136|
000088  ffffff00          DCB      255,255,255,0
                  |L2.140|
00008c  c0a80101          DCB      192,168,1,1
                  |L2.144|
000090  08080808          DCB      "\b\b\b\b"
                  |L2.148|
                          DCD      ConfigMsg

                          AREA ||i.set_network||, CODE, READONLY, ALIGN=2

                  set_network PROC
;;;27     
;;;28     void set_network(void)															// 配置初始化IP信息并打印，初始化8个Socket
000000  b508              PUSH     {r3,lr}
;;;29     {
;;;30       uint8 ip[4];
;;;31       setSHAR(ConfigMsg.mac);
000002  4812              LDR      r0,|L3.76|
000004  f7fffffe          BL       setSHAR
;;;32       setSUBR(ConfigMsg.sub);
000008  4810              LDR      r0,|L3.76|
00000a  300c              ADDS     r0,r0,#0xc
00000c  f7fffffe          BL       setSUBR
;;;33       setGAR(ConfigMsg.gw);
000010  480e              LDR      r0,|L3.76|
000012  3010              ADDS     r0,r0,#0x10
000014  f7fffffe          BL       setGAR
;;;34       setSIPR(ConfigMsg.lip);
000018  480c              LDR      r0,|L3.76|
00001a  3008              ADDS     r0,r0,#8
00001c  f7fffffe          BL       setSIPR
;;;35     
;;;36       sysinit(txsize, rxsize); 													// 初始化8个socket
000020  490b              LDR      r1,|L3.80|
000022  480c              LDR      r0,|L3.84|
000024  f7fffffe          BL       sysinit
;;;37       setRTR(2000);																			// 设置超时时间
000028  f44f60fa          MOV      r0,#0x7d0
00002c  f7fffffe          BL       setRTR
;;;38       setRCR(3);																				// 设置最大重新发送次数
000030  2003              MOVS     r0,#3
000032  f7fffffe          BL       setRCR
;;;39       
;;;40       getSIPR (ip);
000036  4668              MOV      r0,sp
000038  f7fffffe          BL       getSIPR
;;;41       DEBUG(COM1, ip, 4);
;;;42       getSUBR(ip);
00003c  4668              MOV      r0,sp
00003e  f7fffffe          BL       getSUBR
;;;43       DEBUG(COM1, ip, 4);
;;;44       getGAR(ip);
000042  4668              MOV      r0,sp
000044  f7fffffe          BL       getGAR
;;;45       DEBUG(COM1, ip, 4);
;;;46     }
000048  bd08              POP      {r3,pc}
;;;47     
                          ENDP

00004a  0000              DCW      0x0000
                  |L3.76|
                          DCD      ConfigMsg+0x4
                  |L3.80|
                          DCD      rxsize
                  |L3.84|
                          DCD      txsize

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  ConfigMsg
                          %        34

                          AREA ||.data||, DATA, ALIGN=0

                  txsize
000000  02020202          DCB      0x02,0x02,0x02,0x02
000004  02020202          DCB      0x02,0x02,0x02,0x02
                  rxsize
000008  02020202          DCB      0x02,0x02,0x02,0x02
00000c  02020202          DCB      0x02,0x02,0x02,0x02

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\Net\\device.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___8_device_c_txsize____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_device_c_txsize____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___8_device_c_txsize____REVSH|
#line 128
|__asm___8_device_c_txsize____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
